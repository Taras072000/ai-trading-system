#!/usr/bin/env python3
"""
üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ AI –º–æ–¥–µ–ª–µ–π
–ü–æ—ç—Ç–∞–ø–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
"""

import asyncio
import logging
import sys
from datetime import datetime
from ai_model_calibrator import AIModelCalibrator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'calibration_log_{datetime.now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def run_individual_model_calibration(model_name: str):
    """–ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏: {model_name}")
    
    calibrator = AIModelCalibrator()
    
    if not await calibrator.initialize():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
        return None
    
    try:
        result = await calibrator.calibrate_individual_model(model_name)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        best_result = result.best_result
        logger.info(f"\n{'='*60}")
        logger.info(f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–õ–ò–ë–†–û–í–ö–ò: {model_name}")
        logger.info(f"{'='*60}")
        logger.info(f"üìä –í–∏–Ω—Ä–µ–π—Ç: {best_result.win_rate:.1f}%")
        logger.info(f"üí∞ –û–±—â–∏–π P&L: {best_result.total_pnl:.2f}%")
        logger.info(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: {best_result.avg_profit_per_trade:.2f}%")
        logger.info(f"üìâ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {best_result.max_drawdown:.2f}%")
        logger.info(f"üìä Sharpe Ratio: {best_result.sharpe_ratio:.2f}")
        logger.info(f"üîÑ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {best_result.total_trades}")
        logger.info(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {best_result.avg_holding_time:.1f} —á–∞—Å–æ–≤")
        logger.info(f"üìà –£–ª—É—á—à–µ–Ω–∏–µ: {result.improvement_percentage:.1f}%")
        
        # –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        best_config = result.best_config
        logger.info(f"\nüîß –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
        logger.info(f"   –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {best_config.confidence_threshold}")
        logger.info(f"   Take Profit: {best_config.take_profit}%")
        logger.info(f"   Stop Loss: {best_config.stop_loss}%")
        logger.info(f"   –ú–∏–Ω. –æ–±—ä–µ–º: {best_config.min_volume_threshold}")
        logger.info(f"   –ú–∏–Ω. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {best_config.min_volatility_threshold}")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ {model_name}: {e}")
        return None

async def run_full_calibration():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ö–ê–õ–ò–ë–†–û–í–ö–ò –í–°–ï–• AI –ú–û–î–ï–õ–ï–ô")
    logger.info("="*80)
    
    calibrator = AIModelCalibrator()
    results = await calibrator.run_full_calibration()
    
    if results:
        logger.info("\nüéâ –ö–ê–õ–ò–ë–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É reports/calibration –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
    else:
        logger.error("‚ùå –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        model_name = sys.argv[1]
        valid_models = ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai', 'reinforcement_learning_engine']
        
        if model_name in valid_models:
            await run_individual_model_calibration(model_name)
        elif model_name == 'all':
            await run_full_calibration()
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model_name}")
            logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(valid_models)}")
            logger.info("‚úÖ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'all' –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
    else:
        logger.info("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:")
        logger.info("1. –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
        logger.info("2. –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
        
        if choice == '1':
            await run_full_calibration()
        elif choice == '2':
            logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            models = ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai', 'reinforcement_learning_engine']
            for i, model in enumerate(models, 1):
                logger.info(f"{i}. {model}")
            
            try:
                model_choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏: ").strip()) - 1
                if 0 <= model_choice < len(models):
                    await run_individual_model_calibration(models[model_choice])
                else:
                    logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–¥–µ–ª–∏")
            except ValueError:
                logger.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        else:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    asyncio.run(main())