#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MultiAIOrchestrator
"""

import asyncio
import sys
import os
import pandas as pd
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_modules.multi_ai_orchestrator import MultiAIOrchestrator

async def test_orchestrator_debug():
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Orchestrator"""
    print("üîç –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MultiAIOrchestrator")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = [datetime.now() - timedelta(hours=i) for i in range(100, 0, -1)]
    test_data = pd.DataFrame({
        'timestamp': dates,
        'open': [100 + i * 0.1 for i in range(100)],
        'high': [101 + i * 0.1 for i in range(100)],
        'low': [99 + i * 0.1 for i in range(100)],
        'close': [100.5 + i * 0.1 for i in range(100)],
        'volume': [1000 + i * 10 for i in range(100)]
    })
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Orchestrator
    orchestrator = MultiAIOrchestrator()
    
    try:
        print("\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
        decision = await orchestrator.analyze_and_decide(
            symbol="SOLUSDT",
            data=test_data
        )
        
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"  –î–µ–π—Å—Ç–≤–∏–µ: {decision.action}")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.confidence:.3f}")
        print(f"  –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {decision.position_size:.3f}")
        print(f"  –°—Ç–æ–ø-–ª–æ—Å—Å: {decision.stop_loss:.2f}")
        print(f"  –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {len(decision.take_profits)}")
        
        print(f"\nüìù –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:")
        print(decision.reasoning)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
        if orchestrator.signal_history:
            print(f"\nü§ñ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã AI –º–æ–¥—É–ª–µ–π:")
            latest_signals = orchestrator.signal_history[-1]
            for signal in latest_signals:
                print(f"  {signal.module_name}: {signal.signal_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.3f})")
                print(f"    –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal.reasoning[:100]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        await orchestrator.cleanup()

if __name__ == "__main__":
    asyncio.run(test_orchestrator_debug())