#!/usr/bin/env python3
"""
üöÄ –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
==============================

–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
- –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π (2% –≤–º–µ—Å—Ç–æ 10%)
- –£–º–µ—Ä–µ–Ω–Ω–æ–µ –ø–ª–µ—á–æ (3x –≤–º–µ—Å—Ç–æ 10x)
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã (1.5% –≤–º–µ—Å—Ç–æ 0.8%)
- –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (30% –≤–º–µ—Å—Ç–æ 20%)
- –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_critical_fixes.py
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from winrate_test_with_results2 import RealWinrateTester, TestConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_critical_fixes():
    """
    üß™ –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç —Å –Ω–æ–≤—ã–º–∏ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    print("üîß –¢–ï–°–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
    config = TestConfig(
        test_period_days=3,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –Ω–∞ 3 –¥–Ω—è
        start_balance=100.0,
        symbols=['BTCUSDT', 'ETHUSDT'],  # –¢–æ–ª—å–∫–æ 2 —Ç–æ–ø –ø–∞—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
        position_size_percent=0.02,  # 2% –≤–º–µ—Å—Ç–æ 10%
        leverage_multiplier=3.0,     # 3x –≤–º–µ—Å—Ç–æ 10x
        stop_loss_percent=0.015,     # 1.5% –≤–º–µ—Å—Ç–æ 0.8%
        take_profit_percent=0.045,   # 4.5% (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:3)
        min_confidence=0.30,         # 30% –≤–º–µ—Å—Ç–æ 20%
        
        # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–∞:
        max_portfolio_drawdown=10.0,
        max_consecutive_losses=3,
        confidence_correlation_check=True,
        min_correlation_threshold=0.1,
        
        # –û—Ç–ª–∞–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
        debug_mode=True,
        
        # –ö–æ–Ω—Å–µ–Ω—Å—É—Å
        min_consensus_models=1,  # –í—Ä–µ–º–µ–Ω–Ω–æ 1 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        enabled_ai_models=['trading_ai']  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    )
    
    print("üìä –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    print(f"   üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {config.position_size_percent*100}% (–±—ã–ª–æ 10%)")
    print(f"   üìà –ü–ª–µ—á–æ: {config.leverage_multiplier}x (–±—ã–ª–æ 10x)")
    print(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {config.stop_loss_percent*100}% (–±—ã–ª–æ 0.8%)")
    print(f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {config.take_profit_percent*100}% (–±—ã–ª–æ 2.5%)")
    print(f"   üé≤ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config.min_confidence*100}% (–±—ã–ª–æ 20%)")
    print(f"   üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {config.max_portfolio_drawdown}%")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏...")
        
        tester = RealWinrateTester(config)
        results_dict = await tester.run_full_test()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        all_trades = []
        total_pnl = 0.0
        for symbol, result in results_dict.items():
            all_trades.extend(result.trades)
            total_pnl += result.total_pnl
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if all_trades:
            from types import SimpleNamespace
            results = SimpleNamespace()
            results.trades = all_trades
            results.total_pnl = total_pnl
        else:
            results = None
        
        if results:
            print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print("=" * 40)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_trades = len(results.trades)
            profitable_trades = len([t for t in results.trades if t.pnl > 0])
            win_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
            total_pnl = sum(t.pnl for t in results.trades)
            
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            print(f"üí∞ –û–±—â–∏–π P&L: {total_pnl:.2f} USDT")
            print(f"üéØ Win Rate: {win_rate:.1f}%")
            print(f"üìà –°—Ä–µ–¥–Ω–∏–π P&L –Ω–∞ —Å–¥–µ–ª–∫—É: {total_pnl/total_trades:.2f} USDT" if total_trades > 0 else "N/A")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            print("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò:")
            print("=" * 50)
            print(f"   Win Rate: {win_rate:.1f}% (–±—ã–ª–æ 41.2%) - {'üü¢ –£–õ–£–ß–®–ï–ù–ò–ï' if win_rate > 41.2 else 'üî¥ –£–•–£–î–®–ï–ù–ò–ï'}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞
            if total_trades > 0:
                max_loss = min(t.pnl for t in results.trades)
                max_profit = max(t.pnl for t in results.trades)
                print(f"   –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: {max_loss:.2f} USDT")
                print(f"   –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: {max_profit:.2f} USDT")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
                running_pnl = 0
                max_drawdown = 0
                peak = 0
                for trade in results.trades:
                    running_pnl += trade.pnl
                    if running_pnl > peak:
                        peak = running_pnl
                    drawdown = (peak - running_pnl) / config.start_balance * 100
                    if drawdown > max_drawdown:
                        max_drawdown = drawdown
                
                print(f"   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.1f}% (–±—ã–ª–æ 34.1%) - {'üü¢ –£–õ–£–ß–®–ï–ù–ò–ï' if max_drawdown < 34.1 else 'üî¥ –£–•–£–î–®–ï–ù–ò–ï'}")
            
            # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if results.trades:
                avg_confidence = sum(t.confidence for t in results.trades) / len(results.trades)
                print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence*100:.1f}% (–±—ã–ª–æ 0.125%) - {'üü¢ –£–õ–£–ß–®–ï–ù–ò–ï' if avg_confidence > 0.00125 else 'üî¥ –£–•–£–î–®–ï–ù–ò–ï'}")
            
            print("\nüéØ –í–´–í–û–î–´:")
            if win_rate > 50 and total_pnl > 0:
                print("‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
                print("   –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º")
            elif win_rate > 41.2:
                print("üü° –ß–ê–°–¢–ò–ß–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï")
                print("   Win rate —É–ª—É—á—à–∏–ª—Å—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            else:
                print("üî¥ –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
                print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
        
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    exit_code = await test_critical_fixes()
    return exit_code

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    exit_code = asyncio.run(main())
    sys.exit(exit_code)