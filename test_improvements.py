#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

@dataclass
class AIModelDecision:
    model_name: str
    action: str  # 'BUY', 'SELL', 'HOLD'
    confidence: float
    reasoning: str
    timestamp: datetime

class TestImprovements:
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π"""
    
    def __init__(self):
        self.ai_models_performance = {
            'trading_ai': {'signal_accuracy': 0.75, 'contribution_to_pnl': 150.0, 'consensus_participation_rate': 0.8},
            'lava_ai': {'signal_accuracy': 0.68, 'contribution_to_pnl': 120.0, 'consensus_participation_rate': 0.7},
            'lgbm_ai': {'signal_accuracy': 0.82, 'contribution_to_pnl': 180.0, 'consensus_participation_rate': 0.9},
            'mistral_ai': {'signal_accuracy': 0.71, 'contribution_to_pnl': 90.0, 'consensus_participation_rate': 0.6},
            'reinforcement_learning_engine': {'signal_accuracy': 0.79, 'contribution_to_pnl': 200.0, 'consensus_participation_rate': 0.85}
        }
        self.consensus_weight_threshold = 0.55
        self.min_consensus_models = 2
    
    def calculate_model_weights(self) -> Dict[str, float]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not self.ai_models_performance:
                print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞")
                return {}
            
            weights = {}
            for model_name, performance in self.ai_models_performance.items():
                # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏, –≤–∫–ª–∞–¥–∞ –≤ PnL –∏ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ
                accuracy_weight = performance.get('signal_accuracy', 0.5)
                pnl_weight = max(0.1, min(2.0, performance.get('contribution_to_pnl', 0) / 100.0))
                participation_weight = performance.get('consensus_participation_rate', 0.5)
                
                # –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Å = —Å—Ä–µ–¥–Ω–µ–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ
                combined_weight = (accuracy_weight * 0.4 + pnl_weight * 0.4 + participation_weight * 0.2)
                weights[model_name] = max(0.1, min(3.0, combined_weight))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–µ—Å –æ—Ç 0.1 –¥–æ 3.0
            
            print(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π:")
            for model, weight in weights.items():
                perf = self.ai_models_performance[model]
                print(f"   {model}: {weight:.3f} (—Ç–æ—á–Ω–æ—Å—Ç—å: {perf['signal_accuracy']:.3f}, PnL: {perf['contribution_to_pnl']:.1f}, —É—á–∞—Å—Ç–∏–µ: {perf['consensus_participation_rate']:.3f})")
            
            return weights
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π: {e}")
            return {}
    
    def test_weighted_voting(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        print("\nüó≥Ô∏è –¢–ï–°–¢ –í–ó–í–ï–®–ï–ù–ù–û–ì–û –ì–û–õ–û–°–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        model_decisions = [
            AIModelDecision('trading_ai', 'BUY', 0.8, 'Strong uptrend', datetime.now()),
            AIModelDecision('lava_ai', 'BUY', 0.6, 'Positive sentiment', datetime.now()),
            AIModelDecision('lgbm_ai', 'SELL', 0.9, 'Overbought conditions', datetime.now()),
            AIModelDecision('mistral_ai', 'BUY', 0.7, 'Technical breakout', datetime.now()),
            AIModelDecision('reinforcement_learning_engine', 'BUY', 0.85, 'Optimal action', datetime.now())
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π
        model_weights = self.calculate_model_weights()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        buy_votes = [d for d in model_decisions if d.action == 'BUY']
        sell_votes = [d for d in model_decisions if d.action == 'SELL']
        hold_votes = [d for d in model_decisions if d.action == 'HOLD']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        buy_weighted_score = sum(d.confidence * model_weights.get(d.model_name, 1.0) for d in buy_votes)
        sell_weighted_score = sum(d.confidence * model_weights.get(d.model_name, 1.0) for d in sell_votes)
        hold_weighted_score = sum(d.confidence * model_weights.get(d.model_name, 1.0) for d in hold_votes)
        
        print(f"\nüü¢ BUY –≥–æ–ª–æ—Å–∞: {len(buy_votes)} (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {buy_weighted_score:.3f})")
        print(f"   –î–µ—Ç–∞–ª–∏: {[f'{d.model_name}({d.confidence:.3f}*{model_weights.get(d.model_name, 1.0):.3f})' for d in buy_votes]}")
        print(f"üî¥ SELL –≥–æ–ª–æ—Å–∞: {len(sell_votes)} (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {sell_weighted_score:.3f})")
        print(f"   –î–µ—Ç–∞–ª–∏: {[f'{d.model_name}({d.confidence:.3f}*{model_weights.get(d.model_name, 1.0):.3f})' for d in sell_votes]}")
        print(f"‚ö™ HOLD –≥–æ–ª–æ—Å–∞: {len(hold_votes)} (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {hold_weighted_score:.3f})")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
        max_score = max(buy_weighted_score, sell_weighted_score, hold_weighted_score)
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞:")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {max_score:.3f}")
        print(f"   –ü–æ—Ä–æ–≥ –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {self.consensus_weight_threshold:.3f}")
        print(f"   –ú–∏–Ω–∏–º—É–º –≥–æ–ª–æ—Å–æ–≤: {self.min_consensus_models}")
        
        if max_score >= self.consensus_weight_threshold:
            if buy_weighted_score == max_score and len(buy_votes) >= self.min_consensus_models:
                print(f"‚úÖ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: BUY —Å {len(buy_votes)} –≥–æ–ª–æ—Å–∞–º–∏ (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {buy_weighted_score:.3f})")
                return 'BUY', buy_weighted_score
            elif sell_weighted_score == max_score and len(sell_votes) >= self.min_consensus_models:
                print(f"‚úÖ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: SELL —Å {len(sell_votes)} –≥–æ–ª–æ—Å–∞–º–∏ (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {sell_weighted_score:.3f})")
                return 'SELL', sell_weighted_score
            else:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞")
                return None, 0
        else:
            print(f"‚ùå –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –ù–ï –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç {max_score:.3f} < –ø–æ—Ä–æ–≥–∞ {self.consensus_weight_threshold:.3f}")
            return None, 0
    
    def test_weighted_confidence(self, final_action, participating_decisions, model_weights):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        print(f"\nüìä –¢–ï–°–¢ –í–ó–í–ï–®–ï–ù–ù–û–ô –£–í–ï–†–ï–ù–ù–û–°–¢–ò")
        print("=" * 50)
        
        if not participating_decisions:
            print("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π")
            return 0
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = —Å—É–º–º–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å * –≤–µ—Å –º–æ–¥–µ–ª–∏) / —Å—É–º–º–∞ –≤–µ—Å–æ–≤
        total_weighted_confidence = sum(d.confidence * model_weights.get(d.model_name, 1.0) for d in participating_decisions)
        total_weights = sum(model_weights.get(d.model_name, 1.0) for d in participating_decisions)
        confidence_avg = total_weighted_confidence / total_weights if total_weights > 0 else 0
        
        print(f"–î–µ–π—Å—Ç–≤–∏–µ: {final_action}")
        print(f"–í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {confidence_avg:.3f}")
        print(f"–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞: {total_weighted_confidence:.3f} / {total_weights:.3f}")
        print(f"–£—á–∞—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏: {[f'{d.model_name}({d.confidence:.3f}*{model_weights.get(d.model_name, 1.0):.3f})' for d in participating_decisions]}")
        
        return confidence_avg
    
    def test_hhll_pattern(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É HH/LL –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        print(f"\nüìà –¢–ï–°–¢ HH/LL –ü–ê–¢–¢–ï–†–ù–û–í")
        print("=" * 50)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω (–≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥)
        test_prices = [100, 102, 101, 105, 103, 108, 106, 110, 109, 115, 112, 118]
        
        print(f"–¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã: {test_prices}")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è HH/LL
        highs = []
        lows = []
        
        for i in range(1, len(test_prices) - 1):
            if test_prices[i] > test_prices[i-1] and test_prices[i] > test_prices[i+1]:
                highs.append((i, test_prices[i]))
            elif test_prices[i] < test_prices[i-1] and test_prices[i] < test_prices[i+1]:
                lows.append((i, test_prices[i]))
        
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã: {highs}")
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã: {lows}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        if len(highs) >= 2:
            higher_highs = sum(1 for i in range(1, len(highs)) if highs[i][1] > highs[i-1][1])
            print(f"Higher Highs: {higher_highs} –∏–∑ {len(highs)-1}")
        
        if len(lows) >= 2:
            higher_lows = sum(1 for i in range(1, len(lows)) if lows[i][1] > lows[i-1][1])
            print(f"Higher Lows: {higher_lows} –∏–∑ {len(lows)-1}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É —Ä—ã–Ω–∫–∞
        if len(highs) >= 2 and len(lows) >= 2:
            hh_ratio = higher_highs / (len(highs) - 1) if len(highs) > 1 else 0
            hl_ratio = higher_lows / (len(lows) - 1) if len(lows) > 1 else 0
            
            if hh_ratio >= 0.6 and hl_ratio >= 0.6:
                market_phase = "UPTREND"
                pattern_confidence = (hh_ratio + hl_ratio) / 2
            elif hh_ratio <= 0.4 and hl_ratio <= 0.4:
                market_phase = "DOWNTREND"
                pattern_confidence = 1 - (hh_ratio + hl_ratio) / 2
            else:
                market_phase = "SIDEWAYS"
                pattern_confidence = 0.5
        else:
            market_phase = "INSUFFICIENT_DATA"
            pattern_confidence = 0.0
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ HH/LL:")
        print(f"   –§–∞–∑–∞ —Ä—ã–Ω–∫–∞: {market_phase}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ: {pattern_confidence:.3f}")
        
        return market_phase, pattern_confidence

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ò–ô –°–ò–°–¢–ï–ú–´ –í–ò–ù–†–ï–ô–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    tester = TestImprovements()
    
    # –¢–µ—Å—Ç 1: –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    final_action, weighted_score = tester.test_weighted_voting()
    
    # –¢–µ—Å—Ç 2: –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å)
    if final_action:
        model_weights = tester.calculate_model_weights()
        # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        participating_decisions = [
            AIModelDecision('trading_ai', final_action, 0.8, 'Test', datetime.now()),
            AIModelDecision('lava_ai', final_action, 0.6, 'Test', datetime.now()),
            AIModelDecision('mistral_ai', final_action, 0.7, 'Test', datetime.now()),
            AIModelDecision('reinforcement_learning_engine', final_action, 0.85, 'Test', datetime.now())
        ]
        confidence = tester.test_weighted_confidence(final_action, participating_decisions, model_weights)
    
    # –¢–µ—Å—Ç 3: HH/LL –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    market_phase, pattern_confidence = tester.test_hhll_pattern()
    
    print(f"\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("=" * 60)
    print(f"üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
    print(f"   –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if final_action else '‚ùå –ù–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞'}")
    print(f"   –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if final_action else '‚ùå –ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–æ—Å—å'}")
    print(f"   HH/LL –∞–Ω–∞–ª–∏–∑: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (—Ñ–∞–∑–∞: {market_phase})")

if __name__ == "__main__":
    main()