#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–¥–µ–ª–æ–∫
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –ø—Ä–∏ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–¥–µ–ª–æ–∫
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import logging
from dataclasses import dataclass
import json
import os
import csv
from pathlib import Path
import scipy.stats as stats
from scipy.stats import norm
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–µ—Ä–∞
from winrate_test_with_results2 import (
    RealWinrateTester, TestConfig, WinrateTestResult, TradeResult
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class EnhancedPairTestResult:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
    symbol: str
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    roi_percent: float
    win_rate: float
    total_pnl: float
    total_trades: int
    avg_trade_pnl: float
    max_drawdown: float
    sharpe_ratio: float
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    profit_factor: float
    avg_trade_duration_hours: float
    roi_std: float
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
    win_rate_confidence_interval: Tuple[float, float]
    statistical_significance: bool
    min_trades_for_significance: int
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    train_roi: float
    validation_roi: float
    test_roi: float
    
    # –°—Ç–∞—Ç—É—Å
    test_success: bool
    meets_min_trades: bool
    error_message: str = ""

class ImprovedMassTester:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    
    def __init__(self, min_trades_threshold: int = 30):
        self.min_trades_threshold = min_trades_threshold
        
        # –¢–æ–ø-50 USDT –ø–∞—Ä –Ω–∞ Binance –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–º—É –æ–±—ä–µ–º—É
        self.trading_pairs = [
            'BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'BNBUSDT', 'XRPUSDT',
            'DOGEUSDT', 'TRXUSDT', 'SUIUSDT', 'ADAUSDT', 'BCHUSDT',
            'LINKUSDT', 'PEPEUSDT', 'TAOUSDT', 'AVAXUSDT', 'LTCUSDT',
            'DOTUSDT', 'UNIUSDT', 'ATOMUSDT', 'FILUSDT', 'NEARUSDT',
            'ICPUSDT', 'AAVEUSDT', 'ARBUSDT', 'OPUSDT', 'MKRUSDT',
            'GRTUSDT', 'SANDUSDT', 'MANAUSDT', 'APTUSDT', 'LDOUSDT',
            'CRVUSDT', 'ZRXUSDT', 'ENJUSDT', 'CHZUSDT', 'BATUSDT',
            'SUSHIUSDT', 'COMPUSDT', 'YFIUSDT', 'STORJUSDT', 'KNCUSDT',
            'BNTUSDT', 'ZILUSDT', 'ICXUSDT', 'ONTUSDT', '1INCHUSDT',
            'WLDUSDT', 'MATICUSDT', 'RENUSDT', 'LOOMUSDT', 'REPUSDT'
        ]
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        self.test_config = TestConfig(
            test_period_days=30,  # 30 –¥–Ω–µ–π –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stop_loss_percent=0.8,  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π SL
            take_profit_percent=2.5,  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π TP
            min_confidence=20,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI
            use_take_profit_grid=True,
            take_profit_levels=[2.0, 2.5, 3.0],  # –°–µ—Ç–∫–∞ TP
            take_profit_portions=[0.4, 0.35, 0.25]  # –î–æ–ª–∏ –¥–ª—è —Å–µ—Ç–∫–∏
        )
        
        self.results: List[EnhancedPairTestResult] = []
        
    def calculate_confidence_interval(self, wins: int, total: int, confidence: float = 0.95) -> Tuple[float, float]:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–∏–Ω—Ä–µ–π—Ç–∞"""
        if total == 0:
            return (0.0, 0.0)
            
        p = wins / total
        z = norm.ppf((1 + confidence) / 2)
        margin = z * np.sqrt(p * (1 - p) / total)
        
        lower = max(0, p - margin)
        upper = min(1, p + margin)
        
        return (lower * 100, upper * 100)
    
    def is_statistically_significant(self, total_trades: int, min_trades: int = 50) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫—É—é –∑–Ω–∞—á–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        return total_trades >= min_trades
    
    def calculate_profit_factor(self, trades: List[TradeResult]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å Profit Factor"""
        if not trades:
            return 0.0
            
        gross_profit = sum(trade.pnl for trade in trades if trade.pnl > 0)
        gross_loss = abs(sum(trade.pnl for trade in trades if trade.pnl < 0))
        
        if gross_loss == 0:
            return float('inf') if gross_profit > 0 else 0.0
            
        return gross_profit / gross_loss
    
    def calculate_avg_trade_duration(self, trades: List[TradeResult]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ –≤ —á–∞—Å–∞—Ö"""
        if not trades:
            return 0.0
            
        durations = []
        for trade in trades:
            if hasattr(trade, 'entry_time') and hasattr(trade, 'exit_time'):
                duration = (trade.exit_time - trade.entry_time).total_seconds() / 3600
                durations.append(duration)
        
        return np.mean(durations) if durations else 0.0
    
    def split_data_periods(self, total_days: int) -> Tuple[int, int, int]:
        """–†–∞–∑–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ train/validation/test (60/20/20)"""
        train_days = int(total_days * 0.6)
        validation_days = int(total_days * 0.2)
        test_days = total_days - train_days - validation_days
        
        return train_days, validation_days, test_days
    
    async def test_single_pair_enhanced(self, symbol: str) -> EnhancedPairTestResult:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã"""
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol} —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
            tester = RealWinrateTester(symbol, self.test_config)
            
            # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (30 –¥–Ω–µ–π)
            full_result = await tester.run_test()
            
            if not full_result.test_success:
                return EnhancedPairTestResult(
                    symbol=symbol,
                    roi_percent=0.0, win_rate=0.0, total_pnl=0.0, total_trades=0,
                    avg_trade_pnl=0.0, max_drawdown=0.0, sharpe_ratio=0.0,
                    profit_factor=0.0, avg_trade_duration_hours=0.0, roi_std=0.0,
                    win_rate_confidence_interval=(0.0, 0.0), statistical_significance=False,
                    min_trades_for_significance=50, train_roi=0.0, validation_roi=0.0,
                    test_roi=0.0, test_success=False, meets_min_trades=False,
                    error_message=full_result.error_message
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            meets_min_trades = full_result.total_trades >= self.min_trades_threshold
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            profit_factor = self.calculate_profit_factor(full_result.trades)
            avg_duration = self.calculate_avg_trade_duration(full_result.trades)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ROI
            trade_returns = [trade.pnl for trade in full_result.trades] if full_result.trades else [0]
            roi_std = np.std(trade_returns)
            
            # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤–∏–Ω—Ä–µ–π—Ç–∞
            wins = sum(1 for trade in full_result.trades if trade.pnl > 0)
            confidence_interval = self.calculate_confidence_interval(wins, full_result.total_trades)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
            is_significant = self.is_statistically_significant(full_result.total_trades)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º (train/validation/test)
            train_days, val_days, test_days = self.split_data_periods(30)
            
            # Train –ø–µ—Ä–∏–æ–¥
            train_config = TestConfig(**self.test_config.__dict__)
            train_config.test_period_days = train_days
            train_tester = RealWinrateTester(symbol, train_config)
            train_result = await train_tester.run_test()
            train_roi = train_result.roi_percent if train_result.test_success else 0.0
            
            # Validation –ø–µ—Ä–∏–æ–¥ (—Å—Ä–µ–¥–Ω–∏–µ –¥–Ω–∏)
            val_config = TestConfig(**self.test_config.__dict__)
            val_config.test_period_days = val_days
            val_tester = RealWinrateTester(symbol, val_config)
            val_result = await val_tester.run_test()
            validation_roi = val_result.roi_percent if val_result.test_success else 0.0
            
            # Test –ø–µ—Ä–∏–æ–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏)
            test_config = TestConfig(**self.test_config.__dict__)
            test_config.test_period_days = test_days
            test_tester = RealWinrateTester(symbol, test_config)
            test_result = await test_tester.run_test()
            test_roi = test_result.roi_percent if test_result.test_success else 0.0
            
            return EnhancedPairTestResult(
                symbol=symbol,
                roi_percent=full_result.roi_percent,
                win_rate=full_result.win_rate,
                total_pnl=full_result.total_pnl,
                total_trades=full_result.total_trades,
                avg_trade_pnl=full_result.avg_trade_pnl,
                max_drawdown=full_result.max_drawdown,
                sharpe_ratio=full_result.sharpe_ratio,
                profit_factor=profit_factor,
                avg_trade_duration_hours=avg_duration,
                roi_std=roi_std,
                win_rate_confidence_interval=confidence_interval,
                statistical_significance=is_significant,
                min_trades_for_significance=50,
                train_roi=train_roi,
                validation_roi=validation_roi,
                test_roi=test_roi,
                test_success=True,
                meets_min_trades=meets_min_trades
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {symbol}: {str(e)}")
            return EnhancedPairTestResult(
                symbol=symbol,
                roi_percent=0.0, win_rate=0.0, total_pnl=0.0, total_trades=0,
                avg_trade_pnl=0.0, max_drawdown=0.0, sharpe_ratio=0.0,
                profit_factor=0.0, avg_trade_duration_hours=0.0, roi_std=0.0,
                win_rate_confidence_interval=(0.0, 0.0), statistical_significance=False,
                min_trades_for_significance=50, train_roi=0.0, validation_roi=0.0,
                test_roi=0.0, test_success=False, meets_min_trades=False,
                error_message=str(e)
            )
    
    async def run_improved_mass_testing(self) -> List[EnhancedPairTestResult]:
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {len(self.trading_pairs)} –ø–∞—Ä")
        logger.info(f"üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–¥–µ–ª–æ–∫: {self.min_trades_threshold}")
        logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: SL {self.test_config.stop_loss_percent}%, TP {self.test_config.take_profit_percent}%")
        
        start_time = datetime.now()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ä—ã
        for i, symbol in enumerate(self.trading_pairs, 1):
            logger.info(f"üìà [{i}/{len(self.trading_pairs)}] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}...")
            result = await self.test_single_pair_enhanced(symbol)
            self.results.append(result)
            
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if result.meets_min_trades:
                logger.info(f"‚úÖ {symbol}: {result.total_trades} —Å–¥–µ–ª–æ–∫, ROI: {result.roi_percent:.2f}%, WR: {result.win_rate:.1f}%")
            else:
                logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–¥–µ–ª–æ–∫ ({result.total_trades} < {self.min_trades_threshold})")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ROI
        self.results.sort(key=lambda x: x.roi_percent, reverse=True)
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds() / 60
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {duration:.1f} –º–∏–Ω—É—Ç")
        return self.results
    
    def generate_enhanced_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        if not self.results:
            return "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞"
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–¥–µ–ª–æ–∫
        valid_results = [r for r in self.results if r.meets_min_trades and r.test_success]
        insufficient_results = [r for r in self.results if not r.meets_min_trades and r.test_success]
        failed_results = [r for r in self.results if not r.test_success]
        
        report = []
        report.append("=" * 80)
        report.append("üìä –£–õ–£–ß–®–ï–ù–ù–´–ô –û–¢–ß–ï–¢ –ú–ê–°–°–û–í–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        report.append("=" * 80)
        report.append(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"‚öôÔ∏è –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {self.test_config.test_period_days} –¥–Ω–µ–π")
        report.append(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–¥–µ–ª–æ–∫: {self.min_trades_threshold}")
        report.append(f"üìà Stop Loss: {self.test_config.stop_loss_percent}%")
        report.append(f"üìà Take Profit: {self.test_config.take_profit_percent}%")
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–∞—Ä: {len(self.results)}")
        report.append(f"‚Ä¢ –ü–∞—Ä—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–¥–µ–ª–æ–∫: {len(valid_results)}")
        report.append(f"‚Ä¢ –ü–∞—Ä—ã —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–¥–µ–ª–æ–∫: {len(insufficient_results)}")
        report.append(f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã: {len(failed_results)}")
        report.append("")
        
        if valid_results:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            profitable_pairs = [r for r in valid_results if r.roi_percent > 0]
            avg_roi = np.mean([r.roi_percent for r in valid_results])
            avg_winrate = np.mean([r.win_rate for r in valid_results])
            avg_trades = np.mean([r.total_trades for r in valid_results])
            
            report.append("‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ê–õ–ò–î–ù–´–ú –ü–ê–†–ê–ú:")
            report.append(f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ä: {len(profitable_pairs)}/{len(valid_results)} ({len(profitable_pairs)/len(valid_results)*100:.1f}%)")
            report.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π ROI: {avg_roi:.2f}%")
            report.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_winrate:.1f}%")
            report.append(f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {avg_trades:.1f}")
            report.append("")
            
            # –¢–æ–ø-10 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ä
            report.append("üèÜ –¢–û–ü-10 –ü–†–ò–ë–´–õ–¨–ù–´–• –ü–ê–† (—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–¥–µ–ª–æ–∫):")
            report.append("-" * 80)
            report.append(f"{'–†–∞–Ω–≥':<4} {'–ü–∞—Ä–∞':<12} {'ROI%':<8} {'WR%':<6} {'–°–¥–µ–ª–∫–∏':<8} {'PF':<6} {'–ó–Ω–∞—á–∏–º–æ—Å—Ç—å':<12}")
            report.append("-" * 80)
            
            for i, result in enumerate(profitable_pairs[:10], 1):
                significance = "‚úÖ –î–∞" if result.statistical_significance else "‚ö†Ô∏è –ù–µ—Ç"
                report.append(f"{i:<4} {result.symbol:<12} {result.roi_percent:<8.2f} {result.win_rate:<6.1f} {result.total_trades:<8} {result.profit_factor:<6.2f} {significance:<12}")
            
            report.append("")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–æ–ø-5
            report.append("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –¢–û–ü-5:")
            report.append("-" * 80)
            
            for i, result in enumerate(profitable_pairs[:5], 1):
                ci_lower, ci_upper = result.win_rate_confidence_interval
                report.append(f"{i}. {result.symbol}")
                report.append(f"   ROI: {result.roi_percent:.2f}% | –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.1f}% (CI: {ci_lower:.1f}%-{ci_upper:.1f}%)")
                report.append(f"   –°–¥–µ–ª–∫–∏: {result.total_trades} | Profit Factor: {result.profit_factor:.2f}")
                report.append(f"   –ü—Ä–æ—Å–∞–¥–∫–∞: {result.max_drawdown:.2f}% | –®–∞—Ä–ø: {result.sharpe_ratio:.2f}")
                report.append(f"   Train/Val/Test ROI: {result.train_roi:.2f}%/{result.validation_roi:.2f}%/{result.test_roi:.2f}%")
                report.append(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {'‚úÖ –î–∞' if result.statistical_significance else '‚ö†Ô∏è –ù–µ—Ç'}")
                report.append("")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–¥–µ–ª–æ–∫
        if insufficient_results:
            report.append("‚ö†Ô∏è –ü–ê–†–´ –° –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–´–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –°–î–ï–õ–û–ö:")
            report.append("-" * 80)
            report.append(f"{'–ü–∞—Ä–∞':<12} {'–°–¥–µ–ª–∫–∏':<8} {'ROI%':<8} {'WR%':<6} {'–°—Ç–∞—Ç—É—Å':<20}")
            report.append("-" * 80)
            
            for result in insufficient_results[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                status = f"< {self.min_trades_threshold} —Å–¥–µ–ª–æ–∫"
                report.append(f"{result.symbol:<12} {result.total_trades:<8} {result.roi_percent:<8.2f} {result.win_rate:<6.1f} {status:<20}")
            
            if len(insufficient_results) > 15:
                report.append(f"... –∏ –µ—â–µ {len(insufficient_results) - 15} –ø–∞—Ä")
            report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        report.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å –º–∏–Ω–∏–º—É–º 30+ —Å–¥–µ–ª–æ–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        report.append("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤–∏–Ω—Ä–µ–π—Ç–∞")
        report.append("‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Train/Validation/Test –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è overfitting")
        report.append("‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ Profit Factor –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–∞—Ä")
        report.append("")
        
        return "\n".join(report)
    
    def save_enhanced_results_to_csv(self, filename: str = "improved_mass_testing_results.csv"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        if not self.results:
            logger.warning("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        reports_dir = Path("reports/csv_reports")
        reports_dir.mkdir(parents=True, exist_ok=True)
        
        filepath = reports_dir / filename
        
        with open(filepath, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'rank', 'symbol', 'roi_percent', 'win_rate', 'total_pnl', 'total_trades',
                'avg_trade_pnl', 'max_drawdown', 'sharpe_ratio', 'profit_factor',
                'avg_trade_duration_hours', 'roi_std', 'win_rate_ci_lower', 'win_rate_ci_upper',
                'statistical_significance', 'meets_min_trades', 'train_roi', 'validation_roi',
                'test_roi', 'test_success', 'error_message'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for rank, result in enumerate(self.results, 1):
                ci_lower, ci_upper = result.win_rate_confidence_interval
                writer.writerow({
                    'rank': rank,
                    'symbol': result.symbol,
                    'roi_percent': round(result.roi_percent, 2),
                    'win_rate': round(result.win_rate, 1),
                    'total_pnl': round(result.total_pnl, 2),
                    'total_trades': result.total_trades,
                    'avg_trade_pnl': round(result.avg_trade_pnl, 2),
                    'max_drawdown': round(result.max_drawdown, 2),
                    'sharpe_ratio': round(result.sharpe_ratio, 2),
                    'profit_factor': round(result.profit_factor, 2),
                    'avg_trade_duration_hours': round(result.avg_trade_duration_hours, 2),
                    'roi_std': round(result.roi_std, 2),
                    'win_rate_ci_lower': round(ci_lower, 1),
                    'win_rate_ci_upper': round(ci_upper, 1),
                    'statistical_significance': result.statistical_significance,
                    'meets_min_trades': result.meets_min_trades,
                    'train_roi': round(result.train_roi, 2),
                    'validation_roi': round(result.validation_roi, 2),
                    'test_roi': round(result.test_roi, 2),
                    'test_success': result.test_success,
                    'error_message': result.error_message
                })
        
        logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
    
    def get_statistically_significant_pairs(self, top_n: int = 10) -> List[EnhancedPairTestResult]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –ø–∞—Ä—ã"""
        valid_results = [r for r in self.results if r.meets_min_trades and r.statistical_significance and r.test_success and r.roi_percent > 0]
        return valid_results[:top_n]

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("üìä –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –Ω–µ–∑–Ω–∞—á–∏–º–æ—Å—Ç–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º 30 —Å–¥–µ–ª–æ–∫
    tester = ImprovedMassTester(min_trades_threshold=30)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    start_time = datetime.now()
    results = await tester.run_improved_mass_testing()
    end_time = datetime.now()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = tester.generate_enhanced_report()
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.save_enhanced_results_to_csv()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –ø–∞—Ä—ã
    significant_pairs = tester.get_statistically_significant_pairs(5)
    
    print("\n" + "=" * 60)
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("=" * 60)
    
    if significant_pairs:
        print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:")
        for i, pair in enumerate(significant_pairs, 1):
            print(f"{i}. {pair.symbol}: ROI {pair.roi_percent:.2f}%, {pair.total_trades} —Å–¥–µ–ª–æ–∫")
    else:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ä!")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ 60-90 –¥–Ω–µ–π")
        print("   ‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI")
        print("   ‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SL/TP")
    
    duration = (end_time - start_time).total_seconds() / 60
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.1f} –º–∏–Ω—É—Ç")

if __name__ == "__main__":
    asyncio.run(main())