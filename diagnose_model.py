#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import asyncio
import joblib
import numpy as np
import pandas as pd
import json
from data_collector import BinanceDataCollector
from enhanced_indicators import EnhancedTechnicalIndicators

async def diagnose_model():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ BTCUSDT"""
    print('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–î–ï–õ–ò BTCUSDT')
    print('=' * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        model_path = 'models/trading_ai/BTCUSDT_trading_model.joblib'
        scaler_path = 'models/trading_ai/BTCUSDT_scaler.joblib'
        features_path = 'models/trading_ai/BTCUSDT_features.json'
        
        model = joblib.load(model_path)
        scaler = joblib.load(scaler_path)
        
        with open(features_path, 'r') as f:
            feature_names = json.load(f)
        
        print(f'‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {type(model).__name__}')
        print(f'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(feature_names)}')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        collector = BinanceDataCollector()
        async with collector:
            data = await collector.get_historical_data('BTCUSDT', '1h', 100)
        indicators = EnhancedTechnicalIndicators()
        
        print(f'üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π
        features_list = []
        for i in range(len(data)-10, len(data)):
            window_data = data.iloc[max(0, i-50):i+1]
            if len(window_data) >= 1:
                try:
                    features = indicators.calculate_all_indicators(window_data)
                    features_list.append(features)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ {i}: {e}")
                    continue
        
        if not features_list:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏")
            return
            
        features_df = pd.DataFrame(features_list)
        features_df = features_df.fillna(method='ffill').fillna(0)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        available_features = [f for f in feature_names if f in features_df.columns]
        missing_features = [f for f in feature_names if f not in features_df.columns]
        
        print(f'‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(available_features)}/{len(feature_names)}')
        if missing_features:
            print(f'‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features[:5]}...')
        
        X = features_df[available_features]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞–∫ –Ω—É–ª–∏
        for feature in missing_features:
            X[feature] = 0
            
        # –ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        X = X[feature_names]
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
        X_scaled = scaler.transform(X)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        predictions = model.predict(X_scaled)
        probabilities = model.predict_proba(X_scaled)
        
        print(f'\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(X)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:')
        print(f'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {predictions}')
        print(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {np.unique(predictions)}')
        
        print('\nüìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º (–ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π):')
        for i, probs in enumerate(probabilities[:5]):
            print(f'  –ó–∞–ø–∏—Å—å {i+1}: HOLD={probs[0]:.4f}, BUY={probs[1]:.4f}, SELL={probs[2]:.4f}')
        
        print('\nüìä –°—Ä–µ–¥–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:')
        mean_probs = np.mean(probabilities, axis=0)
        print(f'  HOLD: {mean_probs[0]:.4f}')
        print(f'  BUY: {mean_probs[1]:.4f}')
        print(f'  SELL: {mean_probs[2]:.4f}')
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        print('\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:')
        max_probs = np.max(probabilities, axis=1)
        print(f'  –ú–∏–Ω–∏–º—É–º: {np.min(max_probs):.4f}')
        print(f'  –ú–∞–∫—Å–∏–º—É–º: {np.max(max_probs):.4f}')
        print(f'  –°—Ä–µ–¥–Ω–µ–µ: {np.mean(max_probs):.4f}')
        print(f'  –ú–µ–¥–∏–∞–Ω–∞: {np.median(max_probs):.4f}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è BUY/SELL —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
        buy_probs = probabilities[:, 1]
        sell_probs = probabilities[:, 2]
        
        print(f'\nüîç –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π BUY:')
        print(f'  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {np.max(buy_probs):.4f}')
        print(f'  –°—Ä–µ–¥–Ω—è—è: {np.mean(buy_probs):.4f}')
        print(f'  –ó–∞–ø–∏—Å–µ–π —Å BUY > 0.3: {np.sum(buy_probs > 0.3)}')
        print(f'  –ó–∞–ø–∏—Å–µ–π —Å BUY > 0.4: {np.sum(buy_probs > 0.4)}')
        
        print(f'\nüîç –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π SELL:')
        print(f'  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {np.max(sell_probs):.4f}')
        print(f'  –°—Ä–µ–¥–Ω—è—è: {np.mean(sell_probs):.4f}')
        print(f'  –ó–∞–ø–∏—Å–µ–π —Å SELL > 0.3: {np.sum(sell_probs > 0.3)}')
        print(f'  –ó–∞–ø–∏—Å–µ–π —Å SELL > 0.4: {np.sum(sell_probs > 0.4)}')
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(diagnose_model())