"""
ü§ñ MOCK AI –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê
–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π AI –º–æ–¥–µ–ª–µ–π

–ê–≤—Ç–æ—Ä: AI Trading System
–î–∞—Ç–∞: 2024
"""

import asyncio
import pandas as pd
import numpy as np
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import random
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from winrate_test_with_results2 import RealWinrateTester, TestConfig, WinrateTestResult

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class MockAISignal:
    """–ò–º–∏—Ç–∞—Ü–∏—è AI —Å–∏–≥–Ω–∞–ª–∞"""
    action: str  # BUY, SELL, HOLD
    confidence: float  # 0.0 - 1.0
    reasoning: str
    model_name: str
    timestamp: datetime

class MockAIModel:
    """
    ü§ñ –ò–ú–ò–¢–ê–¶–ò–Ø AI –ú–û–î–ï–õ–ò
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ:
    - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    - –°–ª—É—á–∞–π–Ω–æ—Å—Ç–∏ (–∏–º–∏—Ç–∞—Ü–∏—è AI –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏)
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    
    def __init__(self, name: str, quality_level: float = 0.6, bias: str = "neutral"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è mock AI –º–æ–¥–µ–ª–∏
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            quality_level: –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (0.0-1.0), –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤
            bias: –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ ("bullish", "bearish", "neutral")
        """
        self.name = name
        self.quality_level = quality_level  # –ß–µ–º –≤—ã—à–µ, —Ç–µ–º –ª—É—á—à–µ —Å–∏–≥–Ω–∞–ª—ã
        self.bias = bias
        self.signal_count = 0
        
        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ mock –º–æ–¥–µ–ª—å {name} (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_level:.2f}, —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å: {bias})")
    
    async def generate_signal(self, symbol: str, data: pd.DataFrame) -> MockAISignal:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        –õ–æ–≥–∏–∫–∞:
        1. –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
        4. –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        if len(data) < 20:
            return MockAISignal(
                action="HOLD",
                confidence=0.1,
                reasoning="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                model_name=self.name,
                timestamp=datetime.now()
            )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        close_prices = data['close'].values
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
        sma_short = np.mean(close_prices[-5:])
        sma_long = np.mean(close_prices[-20:])
        
        # RSI (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        price_changes = np.diff(close_prices[-14:])
        gains = np.where(price_changes > 0, price_changes, 0)
        losses = np.where(price_changes < 0, -price_changes, 0)
        avg_gain = np.mean(gains) if len(gains) > 0 else 0
        avg_loss = np.mean(losses) if len(losses) > 0 else 0.01
        rsi = 100 - (100 / (1 + avg_gain / avg_loss))
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        volatility = np.std(close_prices[-10:]) / np.mean(close_prices[-10:])
        
        # –û–±—ä–µ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        volume_trend = 0
        if 'volume' in data.columns:
            recent_volume = np.mean(data['volume'].tail(5))
            avg_volume = np.mean(data['volume'].tail(20))
            volume_trend = (recent_volume - avg_volume) / avg_volume
        
        # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
        signal_strength = 0
        reasoning_parts = []
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        if sma_short > sma_long:
            signal_strength += 0.3
            reasoning_parts.append("–í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (SMA)")
        else:
            signal_strength -= 0.3
            reasoning_parts.append("–ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ (SMA)")
        
        # –ê–Ω–∞–ª–∏–∑ RSI
        if rsi < 30:
            signal_strength += 0.4  # –ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
            reasoning_parts.append(f"–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å (RSI: {rsi:.1f})")
        elif rsi > 70:
            signal_strength -= 0.4  # –ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
            reasoning_parts.append(f"–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å (RSI: {rsi:.1f})")
        else:
            reasoning_parts.append(f"–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π RSI ({rsi:.1f})")
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
        if volume_trend > 0.2:
            signal_strength += 0.2
            reasoning_parts.append("–í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º")
        elif volume_trend < -0.2:
            signal_strength -= 0.1
            reasoning_parts.append("–ù–∏–∑–∫–∏–π –æ–±—ä–µ–º")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        if self.bias == "bullish":
            signal_strength += 0.1
            reasoning_parts.append("–ë—ã—á—å—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
        elif self.bias == "bearish":
            signal_strength -= 0.1
            reasoning_parts.append("–ú–µ–¥–≤–µ–∂—å—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (–∏–º–∏—Ç–∞—Ü–∏—è AI –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏)
        noise = random.uniform(-0.3, 0.3) * (1 - self.quality_level)
        signal_strength += noise
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if signal_strength > 0.2:
            action = "BUY"
        elif signal_strength < -0.2:
            action = "SELL"
        else:
            action = "HOLD"
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = min(0.95, max(0.05, abs(signal_strength) * self.quality_level + random.uniform(0.1, 0.3)))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        reasoning = f"{action} —Å–∏–≥–Ω–∞–ª: " + ", ".join(reasoning_parts)
        
        self.signal_count += 1
        
        signal = MockAISignal(
            action=action,
            confidence=confidence,
            reasoning=reasoning,
            model_name=self.name,
            timestamp=datetime.now()
        )
        
        logger.debug(f"ü§ñ {self.name} -> {symbol}: {action} (confidence: {confidence:.2f})")
        
        return signal

class MockAIOrchestrator:
    """
    üé≠ –û–†–ö–ï–°–¢–†–ê–¢–û–† MOCK AI –ú–û–î–ï–õ–ï–ô
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ mock AI –º–æ–¥–µ–ª—è–º–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å
    """
    
    def __init__(self):
        self.models = {}
        self._initialize_models()
        
        logger.info("üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä mock AI –º–æ–¥–µ–ª–µ–π")
    
    def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö mock –º–æ–¥–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏"""
        
        # trading_ai - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è
        self.models['trading_ai'] = MockAIModel(
            name='trading_ai',
            quality_level=0.75,
            bias='neutral'
        )
        
        # lava_ai - —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å–ª–µ–≥–∫–∞ –±—ã—á—å—è
        self.models['lava_ai'] = MockAIModel(
            name='lava_ai',
            quality_level=0.65,
            bias='bullish'
        )
        
        # gemini_ai - —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —Å–ª–µ–≥–∫–∞ –º–µ–¥–≤–µ–∂—å—è
        self.models['gemini_ai'] = MockAIModel(
            name='gemini_ai',
            quality_level=0.70,
            bias='bearish'
        )
        
        # claude_ai - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è
        self.models['claude_ai'] = MockAIModel(
            name='claude_ai',
            quality_level=0.80,
            bias='neutral'
        )
    
    async def get_all_signals(self, symbol: str, data: pd.DataFrame) -> Dict[str, MockAISignal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        signals = {}
        
        for model_name, model in self.models.items():
            try:
                signal = await model.generate_signal(symbol, data)
                signals[model_name] = signal
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç {model_name}: {e}")
                # –°–æ–∑–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª HOLD –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                signals[model_name] = MockAISignal(
                    action="HOLD",
                    confidence=0.1,
                    reasoning=f"–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏: {str(e)}",
                    model_name=model_name,
                    timestamp=datetime.now()
                )
        
        return signals
    
    def get_model_stats(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–æ–¥–µ–ª—è–º"""
        stats = {}
        for model_name, model in self.models.items():
            stats[model_name] = {
                'quality_level': model.quality_level,
                'bias': model.bias,
                'signal_count': model.signal_count
            }
        return stats

class MockTradingSystem:
    """
    üìà MOCK –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê
    
    –ü–æ–ª–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å mock AI –º–æ–¥–µ–ª—è–º–∏
    """
    
    def __init__(self, config: TestConfig):
        self.config = config
        self.ai_orchestrator = MockAIOrchestrator()
        self.trades = []
        self.balance = config.start_balance
        
        logger.info("üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ mock —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
    
    async def run_trading_test(self) -> WinrateTestResult:
        """
        üöÄ –ó–ê–ü–£–°–ö –¢–û–†–ì–û–í–û–ì–û –¢–ï–°–¢–ê
        
        –≠—Ç–∞–ø—ã:
        1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        2. –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∏–º–≤–æ–ª—É
        3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å mock AI –º–æ–¥–µ–ª—è–º–∏...")
        
        all_trades = []
        total_pnl = 0.0
        
        for symbol in self.config.symbols:
            logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è)
            data = await self._load_mock_historical_data(symbol)
            
            if data is None or len(data) < 50:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                continue
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            symbol_trades = await self._simulate_trading(symbol, data)
            all_trades.extend(symbol_trades)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
            symbol_pnl = sum(trade.get('pnl', 0) for trade in symbol_trades)
            total_pnl += symbol_pnl
            
            logger.info(f"üìä {symbol}: {len(symbol_trades)} —Å–¥–µ–ª–æ–∫, P&L: {symbol_pnl:.2f} USDT")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = self._create_test_result(all_trades, total_pnl)
        
        logger.info(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {len(all_trades)} —Å–¥–µ–ª–æ–∫, –æ–±—â–∏–π P&L: {total_pnl:.2f} USDT")
        
        return result
    
    async def _load_mock_historical_data(self, symbol: str) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ mock –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        periods = 100  # 100 —á–∞—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        start_time = datetime.now() - timedelta(hours=periods)
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞
        if symbol == 'BTCUSDT':
            base_price = 67000
        elif symbol == 'ETHUSDT':
            base_price = 2500
        else:
            base_price = 100
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã —Å —Å–ª—É—á–∞–π–Ω—ã–º –±–ª—É–∂–¥–∞–Ω–∏–µ–º
        prices = [base_price]
        volumes = []
        
        for i in range(periods):
            # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (-2% –¥–æ +2%)
            change = random.uniform(-0.02, 0.02)
            new_price = prices[-1] * (1 + change)
            prices.append(new_price)
            
            # –°–ª—É—á–∞–π–Ω—ã–π –æ–±—ä–µ–º
            volume = random.uniform(1000, 10000)
            volumes.append(volume)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        timestamps = [start_time + timedelta(hours=i) for i in range(periods)]
        
        data = pd.DataFrame({
            'timestamp': timestamps,
            'open': prices[:-1],
            'high': [p * random.uniform(1.0, 1.01) for p in prices[:-1]],
            'low': [p * random.uniform(0.99, 1.0) for p in prices[:-1]],
            'close': prices[1:],
            'volume': volumes
        })
        
        return data
    
    async def _simulate_trading(self, symbol: str, data: pd.DataFrame) -> List[Dict[str, Any]]:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        trades = []
        position = None
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º —Å –æ–∫–Ω–æ–º
        for i in range(20, len(data) - 1):  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            current_data = data.iloc[:i+1]
            current_price = current_data['close'].iloc[-1]
            current_time = current_data['timestamp'].iloc[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç AI –º–æ–¥–µ–ª–µ–π
            signals = await self.ai_orchestrator.get_all_signals(symbol, current_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            consensus = self._form_consensus(signals)
            
            if consensus is None:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
            if position is None and consensus['action'] in ['BUY', 'SELL']:
                if self._check_entry_conditions(consensus, current_data):
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    position = {
                        'symbol': symbol,
                        'action': consensus['action'],
                        'entry_price': current_price,
                        'entry_time': current_time,
                        'size': self.config.position_size_percent / 100 * self.balance / current_price,
                        'consensus': consensus
                    }
                    logger.debug(f"üìà –û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol} {consensus['action']} –ø–æ {current_price:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
            elif position is not None:
                exit_reason = self._check_exit_conditions(position, current_price, current_time)
                if exit_reason:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    trade = self._close_position(position, current_price, current_time, exit_reason)
                    trades.append(trade)
                    position = None
                    logger.debug(f"üìâ –ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è {symbol}: {trade['pnl']:.2f} USDT ({exit_reason})")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
        if position is not None:
            final_price = data['close'].iloc[-1]
            final_time = data['timestamp'].iloc[-1]
            trade = self._close_position(position, final_price, final_time, "–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞")
            trades.append(trade)
        
        return trades
    
    def _form_consensus(self, signals: Dict[str, MockAISignal]) -> Optional[Dict[str, Any]]:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π"""
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        valid_signals = {
            name: signal for name, signal in signals.items()
            if signal.confidence >= self.config.min_confidence
        }
        
        if len(valid_signals) < self.config.min_consensus_models:
            return None
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
        buy_votes = sum(1 for s in valid_signals.values() if s.action == 'BUY')
        sell_votes = sum(1 for s in valid_signals.values() if s.action == 'SELL')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if buy_votes >= self.config.min_consensus_models:
            action = 'BUY'
            vote_count = buy_votes
        elif sell_votes >= self.config.min_consensus_models:
            action = 'SELL'
            vote_count = sell_votes
        else:
            return None
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        relevant_signals = [s for s in valid_signals.values() if s.action == action]
        avg_confidence = np.mean([s.confidence for s in relevant_signals])
        
        return {
            'action': action,
            'confidence': avg_confidence,
            'vote_count': vote_count,
            'total_models': len(valid_signals),
            'signals': valid_signals
        }
    
    def _check_entry_conditions(self, consensus: Dict[str, Any], data: pd.DataFrame) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if consensus['confidence'] < self.config.min_confidence:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if self.config.min_volatility > 0:
            volatility = data['close'].pct_change().tail(10).std()
            if volatility < self.config.min_volatility:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.config.min_volume_ratio > 0 and 'volume' in data.columns:
            recent_volume = data['volume'].tail(5).mean()
            avg_volume = data['volume'].tail(20).mean()
            volume_ratio = recent_volume / avg_volume if avg_volume > 0 else 0
            if volume_ratio < self.config.min_volume_ratio:
                return False
        
        return True
    
    def _check_exit_conditions(self, position: Dict[str, Any], current_price: float, current_time: datetime) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏"""
        
        entry_price = position['entry_price']
        action = position['action']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        if action == 'BUY':
            price_change = (current_price - entry_price) / entry_price
        else:  # SELL
            price_change = (entry_price - current_price) / entry_price
        
        # Stop Loss
        if price_change <= -self.config.stop_loss_percent / 100:
            return "Stop Loss"
        
        # Take Profit
        if price_change >= self.config.take_profit_percent / 100:
            return "Take Profit"
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        holding_time = current_time - position['entry_time']
        if holding_time.total_seconds() / 3600 >= self.config.max_hold_hours:
            return "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"
        
        return None
    
    def _close_position(self, position: Dict[str, Any], exit_price: float, exit_time: datetime, exit_reason: str) -> Dict[str, Any]:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        
        entry_price = position['entry_price']
        action = position['action']
        size = position['size']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
        if action == 'BUY':
            pnl = (exit_price - entry_price) * size
        else:  # SELL
            pnl = (entry_price - exit_price) * size
        
        # –í—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
        commission = (entry_price + exit_price) * size * self.config.commission_rate
        pnl -= commission
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        self.balance += pnl
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        holding_time = exit_time - position['entry_time']
        price_change = abs(exit_price - entry_price) / entry_price * 100
        
        trade = {
            'symbol': position['symbol'],
            'action': action,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'entry_time': position['entry_time'],
            'exit_time': exit_time,
            'size': size,
            'pnl': pnl,
            'commission': commission,
            'holding_time_hours': holding_time.total_seconds() / 3600,
            'price_change_percent': price_change,
            'exit_reason': exit_reason,
            'consensus_confidence': position['consensus']['confidence'],
            'consensus_models': position['consensus']['total_models']
        }
        
        return trade
    
    def _create_test_result(self, trades: List[Dict[str, Any]], total_pnl: float) -> WinrateTestResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        
        if not trades:
            return WinrateTestResult(
                total_trades=0,
                winning_trades=0,
                losing_trades=0,
                win_rate=0.0,
                total_pnl=0.0,
                avg_win=0.0,
                avg_loss=0.0,
                max_drawdown=0.0,
                sharpe_ratio=0.0,
                trades=[]
            )
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        winning_trades = len([t for t in trades if t['pnl'] > 0])
        losing_trades = len([t for t in trades if t['pnl'] <= 0])
        win_rate = winning_trades / len(trades) * 100
        
        wins = [t['pnl'] for t in trades if t['pnl'] > 0]
        losses = [t['pnl'] for t in trades if t['pnl'] <= 0]
        
        avg_win = np.mean(wins) if wins else 0.0
        avg_loss = np.mean(losses) if losses else 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        cumulative_pnl = np.cumsum([t['pnl'] for t in trades])
        running_max = np.maximum.accumulate(cumulative_pnl)
        drawdowns = (running_max - cumulative_pnl) / self.config.start_balance * 100
        max_drawdown = np.max(drawdowns) if len(drawdowns) > 0 else 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Sharpe ratio (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        returns = [t['pnl'] / self.config.start_balance for t in trades]
        sharpe_ratio = np.mean(returns) / np.std(returns) if np.std(returns) > 0 else 0.0
        
        return WinrateTestResult(
            symbol="MOCK_TEST",
            total_trades=len(trades),
            winning_trades=winning_trades,
            losing_trades=losing_trades,
            win_rate=win_rate,
            total_pnl=total_pnl,
            total_pnl_percent=total_pnl / self.config.start_balance * 100,
            avg_trade_pnl=total_pnl / len(trades) if trades else 0.0,
            max_drawdown=max_drawdown,
            sharpe_ratio=sharpe_ratio,
            trades=[]  # –£–ø—Ä–æ—â–∞–µ–º –¥–ª—è mock —Ç–µ—Å—Ç–∞
        )

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è mock —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è mock —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
    config = TestConfig(
        symbols=['BTCUSDT', 'ETHUSDT'],
        test_period_days=1,
        start_balance=1000.0,
        position_size_percent=2.0,
        commission_rate=0.001,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: commission_rate –≤–º–µ—Å—Ç–æ commission_percent
        stop_loss_percent=2.0,
        take_profit_percent=3.0,
        max_hold_hours=24,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: max_hold_hours –≤–º–µ—Å—Ç–æ max_holding_hours
        min_confidence=0.25,
        min_consensus_models=2,
        enabled_ai_models=['trading_ai', 'lava_ai', 'gemini_ai', 'claude_ai'],
        min_volatility=0.0,
        min_volume_ratio=0.0,
        use_time_filter=False,
        use_strict_filters=False,
        require_volume_confirmation=False
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º mock —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    mock_system = MockTradingSystem(config)
    
    try:
        result = await mock_system.run_trading_test()
        
        print("\n" + "="*60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MOCK –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ó–ê–í–ï–†–®–ï–ù–û!")
        print("="*60)
        print(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {result.total_trades}")
        print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {result.winning_trades}")
        print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {result.losing_trades}")
        print(f"üìà Win Rate: {result.win_rate:.1f}%")
        print(f"üí∞ –û–±—â–∏–π P&L: {result.total_pnl:.2f} USDT")
        print(f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {result.max_drawdown:.2f}%")
        print(f"üìä Sharpe Ratio: {result.sharpe_ratio:.2f}")
        print("="*60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI –º–æ–¥–µ–ª–µ–π
        model_stats = mock_system.ai_orchestrator.get_model_stats()
        print("\nü§ñ –°–¢–ê–¢–ò–°–¢–ò–ö–ê AI –ú–û–î–ï–õ–ï–ô:")
        for model_name, stats in model_stats.items():
            print(f"   {model_name}: –∫–∞—á–µ—Å—Ç–≤–æ {stats['quality_level']:.2f}, "
                  f"—Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å {stats['bias']}, —Å–∏–≥–Ω–∞–ª–æ–≤ {stats['signal_count']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–¥–µ–ª–æ–∫
        if result.trades:
            print("\nüìã –ü–†–ò–ú–ï–†–´ –°–î–ï–õ–û–ö:")
            for i, trade in enumerate(result.trades[:3]):
                print(f"   {i+1}. {trade['symbol']} {trade['action']}: "
                      f"{trade['pnl']:.2f} USDT ({trade['exit_reason']})")
        
        print(f"\nüéØ Mock —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏!")
        print(f"   –≠—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ API –∫–ª—é—á–µ–π –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())