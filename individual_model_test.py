#!/usr/bin/env python3
"""
ü§ñ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –¢–ï–°–¢ AI –ú–û–î–ï–õ–ï–ô
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é AI –º–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import os
import sys
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_modules.ai_manager import AIManager
from ai_modules.trading_ai import TradingAI
from ai_modules.lava_ai import LavaAI
from ai_modules.lgbm_ai import LGBMAI
from ai_modules.mistral_ai import MistralAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine
from data_collector import BinanceDataCollector, DataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class ModelTestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model_name: str
    min_confidence: float = 0.25
    test_symbols: List[str] = None
    test_days: int = 7
    
    def __post_init__(self):
        if self.test_symbols is None:
            self.test_symbols = ['TAOUSDT', 'CRVUSDT', 'ZRXUSDT', 'APTUSDT', 'SANDUSDT']

@dataclass
class ModelTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    model_name: str
    total_signals: int
    valid_signals: int
    avg_confidence: float
    confidence_distribution: Dict[str, int]
    signal_distribution: Dict[str, int]
    performance_score: float

class IndividualModelTester:
    """–¢–µ—Å—Ç–µ—Ä –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.data_manager = DataManager()
        self.models = {}
        self.results = {}
        
    def initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            # Trading AI
            self.models['trading_ai'] = TradingAI()
            logger.info("‚úÖ trading_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # Lava AI
            self.models['lava_ai'] = LavaAI()
            logger.info("‚úÖ lava_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # LGBM AI
            self.models['lgbm_ai'] = LGBMAI()
            logger.info("‚úÖ lgbm_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # Mistral AI
            self.models['mistral_ai'] = MistralAI()
            logger.info("‚úÖ mistral_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # Reinforcement Learning Engine
            self.models['reinforcement_learning_engine'] = ReinforcementLearningEngine()
            logger.info("‚úÖ reinforcement_learning_engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            raise
    
    async def test_model(self, model_name: str, config: ModelTestConfig) -> ModelTestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}")
        
        if model_name not in self.models:
            raise ValueError(f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        model = self.models[model_name]
        total_signals = 0
        valid_signals = 0
        confidences = []
        signal_types = {'BUY': 0, 'SELL': 0, 'HOLD': 0}
        confidence_ranges = {'0-25%': 0, '25-50%': 0, '50-75%': 0, '75-100%': 0}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–∞–∂–¥–æ–º —Å–∏–º–≤–æ–ª–µ
        for symbol in config.test_symbols:
            logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {model_name} –Ω–∞ {symbol}...")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                end_time = datetime.now()
                start_time = end_time - timedelta(days=config.test_days)
                
                df = await self.data_manager.ensure_data_available(
                    symbol=symbol,
                    interval='1h',
                    days=config.test_days
                )
                
                if df is None or len(df) < 50:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
                for i in range(50, len(df), 6):  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                    try:
                        current_data = df.iloc[:i+1].copy()
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –º–æ–¥–µ–ª–∏
                        if model_name == 'trading_ai':
                            signal = model.get_signal(current_data, symbol)
                        elif model_name == 'lava_ai':
                            signal = model.get_signal(current_data, symbol)
                        elif model_name == 'lgbm_ai':
                            signal = model.get_signal(current_data, symbol)
                        elif model_name == 'mistral_ai':
                            signal = model.get_signal(current_data, symbol)
                        elif model_name == 'reinforcement_learning_engine':
                            # –î–ª—è RL –Ω—É–∂–Ω—ã —Å–∏–≥–Ω–∞–ª—ã –¥—Ä—É–≥–∏—Ö –º–æ–¥–µ–ª–µ–π
                            other_signals = {}
                            for other_model_name, other_model in self.models.items():
                                if other_model_name != 'reinforcement_learning_engine':
                                    try:
                                        other_signal = other_model.get_signal(current_data, symbol)
                                        if other_signal and 'confidence' in other_signal:
                                            other_signals[other_model_name] = other_signal
                                    except:
                                        pass
                            
                            if len(other_signals) >= 2:
                                signal = model.get_consensus_signal(other_signals, symbol)
                            else:
                                continue
                        else:
                            continue
                        
                        total_signals += 1
                        
                        if signal and 'confidence' in signal:
                            confidence = signal['confidence']
                            direction = signal.get('direction', 'HOLD')
                            
                            confidences.append(confidence)
                            
                            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
                            if direction == 1 or direction == 'BUY':
                                signal_types['BUY'] += 1
                            elif direction == -1 or direction == 'SELL':
                                signal_types['SELL'] += 1
                            else:
                                signal_types['HOLD'] += 1
                            
                            # –ü–æ–¥—Å—á–µ—Ç –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            if confidence < 0.25:
                                confidence_ranges['0-25%'] += 1
                            elif confidence < 0.50:
                                confidence_ranges['25-50%'] += 1
                            elif confidence < 0.75:
                                confidence_ranges['50-75%'] += 1
                            else:
                                confidence_ranges['75-100%'] += 1
                            
                            # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª—ã –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            if confidence >= config.min_confidence:
                                valid_signals += 1
                        
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
                        continue
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
                continue
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        avg_confidence = np.mean(confidences) if confidences else 0.0
        performance_score = (valid_signals / total_signals * 100) if total_signals > 0 else 0.0
        
        result = ModelTestResult(
            model_name=model_name,
            total_signals=total_signals,
            valid_signals=valid_signals,
            avg_confidence=avg_confidence,
            confidence_distribution=confidence_ranges,
            signal_distribution=signal_types,
            performance_score=performance_score
        )
        
        logger.info(f"‚úÖ {model_name}: {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤, {valid_signals} –≤–∞–ª–∏–¥–Ω—ã—Ö ({performance_score:.1f}%)")
        return result
    
    async def run_all_tests(self) -> Dict[str, ModelTestResult]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π...")
        
        self.initialize_models()
        
        config = ModelTestConfig(model_name="", min_confidence=0.25)
        results = {}
        
        for model_name in self.models.keys():
            try:
                config.model_name = model_name
                result = await self.test_model(model_name, config)
                results[model_name] = result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {model_name}: {e}")
                continue
        
        return results
    
    def generate_report(self, results: Dict[str, ModelTestResult]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        print("\n" + "="*80)
        print("ü§ñ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ú–û–î–ï–õ–ï–ô - –û–¢–ß–ï–¢")
        print("="*80)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        sorted_models = sorted(results.items(), key=lambda x: x[1].performance_score, reverse=True)
        
        print(f"\nüìä –†–ï–ô–¢–ò–ù–ì –ú–û–î–ï–õ–ï–ô –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ           –ú–û–î–ï–õ–¨            ‚îÇ –°–ò–ì–ù–ê–õ–´ ‚îÇ –í–ê–õ–ò–î–ù–´–ï‚îÇ –£–°–ü–ï–• % ‚îÇ –£–í–ï–†–ï–ù–ù–û–°–¢–¨ ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        for model_name, result in sorted_models:
            print(f"‚îÇ {model_name:27} ‚îÇ {result.total_signals:7} ‚îÇ {result.valid_signals:7} ‚îÇ {result.performance_score:6.1f}% ‚îÇ {result.avg_confidence:10.1%} ‚îÇ")
        
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        for model_name, result in results.items():
            print(f"\nü§ñ {model_name.upper()}:")
            print(f"   üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {result.total_signals}")
            print(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {result.valid_signals}")
            print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.avg_confidence:.1%}")
            print(f"   üìà –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {result.performance_score:.1f}%")
            
            print(f"   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
            for range_name, count in result.confidence_distribution.items():
                percentage = (count / result.total_signals * 100) if result.total_signals > 0 else 0
                print(f"      {range_name}: {count} ({percentage:.1f}%)")
            
            print(f"   üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for signal_type, count in result.signal_distribution.items():
                percentage = (count / result.total_signals * 100) if result.total_signals > 0 else 0
                print(f"      {signal_type}: {count} ({percentage:.1f}%)")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–ê–õ–ò–ë–†–û–í–ö–ï:")
        
        best_model = sorted_models[0][1] if sorted_models else None
        worst_model = sorted_models[-1][1] if sorted_models else None
        
        if best_model:
            print(f"   ü•á –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model.model_name} ({best_model.performance_score:.1f}% —É—Å–ø–µ—Ö–∞)")
        
        if worst_model and worst_model.performance_score < 50:
            print(f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {worst_model.model_name} ({worst_model.performance_score:.1f}% —É—Å–ø–µ—Ö–∞)")
            
            if worst_model.avg_confidence < 0.3:
                print(f"      - –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({worst_model.avg_confidence:.1%}) - –Ω—É–∂–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
            low_confidence_signals = worst_model.confidence_distribution.get('0-25%', 0)
            if low_confidence_signals > worst_model.total_signals * 0.5:
                print(f"      - –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ ({low_confidence_signals}) - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        report_data = {
            'timestamp': timestamp,
            'results': {name: asdict(result) for name, result in results.items()},
            'summary': {
                'best_model': best_model.model_name if best_model else None,
                'worst_model': worst_model.model_name if worst_model else None,
                'total_models_tested': len(results)
            }
        }
        
        os.makedirs('reports/individual_tests', exist_ok=True)
        report_file = f'reports/individual_tests/individual_model_test_{timestamp}.json'
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = IndividualModelTester()
        results = await tester.run_all_tests()
        tester.generate_report(results)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())