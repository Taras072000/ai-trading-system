#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è AI –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any, Optional
import itertools
import json
from dataclasses import dataclass, asdict

# –ò–º–ø–æ—Ä—Ç—ã AI –º–æ–¥—É–ª–µ–π
from ai_modules.lava_ai import LavaAI
from ai_modules.lgbm_ai import LGBMAI
from ai_modules.mistral_ai import MistralAI

# –ò–º–ø–æ—Ä—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from data_collector import DataManager
from utils.timezone_utils import get_utc_now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class OptimizationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    model_name: str
    symbol: str = "BTCUSDT"
    test_days: int = 7
    confidence_range: List[float] = None
    tp_range: List[float] = None
    sl_range: List[float] = None
    max_combinations: int = 50
    
    def __post_init__(self):
        if self.confidence_range is None:
            self.confidence_range = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]
        if self.tp_range is None:
            self.tp_range = [1.5, 2.0, 2.5, 3.0, 4.0, 5.0]
        if self.sl_range is None:
            self.sl_range = [0.8, 1.0, 1.2, 1.5, 2.0]

@dataclass
class OptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    model_name: str
    best_params: Dict[str, float]
    best_score: float
    win_rate: float
    total_trades: int
    profit_factor: float
    max_drawdown: float
    sharpe_ratio: float
    all_results: List[Dict]

class ParameterOptimizer:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.data_manager = DataManager()
        self.models = {}
        self.optimization_results = {}
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Parameter Optimizer...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
            await self._initialize_models()
            
            logger.info("‚úÖ Parameter Optimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LavaAI
            self.models['lava_ai'] = LavaAI()
            await self.models['lava_ai'].initialize()
            logger.info("‚úÖ lava_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LGBMAI
            self.models['lgbm_ai'] = LGBMAI()
            await self.models['lgbm_ai'].initialize()
            logger.info("‚úÖ lgbm_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MistralAI
            self.models['mistral_ai'] = MistralAI()
            await self.models['mistral_ai'].initialize()
            logger.info("‚úÖ mistral_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            raise
    
    async def optimize_model(self, config: OptimizationConfig) -> OptimizationResult:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é {config.model_name}...")
        
        if config.model_name not in self.models:
            raise ValueError(f"–ú–æ–¥–µ–ª—å {config.model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        data = await self._get_historical_data(config.symbol, config.test_days)
        if data is None or len(data) < 100:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {config.symbol}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        param_combinations = self._generate_param_combinations(config)
        logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(param_combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        results = []
        for i, params in enumerate(param_combinations):
            if i % 10 == 0:
                logger.info(f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(param_combinations)} ({i/len(param_combinations)*100:.1f}%)")
            
            result = await self._test_parameter_combination(
                config.model_name, data, params
            )
            results.append(result)
        
        # –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        best_result = self._find_best_parameters(results)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_result = OptimizationResult(
            model_name=config.model_name,
            best_params=best_result['params'],
            best_score=best_result['score'],
            win_rate=best_result['win_rate'],
            total_trades=best_result['total_trades'],
            profit_factor=best_result['profit_factor'],
            max_drawdown=best_result['max_drawdown'],
            sharpe_ratio=best_result['sharpe_ratio'],
            all_results=results
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.optimization_results[config.model_name] = optimization_result
        await self._save_optimization_results(optimization_result)
        
        logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {config.model_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"üèÜ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_result['params']}")
        logger.info(f"üìà –í–∏–Ω—Ä–µ–π—Ç: {best_result['win_rate']:.2%}")
        logger.info(f"üí∞ Profit Factor: {best_result['profit_factor']:.2f}")
        
        return optimization_result
    
    async def _get_historical_data(self, symbol: str, days: int) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} –∑–∞ {days} –¥–Ω–µ–π...")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataManager
            data = await self.data_manager.ensure_data_available(
                symbol=symbol,
                interval='1h',
                days=days
            )
            
            if data is not None and len(data) > 0:
                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–Ω–¥–µ–∫—Å - datetime
                if 'timestamp' in data.columns:
                    data['timestamp'] = pd.to_datetime(data['timestamp'])
                    data.set_index('timestamp', inplace=True)
                elif not isinstance(data.index, pd.DatetimeIndex):
                    logger.warning("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å –¥–∞–Ω–Ω—ã—Ö –Ω–µ —è–≤–ª—è–µ—Ç—Å—è datetime")
                
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                return data
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def _generate_param_combinations(self, config: OptimizationConfig) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        combinations = []
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for confidence in config.confidence_range:
            for tp in config.tp_range:
                for sl in config.sl_range:
                    combinations.append({
                        'confidence_threshold': confidence,
                        'take_profit': tp,
                        'stop_loss': sl
                    })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
        if len(combinations) > config.max_combinations:
            # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            step = len(combinations) // config.max_combinations
            combinations = combinations[::step][:config.max_combinations]
        
        return combinations
    
    async def _test_parameter_combination(self, model_name: str, data: pd.DataFrame, params: Dict) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            model = self.models[model_name]
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            trades = []
            balance = 1000.0  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            position = None
            
            for i in range(100, len(data)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 100 —Å–≤–µ—á–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                current_data = data.iloc[:i+1]
                current_price = data.iloc[i]['close']
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –º–æ–¥–µ–ª–∏
                signal = await self._get_model_signal(model_name, model, current_data)
                
                if signal is None:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                confidence = self._extract_confidence(signal)
                if confidence < params['confidence_threshold']:
                    continue
                
                # –õ–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
                action = self._extract_action(signal)
                
                if position is None and action in ['BUY', 'SELL']:
                    # –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    position = {
                        'action': action,
                        'entry_price': current_price,
                        'entry_time': data.index[i],
                        'tp_price': current_price * (1 + params['take_profit']/100) if action == 'BUY' 
                                   else current_price * (1 - params['take_profit']/100),
                        'sl_price': current_price * (1 - params['stop_loss']/100) if action == 'BUY' 
                                   else current_price * (1 + params['stop_loss']/100)
                    }
                
                elif position is not None:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    should_close = False
                    exit_reason = ""
                    
                    if position['action'] == 'BUY':
                        if current_price >= position['tp_price']:
                            should_close = True
                            exit_reason = "TP"
                        elif current_price <= position['sl_price']:
                            should_close = True
                            exit_reason = "SL"
                    else:  # SELL
                        if current_price <= position['tp_price']:
                            should_close = True
                            exit_reason = "TP"
                        elif current_price >= position['sl_price']:
                            should_close = True
                            exit_reason = "SL"
                    
                    if should_close:
                        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                        if position['action'] == 'BUY':
                            pnl = (current_price - position['entry_price']) / position['entry_price'] * 100
                        else:
                            pnl = (position['entry_price'] - current_price) / position['entry_price'] * 100
                        
                        trades.append({
                            'entry_time': position['entry_time'],
                            'exit_time': data.index[i],
                            'action': position['action'],
                            'entry_price': position['entry_price'],
                            'exit_price': current_price,
                            'pnl': pnl,
                            'exit_reason': exit_reason
                        })
                        
                        balance *= (1 + pnl/100)
                        position = None
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = self._calculate_metrics(trades, balance)
            metrics['params'] = params
            
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return {
                'params': params,
                'score': 0,
                'win_rate': 0,
                'total_trades': 0,
                'profit_factor': 0,
                'max_drawdown': 100,
                'sharpe_ratio': 0
            }
    
    async def _get_model_signal(self, model_name: str, model: Any, data: pd.DataFrame) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –º–æ–¥–µ–ª–∏"""
        try:
            if model_name == 'lava_ai':
                if hasattr(model, 'generate_trading_signals'):
                    return await model.generate_trading_signals(data)
                elif hasattr(model, 'analyze_market_data'):
                    return await model.analyze_market_data(data)
            
            elif model_name == 'lgbm_ai':
                if hasattr(model, 'get_signal'):
                    return await model.get_signal(data)
                elif hasattr(model, 'predict'):
                    return await model.predict(data)
            
            elif model_name == 'mistral_ai':
                if hasattr(model, 'get_signal'):
                    return await model.get_signal(data)
                elif hasattr(model, 'analyze'):
                    return await model.analyze(data)
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç {model_name}: {e}")
            return None
    
    def _extract_confidence(self, signal: Any) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
        if isinstance(signal, dict):
            return signal.get('confidence', 0.0)
        return 0.0
    
    def _extract_action(self, signal: Any) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Å–∏–≥–Ω–∞–ª–∞"""
        if isinstance(signal, dict):
            if 'signal' in signal:
                return signal['signal']
            elif 'action' in signal:
                return signal['action']
            elif 'direction' in signal:
                direction = signal['direction']
                if direction > 0.5:
                    return 'BUY'
                elif direction < -0.5:
                    return 'SELL'
        return 'HOLD'
    
    def _calculate_metrics(self, trades: List[Dict], final_balance: float) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        if not trades:
            return {
                'score': 0,
                'win_rate': 0,
                'total_trades': 0,
                'profit_factor': 0,
                'max_drawdown': 0,
                'sharpe_ratio': 0
            }
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(trades)
        winning_trades = [t for t in trades if t['pnl'] > 0]
        losing_trades = [t for t in trades if t['pnl'] < 0]
        
        win_rate = len(winning_trades) / total_trades if total_trades > 0 else 0
        
        # Profit Factor
        gross_profit = sum(t['pnl'] for t in winning_trades)
        gross_loss = abs(sum(t['pnl'] for t in losing_trades))
        profit_factor = gross_profit / gross_loss if gross_loss > 0 else float('inf')
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        balance_curve = [1000.0]
        for trade in trades:
            balance_curve.append(balance_curve[-1] * (1 + trade['pnl']/100))
        
        peak = balance_curve[0]
        max_drawdown = 0
        for balance in balance_curve:
            if balance > peak:
                peak = balance
            drawdown = (peak - balance) / peak * 100
            max_drawdown = max(max_drawdown, drawdown)
        
        # Sharpe Ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        returns = [t['pnl'] for t in trades]
        if len(returns) > 1:
            sharpe_ratio = np.mean(returns) / np.std(returns) if np.std(returns) > 0 else 0
        else:
            sharpe_ratio = 0
        
        # –û–±—â–∏–π —Å–∫–æ—Ä (–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞)
        score = (win_rate * 0.3 + 
                min(profit_factor/2, 1) * 0.3 + 
                max(0, (100-max_drawdown)/100) * 0.2 + 
                max(0, sharpe_ratio/10) * 0.2)
        
        return {
            'score': score,
            'win_rate': win_rate,
            'total_trades': total_trades,
            'profit_factor': profit_factor,
            'max_drawdown': max_drawdown,
            'sharpe_ratio': sharpe_ratio
        }
    
    def _find_best_parameters(self, results: List[Dict]) -> Dict:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Å–∫–æ—Ä—É"""
        if not results:
            raise ValueError("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫–æ—Ä—É
        sorted_results = sorted(results, key=lambda x: x['score'], reverse=True)
        return sorted_results[0]
    
    async def _save_optimization_results(self, result: OptimizationResult):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"optimization_{result.model_name}_{timestamp}.json"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            result_dict = asdict(result)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result_dict, f, ensure_ascii=False, indent=2, default=str)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    async def optimize_all_models(self) -> Dict[str, OptimizationResult]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π...")
        
        results = {}
        
        for model_name in self.models.keys():
            try:
                logger.info(f"\n{'='*50}")
                logger.info(f"üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {model_name}")
                logger.info(f"{'='*50}")
                
                config = OptimizationConfig(model_name=model_name)
                result = await self.optimize_model(config)
                results[model_name] = result
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {model_name}: {e}")
        
        logger.info("\nüèÅ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return results
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ø–æ –≤—Å–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–æ–¥–µ–ª—è–º"""
        if not self.optimization_results:
            logger.info("üìä –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            return
        
        logger.info("\n" + "="*80)
        logger.info("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò")
        logger.info("="*80)
        
        for model_name, result in self.optimization_results.items():
            logger.info(f"\nü§ñ {model_name.upper()}:")
            logger.info(f"   üìà –í–∏–Ω—Ä–µ–π—Ç: {result.win_rate:.2%}")
            logger.info(f"   üí∞ Profit Factor: {result.profit_factor:.2f}")
            logger.info(f"   üìâ Max Drawdown: {result.max_drawdown:.2f}%")
            logger.info(f"   üìä Sharpe Ratio: {result.sharpe_ratio:.2f}")
            logger.info(f"   üéØ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {result.best_params}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    optimizer = ParameterOptimizer()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if not await optimizer.initialize():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä")
        return
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    results = await optimizer.optimize_all_models()
    
    # –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏
    optimizer.print_summary()

if __name__ == "__main__":
    asyncio.run(main())