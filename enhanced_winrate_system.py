#!/usr/bin/env python3
"""
üöÄ –£–õ–£–ß–®–ï–ù–ù–ê–Ø AI –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø 60%+ –í–ò–ù–†–ï–ô–¢–ê
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import logging
from dataclasses import dataclass, field
import json
import os
from pathlib import Path
from utils.timezone_utils import get_utc_now

# –ò–º–ø–æ—Ä—Ç—ã AI –º–æ–¥—É–ª–µ–π
from ai_modules.multi_ai_orchestrator import MultiAIOrchestrator
from ai_modules.ai_manager import ai_manager, AIModuleType
from ai_modules.trading_ai import TradingAI
from ai_modules.lava_ai import LavaAI
from ai_modules.lgbm_ai import LGBMAI
from ai_modules.mistral_ai import MistralAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine
from historical_data_manager import HistoricalDataManager
from data_collector import BinanceDataCollector

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class EnhancedAIDecision:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    model_name: str
    action: str  # 'BUY', 'SELL', 'HOLD'
    confidence: float
    reasoning: str
    timestamp: datetime
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    signal_strength: float = 0.0  # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (0-1)
    market_regime: str = "UNKNOWN"  # BULL, BEAR, SIDEWAYS
    risk_score: float = 0.5  # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ (0-1)
    feature_importance: Dict[str, float] = field(default_factory=dict)
    model_performance_score: float = 0.5  # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏

@dataclass
class EnhancedConsensusSignal:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å —Å–∏–≥–Ω–∞–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    symbol: str
    timestamp: datetime
    price: float
    final_action: str
    consensus_strength: int
    participating_models: List[EnhancedAIDecision]
    confidence_avg: float
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    weighted_confidence: float = 0.0  # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    signal_quality_score: float = 0.0  # –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞ (0-1)
    market_conditions_score: float = 0.0  # –û—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    risk_reward_ratio: float = 0.0  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
    expected_profit_probability: float = 0.0  # –û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏

@dataclass
class EnhancedTestConfig:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    test_period_days: int = 7
    start_balance: float = 100.0
    symbols: List[str] = None
    commission_rate: float = 0.001
    
    # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
    base_position_size_percent: float = 0.02  # –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 2%
    max_position_size_percent: float = 0.05   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 5%
    confidence_multiplier: float = 2.0        # –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã
    base_stop_loss_percent: float = 0.015     # –ë–∞–∑–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å 1.5%
    base_take_profit_percent: float = 0.045   # –ë–∞–∑–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 4.5% (1:3)
    volatility_multiplier: float = 1.5        # –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
    min_signal_quality_score: float = 0.6     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞
    min_weighted_confidence: float = 0.3      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    min_consensus_models: int = 2             # –ú–∏–Ω–∏–º—É–º –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    min_model_performance_score: float = 0.4  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    
    # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    min_market_conditions_score: float = 0.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–∫–∞
    max_daily_trades: int = 3                 # –ú–∞–∫—Å–∏–º—É–º —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
    max_symbol_exposure: float = 0.1          # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è –Ω–∞ —Å–∏–º–≤–æ–ª
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    max_daily_loss_percent: float = 0.05      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –ø–æ—Ç–µ—Ä—è 5%
    max_drawdown_percent: float = 0.15        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ 15%
    correlation_threshold: float = 0.7        # –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ—ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
    
    # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
    adaptive_parameters: bool = True          # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    market_regime_detection: bool = True      # –î–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
    performance_tracking: bool = True         # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    debug_mode: bool = True

    def __post_init__(self):
        if self.symbols is None:
            self.symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']

class ModelPerformanceTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.model_stats = {}
        self.performance_history = {}
        
    def update_model_performance(self, model_name: str, prediction_correct: bool, 
                               confidence: float, actual_return: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        if model_name not in self.model_stats:
            self.model_stats[model_name] = {
                'total_predictions': 0,
                'correct_predictions': 0,
                'total_confidence': 0.0,
                'total_return': 0.0,
                'accuracy': 0.0,
                'avg_confidence': 0.0,
                'avg_return': 0.0,
                'performance_score': 0.5
            }
        
        stats = self.model_stats[model_name]
        stats['total_predictions'] += 1
        if prediction_correct:
            stats['correct_predictions'] += 1
        stats['total_confidence'] += confidence
        stats['total_return'] += actual_return
        
        # –ü–µ—Ä–µ—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        stats['accuracy'] = stats['correct_predictions'] / stats['total_predictions']
        stats['avg_confidence'] = stats['total_confidence'] / stats['total_predictions']
        stats['avg_return'] = stats['total_return'] / stats['total_predictions']
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        stats['performance_score'] = (
            stats['accuracy'] * 0.4 +
            min(stats['avg_confidence'], 1.0) * 0.2 +
            max(0, min(stats['avg_return'] * 10, 1.0)) * 0.4
        )
        
    def get_model_performance_score(self, model_name: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        if model_name not in self.model_stats:
            return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
        return self.model_stats[model_name]['performance_score']
    
    def get_top_performing_models(self, min_predictions: int = 5) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π"""
        qualified_models = [
            (name, stats['performance_score']) 
            for name, stats in self.model_stats.items()
            if stats['total_predictions'] >= min_predictions
        ]
        qualified_models.sort(key=lambda x: x[1], reverse=True)
        return [name for name, _ in qualified_models]

class MarketRegimeDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
    
    def detect_market_regime(self, data: pd.DataFrame) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        if len(data) < 50:
            return "UNKNOWN"
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        short_ma = data['close'].rolling(10).mean().iloc[-1]
        long_ma = data['close'].rolling(50).mean().iloc[-1]
        current_price = data['close'].iloc[-1]
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility = data['close'].pct_change().rolling(20).std().iloc[-1]
        avg_volatility = data['close'].pct_change().rolling(50).std().mean()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
        if current_price > short_ma > long_ma and volatility < avg_volatility * 1.2:
            return "BULL"
        elif current_price < short_ma < long_ma and volatility < avg_volatility * 1.2:
            return "BEAR"
        else:
            return "SIDEWAYS"
    
    def calculate_market_conditions_score(self, data: pd.DataFrame) -> float:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if len(data) < 20:
            return 0.5
        
        # –§–∞–∫—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Ä—ã–Ω–∫–∞
        volatility = data['close'].pct_change().rolling(20).std().iloc[-1]
        volume_trend = data['volume'].rolling(10).mean().iloc[-1] / data['volume'].rolling(30).mean().iloc[-1]
        price_momentum = (data['close'].iloc[-1] / data['close'].iloc[-10] - 1)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        vol_score = min(volatility * 100, 1.0)  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å
        volume_score = min(volume_trend, 2.0) / 2.0  # –û–±—ä–µ–º –∫–∞–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        momentum_score = min(abs(price_momentum) * 10, 1.0)  # –ú–æ–º–µ–Ω—Ç—É–º –∫–∞–∫ —Å–∏–ª–∞
        
        return (vol_score * 0.3 + volume_score * 0.4 + momentum_score * 0.3)

class EnhancedSignalProcessor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, config: EnhancedTestConfig):
        self.config = config
        self.performance_tracker = ModelPerformanceTracker()
        self.market_detector = MarketRegimeDetector()
    
    def calculate_signal_quality_score(self, decisions: List[EnhancedAIDecision], 
                                     market_data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        if not decisions:
            return 0.0
        
        # –§–∞–∫—Ç–æ—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
        confidence_factor = np.mean([d.confidence for d in decisions])
        consensus_factor = len([d for d in decisions if d.action != 'HOLD']) / len(decisions)
        performance_factor = np.mean([d.model_performance_score for d in decisions])
        
        # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        market_score = self.market_detector.calculate_market_conditions_score(market_data)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        quality_score = (
            confidence_factor * 0.25 +
            consensus_factor * 0.25 +
            performance_factor * 0.25 +
            market_score * 0.25
        )
        
        return min(quality_score, 1.0)
    
    def calculate_weighted_confidence(self, decisions: List[EnhancedAIDecision]) -> float:
        """–†–∞—Å—á–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        if not decisions:
            return 0.0
        
        total_weight = 0.0
        weighted_confidence = 0.0
        
        for decision in decisions:
            weight = decision.model_performance_score
            weighted_confidence += decision.confidence * weight
            total_weight += weight
        
        return weighted_confidence / total_weight if total_weight > 0 else 0.0
    
    def calculate_risk_reward_ratio(self, signal: EnhancedConsensusSignal, 
                                  market_data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å"""
        volatility = market_data['close'].pct_change().rolling(20).std().iloc[-1]
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        stop_loss = self.config.base_stop_loss_percent * (1 + volatility * self.config.volatility_multiplier)
        take_profit = self.config.base_take_profit_percent * (1 + volatility * self.config.volatility_multiplier)
        
        return take_profit / stop_loss if stop_loss > 0 else 0.0

class EnhancedWinrateTester:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤–∏–Ω—Ä–µ–π—Ç–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, config: EnhancedTestConfig):
        self.config = config
        self.signal_processor = EnhancedSignalProcessor(config)
        self.ai_orchestrator = None
        self.data_manager = HistoricalDataManager()
        self.data_collector = BinanceDataCollector()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.daily_trades = {}
        self.daily_pnl = {}
        self.symbol_exposure = {}
        self.total_drawdown = 0.0
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π AI —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        self.ai_orchestrator = MultiAIOrchestrator()
        await self.ai_orchestrator.initialize()
        
        logger.info("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    
    async def get_enhanced_ai_signals(self, symbol: str, data: pd.DataFrame) -> List[EnhancedConsensusSignal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö AI —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals = []
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –æ—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        model_decisions = []
        for model_name in ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai']:
            try:
                decision = await self.get_enhanced_individual_signal(model_name, symbol, data)
                if decision:
                    model_decisions.append(decision)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç {model_name}: {e}")
        
        if len(model_decisions) >= self.config.min_consensus_models:
            consensus_signal = await self.create_enhanced_consensus(symbol, data, model_decisions)
            if consensus_signal:
                signals.append(consensus_signal)
        
        return signals
    
    async def get_enhanced_individual_signal(self, model_name: str, symbol: str, 
                                           data: pd.DataFrame) -> Optional[EnhancedAIDecision]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            if model_name == 'lgbm_ai':
                ai_module = LGBMAI()
                result = await ai_module.analyze_trading_opportunity(symbol, data)
            elif model_name == 'mistral_ai':
                ai_module = MistralAI()
                result = await ai_module.analyze_trading_opportunity(symbol, data)
            elif model_name == 'lava_ai':
                ai_module = LavaAI()
                result = await ai_module.analyze_trading_opportunity(symbol, data)
            elif model_name == 'trading_ai':
                ai_module = TradingAI()
                result = await ai_module.analyze_trading_opportunity(symbol, data)
            else:
                return None
            
            if not result:
                return None
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
            decision = EnhancedAIDecision(
                model_name=model_name,
                action=self._convert_to_action(result.get('direction', 0)),
                confidence=result.get('confidence', 0.0),
                reasoning=result.get('reasoning', ''),
                timestamp=get_utc_now()
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            decision.signal_strength = self._calculate_signal_strength(result, data)
            decision.market_regime = self.signal_processor.market_detector.detect_market_regime(data)
            decision.risk_score = self._calculate_risk_score(result, data)
            decision.model_performance_score = self.signal_processor.performance_tracker.get_model_performance_score(model_name)
            
            return decision
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç {model_name}: {e}")
            return None
    
    async def create_enhanced_consensus(self, symbol: str, data: pd.DataFrame, 
                                      decisions: List[EnhancedAIDecision]) -> Optional[EnhancedConsensusSignal]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å —Å–∏–≥–Ω–∞–ª–∞"""
        if not decisions:
            return None
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
        qualified_decisions = [
            d for d in decisions 
            if d.model_performance_score >= self.config.min_model_performance_score
        ]
        
        if len(qualified_decisions) < self.config.min_consensus_models:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        buy_votes = len([d for d in qualified_decisions if d.action == 'BUY'])
        sell_votes = len([d for d in qualified_decisions if d.action == 'SELL'])
        
        if buy_votes > sell_votes:
            final_action = 'BUY'
            consensus_strength = buy_votes
        elif sell_votes > buy_votes:
            final_action = 'SELL'
            consensus_strength = sell_votes
        else:
            return None  # –ù–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å —Å–∏–≥–Ω–∞–ª–∞
        consensus_signal = EnhancedConsensusSignal(
            symbol=symbol,
            timestamp=get_utc_now(),
            price=data['close'].iloc[-1],
            final_action=final_action,
            consensus_strength=consensus_strength,
            participating_models=qualified_decisions,
            confidence_avg=np.mean([d.confidence for d in qualified_decisions])
        )
        
        # –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        consensus_signal.weighted_confidence = self.signal_processor.calculate_weighted_confidence(qualified_decisions)
        consensus_signal.signal_quality_score = self.signal_processor.calculate_signal_quality_score(qualified_decisions, data)
        consensus_signal.market_conditions_score = self.signal_processor.market_detector.calculate_market_conditions_score(data)
        consensus_signal.risk_reward_ratio = self.signal_processor.calculate_risk_reward_ratio(consensus_signal, data)
        
        # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏
        consensus_signal.expected_profit_probability = self._calculate_profit_probability(consensus_signal, data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if (consensus_signal.signal_quality_score >= self.config.min_signal_quality_score and
            consensus_signal.weighted_confidence >= self.config.min_weighted_confidence and
            consensus_signal.market_conditions_score >= self.config.min_market_conditions_score):
            return consensus_signal
        
        return None
    
    def _convert_to_action(self, direction: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–µ"""
        if direction > 0.5:
            return 'BUY'
        elif direction < -0.5:
            return 'SELL'
        else:
            return 'HOLD'
    
    def _calculate_signal_strength(self, result: dict, data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        confidence = result.get('confidence', 0.0)
        direction = abs(result.get('direction', 0.0))
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        rsi = self._calculate_rsi(data)
        volume_ratio = data['volume'].iloc[-1] / data['volume'].rolling(20).mean().iloc[-1]
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞
        signal_strength = (
            confidence * 0.4 +
            direction * 0.3 +
            min(volume_ratio / 2.0, 1.0) * 0.3
        )
        
        return min(signal_strength, 1.0)
    
    def _calculate_risk_score(self, result: dict, data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"""
        volatility = data['close'].pct_change().rolling(20).std().iloc[-1]
        volume_volatility = data['volume'].pct_change().rolling(20).std().iloc[-1]
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫–æ–≤
        vol_risk = min(volatility * 100, 1.0)
        vol_volume_risk = min(volume_volatility * 10, 1.0)
        
        return (vol_risk + vol_volume_risk) / 2.0
    
    def _calculate_profit_probability(self, signal: EnhancedConsensusSignal, data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–±—ã–ª–∏"""
        # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        base_probability = signal.weighted_confidence
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        market_adjustment = signal.market_conditions_score * 0.2
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
        quality_adjustment = signal.signal_quality_score * 0.2
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        rr_adjustment = min(signal.risk_reward_ratio / 3.0, 0.2)
        
        total_probability = base_probability + market_adjustment + quality_adjustment + rr_adjustment
        return min(total_probability, 0.95)  # –ú–∞–∫—Å–∏–º—É–º 95%
    
    def _calculate_rsi(self, data: pd.DataFrame, period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç RSI"""
        if len(data) < period + 1:
            return 50.0
        
        delta = data['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi.iloc[-1] if not pd.isna(rsi.iloc[-1]) else 50.0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def run_enhanced_test():
    """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    config = EnhancedTestConfig()
    tester = EnhancedWinrateTester(config)
    
    await tester.initialize()
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞...")
    logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config.test_period_days} –¥–Ω–µ–π, {len(config.symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"üéØ –¶–µ–ª—å: –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 60%+ –≤–∏–Ω—Ä–µ–π—Ç–∞ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º ROI")
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏)
    
    return "–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"

if __name__ == "__main__":
    asyncio.run(run_enhanced_test())