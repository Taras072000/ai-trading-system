#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ lava_ai - –ø–æ—á–µ–º—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 0 —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_modules.lava_ai import LavaAI

def create_test_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(start='2024-01-01', periods=100, freq='1H')
    base_price = 100.0
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    uptrend_prices = [base_price + i * 0.5 + np.random.normal(0, 0.1) for i in range(100)]
    uptrend_volumes = [1000 + np.random.normal(0, 100) for _ in range(100)]
    
    uptrend_data = pd.DataFrame({
        'timestamp': dates,
        'open': uptrend_prices,
        'high': [p + np.random.uniform(0, 1) for p in uptrend_prices],
        'low': [p - np.random.uniform(0, 1) for p in uptrend_prices],
        'close': uptrend_prices,
        'volume': uptrend_volumes
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    downtrend_prices = [base_price - i * 0.3 + np.random.normal(0, 0.1) for i in range(100)]
    downtrend_volumes = [1000 + np.random.normal(0, 100) for _ in range(100)]
    
    downtrend_data = pd.DataFrame({
        'timestamp': dates,
        'open': downtrend_prices,
        'high': [p + np.random.uniform(0, 0.5) for p in downtrend_prices],
        'low': [p - np.random.uniform(0, 0.5) for p in downtrend_prices],
        'close': downtrend_prices,
        'volume': downtrend_volumes
    })
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–∏–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    volatile_prices = [base_price + np.sin(i/10) * 5 + np.random.normal(0, 2) for i in range(100)]
    volatile_volumes = [1000 + np.random.normal(0, 500) for _ in range(100)]
    
    volatile_data = pd.DataFrame({
        'timestamp': dates,
        'open': volatile_prices,
        'high': [p + np.random.uniform(1, 3) for p in volatile_prices],
        'low': [p - np.random.uniform(1, 3) for p in volatile_prices],
        'close': volatile_prices,
        'volume': volatile_volumes
    })
    
    return {
        'uptrend': uptrend_data,
        'downtrend': downtrend_data,
        'volatile': volatile_data
    }

async def test_lava_ai_signals():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤ lava_ai"""
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ lava_ai –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lava_ai
    lava_ai = LavaAI()
    await lava_ai.initialize()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_scenarios = create_test_data()
    
    for scenario_name, data in test_scenarios.items():
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_name}")
        print(f"   –î–∞–Ω–Ω—ã–µ: {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –¶–µ–Ω–∞: {data['close'].iloc[0]:.2f} ‚Üí {data['close'].iloc[-1]:.2f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((data['close'].iloc[-1] / data['close'].iloc[0]) - 1) * 100:.2f}%")
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal_result = await lava_ai.generate_trading_signals(data)
            
            print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {signal_result}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            pattern_result = await lava_ai.analyze_patterns(data)
            print(f"   üìà –ü–∞—Ç—Ç–µ—Ä–Ω—ã: {pattern_result}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
    print(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏...")
    
    # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç
    extreme_up_data = test_scenarios['uptrend'].copy()
    extreme_up_data['close'] = extreme_up_data['close'] * 1.1  # +10% —Ä–æ—Å—Ç
    extreme_up_data['volume'] = extreme_up_data['volume'] * 2  # –£–¥–≤–æ–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
    
    print(f"üìà –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç:")
    signal = await lava_ai.generate_trading_signals(extreme_up_data)
    print(f"   –°–∏–≥–Ω–∞–ª: {signal}")
    
    # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
    extreme_down_data = test_scenarios['downtrend'].copy()
    extreme_down_data['close'] = extreme_down_data['close'] * 0.9  # -10% –ø–∞–¥–µ–Ω–∏–µ
    extreme_down_data['volume'] = extreme_down_data['volume'] * 3  # –£—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
    
    print(f"üìâ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ:")
    signal = await lava_ai.generate_trading_signals(extreme_down_data)
    print(f"   –°–∏–≥–Ω–∞–ª: {signal}")

if __name__ == "__main__":
    asyncio.run(test_lava_ai_signals())