#!/usr/bin/env python3
"""
Quick Start Script for Reinforcement Learning System
–°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º

–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
"""

import asyncio
import os
import sys
import json
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from run_reinforcement_learning import ReinforcementLearningRunner

class QuickStartInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    
    def __init__(self):
        self.runner = None
    
    def print_banner(self):
        """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
        print("\n" + "="*80)
        print("üöÄ PEPER BINANCE V4 - REINFORCEMENT LEARNING SYSTEM")
        print("   –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º")
        print("="*80)
        print("üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
        print("="*80 + "\n")
    
    def print_menu(self):
        """–í—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        print("üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ:")
        print("1. üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è")
        print("2. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        print("3. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        print("4. üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("5. üóÇÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏")
        print("6. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π")
        print("7. üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("-" * 50)
    
    def print_profiles_menu(self):
        """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        print("\nüìã –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–§–ò–õ–ò –û–ë–£–ß–ï–ù–ò–Ø:")
        print("1. üêå Conservative - –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–º–µ–¥–ª–µ–Ω–Ω–æ–µ, —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ)")
        print("2. ‚öñÔ∏è Balanced - –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("3. üöÄ Aggressive - –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ–µ, —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ)")
        print("4. üß™ Experimental - –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        print("5. ‚ö° Quick Learning - –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        print("0. ‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        print("-" * 50)
    
    async def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            self.runner = ReinforcementLearningRunner()
            
            success = await self.runner.initialize_components()
            if success:
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
                return False
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def run_single_cycle(self):
        """–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            self.print_profiles_menu()
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å (1-5): ").strip()
            
            profile_map = {
                '1': 'conservative',
                '2': 'balanced', 
                '3': 'aggressive',
                '4': 'experimental',
                '5': 'quick_learning'
            }
            
            if choice not in profile_map:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª—è")
                return
            
            profile = profile_map[choice]
            session_name = input(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (Enter –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ").strip()
            
            if not session_name:
                session_name = None
            
            print(f"\nüéØ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—É—á–µ–Ω–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: {profile}")
            print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
            
            success = await self.runner.run_learning_cycle(profile, session_name)
            
            if success:
                print("‚úÖ –¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            else:
                print("‚ùå –¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ü–∏–∫–ª–∞: {e}")
    
    async def run_continuous_learning(self):
        """–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            print("\nüîÑ –ù–ê–°–¢–†–û–ô–ö–ê –ù–ï–ü–†–ï–†–´–í–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
            
            # –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2 3):")
            self.print_profiles_menu()
            
            choices = input("–ü—Ä–æ—Ñ–∏–ª–∏: ").strip().split()
            profile_map = {
                '1': 'conservative',
                '2': 'balanced', 
                '3': 'aggressive',
                '4': 'experimental',
                '5': 'quick_learning'
            }
            
            profiles = []
            for choice in choices:
                if choice in profile_map:
                    profiles.append(profile_map[choice])
            
            if not profiles:
                print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")
                return
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤
            try:
                cycles = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ") or "3")
            except ValueError:
                cycles = 3
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            try:
                delay = int(input("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300): ") or "300")
            except ValueError:
                delay = 300
            
            print(f"\nüîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
            print(f"   üìã –ü—Ä–æ—Ñ–∏–ª–∏: {', '.join(profiles)}")
            print(f"   üî¢ –¶–∏–∫–ª–æ–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {cycles}")
            print(f"   ‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫")
            print("‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤...")
            print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            
            await self.runner.run_continuous_learning(profiles, cycles, delay)
            print("‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    async def show_system_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("\nüîç –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
            print("-" * 50)
            
            status = await self.runner.get_system_status()
            
            print(f"‚è∞ –í—Ä–µ–º—è: {status.get('timestamp', 'N/A')}")
            print(f"üèÉ –†–∞–±–æ—Ç–∞–µ—Ç: {'–î–∞' if status.get('is_running') else '–ù–µ—Ç'}")
            print(f"üÜî –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è: {status.get('session_id', '–ù–µ—Ç')}")
            
            # –°—Ç–∞—Ç—É—Å Mistral —Å–µ—Ä–≤–µ—Ä–∞
            mistral_status = status.get('mistral_server', {})
            if mistral_status:
                print(f"\nü§ñ MISTRAL –°–ï–†–í–ï–†:")
                print(f"   üì° –°—Ç–∞—Ç—É—Å: {'–ó–∞–ø—É—â–µ–Ω' if mistral_status.get('is_running') else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
                print(f"   üåê URL: {mistral_status.get('url', 'N/A')}")
                print(f"   üìä –ú–æ–¥–µ–ª—å: {mistral_status.get('model_name', 'N/A')}")
            
            # –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_status = status.get('database', {})
            if db_status:
                print(f"\nüíæ –ë–ê–ó–ê –î–ê–ù–ù–´–•:")
                print(f"   üìÅ –ü—É—Ç—å: {db_status.get('database_path', 'N/A')}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {db_status.get('database_size_mb', 0):.2f} MB")
                print(f"   üìä –°–µ—Å—Å–∏–π: {db_status.get('sessions_count', 0)}")
                print(f"   üí∞ –°–¥–µ–ª–æ–∫: {db_status.get('trades_count', 0)}")
            
            print("-" * 50)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    async def show_performance_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
            print("-" * 50)
            
            if not self.runner.persistence_manager:
                print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
            print("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
            print("1. üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
            print("2. üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π")
            print("3. üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π")
            
            choice = input("–ü–µ—Ä–∏–æ–¥ (1-3): ").strip()
            days_map = {'1': 7, '2': 30, '3': 90}
            days = days_map.get(choice, 30)
            
            stats = self.runner.persistence_manager.get_performance_statistics(days)
            
            if not stats:
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return
            
            session_stats = stats.get('session_statistics', {})
            trade_stats = stats.get('trade_statistics', {})
            symbol_stats = stats.get('symbol_statistics', [])
            
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê {days} –î–ù–ï–ô:")
            print(f"   üéØ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {session_stats.get('total_sessions', 0)}")
            print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {session_stats.get('completed_sessions', 0)}")
            print(f"   üìà –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {session_stats.get('avg_win_rate', 0):.2f}%")
            print(f"   üí∞ –û–±—â–∏–π PnL: {session_stats.get('total_pnl', 0):.2f}")
            print(f"   üìä –°—Ä–µ–¥–Ω–∏–π PnL –Ω–∞ —Å–µ—Å—Å–∏—é: {session_stats.get('avg_pnl_per_session', 0):.2f}")
            
            print(f"\nüíº –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
            print(f"   üî¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {trade_stats.get('total_trades', 0)}")
            print(f"   üíö –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {trade_stats.get('profitable_trades', 0)}")
            print(f"   üí∞ –°—Ä–µ–¥–Ω–∏–π PnL: {trade_stats.get('avg_pnl_per_trade', 0):.2f}")
            print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trade_stats.get('avg_confidence', 0):.3f}")
            print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {trade_stats.get('avg_duration', 0):.1f} –º–∏–Ω")
            
            if symbol_stats:
                print(f"\nüìä –¢–û–ü –°–ò–ú–í–û–õ–´:")
                for i, symbol in enumerate(symbol_stats[:5], 1):
                    win_rate = (symbol['profitable_count'] / symbol['trades_count'] * 100) if symbol['trades_count'] > 0 else 0
                    print(f"   {i}. {symbol['symbol']}: {symbol['trades_count']} —Å–¥–µ–ª–æ–∫, {win_rate:.1f}% –≤–∏–Ω—Ä–µ–π—Ç, {symbol['total_pnl']:.2f} PnL")
            
            print("-" * 50)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def show_recent_sessions(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            print("\nüóÇÔ∏è –ü–û–°–õ–ï–î–ù–ò–ï –°–ï–°–°–ò–ò")
            print("-" * 80)
            
            if not self.runner.persistence_manager:
                print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return
            
            sessions = self.runner.persistence_manager.get_recent_sessions(10)
            
            if not sessions:
                print("üì≠ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π")
                return
            
            print(f"{'‚Ññ':<3} {'ID —Å–µ—Å—Å–∏–∏':<25} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<20} {'–í–∏–Ω—Ä–µ–π—Ç':<8} {'PnL':<10} {'–°—Ç–∞—Ç—É—Å':<10}")
            print("-" * 80)
            
            for i, session in enumerate(sessions, 1):
                session_id_short = session.session_id[-20:] if len(session.session_id) > 20 else session.session_id
                name_short = session.session_name[:18] + "..." if len(session.session_name) > 20 else session.session_name
                
                print(f"{i:<3} {session_id_short:<25} {name_short:<20} {session.win_rate:<7.2f}% {session.total_pnl:<9.2f} {session.status:<10}")
            
            print("-" * 80)
            
            # –û–ø—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            choice = input("\n–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é? (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
            if choice.isdigit():
                idx = int(choice) - 1
                if 0 <= idx < len(sessions):
                    session = sessions[idx]
                    export_path = f"exports/session_{session.session_id}.json"
                    os.makedirs("exports", exist_ok=True)
                    
                    if self.runner.persistence_manager.export_session(session.session_id, export_path):
                        print(f"‚úÖ –°–µ—Å—Å–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {export_path}")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π: {e}")
    
    async def profiles_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π"""
        try:
            print("\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–†–û–§–ò–õ–ï–ô")
            print("-" * 50)
            print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏")
            print("2. üîß –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
            print("3. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
            print("0. ‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if choice == '1':
                # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏
                config_manager = self.runner.config_manager
                profiles = config_manager.get_available_profiles()
                
                print(f"\nüìã –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–§–ò–õ–ò ({len(profiles)}):")
                for name, profile in profiles.items():
                    rl_config = profile.get('reinforcement_learning', {})
                    print(f"\nüè∑Ô∏è {name}:")
                    print(f"   üìà –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è: {rl_config.get('learning_rate', 0)}")
                    print(f"   üéÅ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã: {rl_config.get('reward_multiplier', 0)}")
                    print(f"   ‚ö†Ô∏è –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–∫–∞–∑–∞–Ω–∏—è: {rl_config.get('punishment_multiplier', 0)}")
                    print(f"   üìâ –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –≤–µ—Å–æ–≤: {rl_config.get('weight_decay', 0)}")
            
            elif choice == '2':
                print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
            elif choice == '3':
                print("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π: {e}")
    
    async def maintenance(self):
        """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("\nüßπ –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
            print("-" * 50)
            print("1. üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é")
            print("2. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ")
            print("3. üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("4. üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
            print("0. ‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
            
            if choice == '1':
                # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
                if self.runner.persistence_manager:
                    backup_path = self.runner.persistence_manager.db.create_backup()
                    if backup_path:
                        print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
                else:
                    print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            elif choice == '2':
                # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                days = input("–£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ (–¥–Ω–µ–π, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90): ").strip()
                try:
                    days = int(days) if days else 90
                except ValueError:
                    days = 90
                
                print(f"üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π...")
                if self.runner.persistence_manager:
                    success = self.runner.persistence_manager.cleanup_old_data(days)
                    if success:
                        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏")
                else:
                    print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            elif choice == '3':
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
                if self.runner.persistence_manager:
                    info = self.runner.persistence_manager.get_database_info()
                    print(f"\nüíæ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
                    print(f"   üìÅ –ü—É—Ç—å: {info.get('database_path', 'N/A')}")
                    print(f"   üìè –†–∞–∑–º–µ—Ä: {info.get('database_size_mb', 0):.2f} MB")
                    print(f"   üìä –°–µ—Å—Å–∏–π: {info.get('sessions_count', 0)}")
                    print(f"   üí∞ –°–¥–µ–ª–æ–∫: {info.get('trades_count', 0)}")
                    print(f"   üìà –ó–∞–ø–∏—Å–µ–π —ç–≤–æ–ª—é—Ü–∏–∏: {info.get('weight_evolution_count', 0)}")
                    print(f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {info.get('last_session_created', 'N/A')}")
                else:
                    print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            elif choice == '4':
                print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.print_banner()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        if not await self.initialize_system():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        try:
            while True:
                self.print_menu()
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): ").strip()
                
                if choice == '0':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == '1':
                    await self.run_single_cycle()
                elif choice == '2':
                    await self.run_continuous_learning()
                elif choice == '3':
                    await self.show_system_status()
                elif choice == '4':
                    await self.show_performance_stats()
                elif choice == '5':
                    await self.show_recent_sessions()
                elif choice == '6':
                    await self.profiles_settings()
                elif choice == '7':
                    await self.maintenance()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
                if choice != '0':
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    print("\n" * 2)  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        finally:
            if self.runner:
                await self.runner.cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    interface = QuickStartInterface()
    await interface.run()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("logs", exist_ok=True)
    os.makedirs("exports", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    asyncio.run(main())