#!/usr/bin/env python3
"""
üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò
================================

–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞ –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python run_trading_analysis.py

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫—É trading_analysis_results/
"""

import asyncio
import sys
import os
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from trading_logic_analyzer import TradingLogicAnalyzer, TradingCalibrator
from winrate_test_with_results2 import TradeResult, AIModelDecision, ConsensusSignal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('trading_analysis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TradingDataLoader:
    """
    üìä –ó–ê–ì–†–£–ó–ß–ò–ö –î–ê–ù–ù–´–• –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
    
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
    - –õ–æ–≥–∏ –æ—Ç–ª–∞–¥–∫–∏
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª—ã
    """
    
    def __init__(self):
        self.base_dir = Path(".")
        self.results_dir = self.base_dir / "reports" / "winrate_tests"
        
    async def load_latest_test_data(self) -> List[Dict]:
        """
        üìà –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ü–û–°–õ–ï–î–ù–ï–ì–û –¢–ï–°–¢–ê
        
        –ò—â–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        csv_files = list(self.results_dir.glob("**/all_trades_*.csv")) if self.results_dir.exists() else []
        
        if csv_files:
            # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            latest_csv = max(csv_files, key=lambda x: x.stat().st_mtime)
            logger.info(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {latest_csv}")
            
            try:
                df = pd.read_csv(latest_csv)
                trades_data = await self._convert_csv_to_trade_data(df)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(trades_data)} —Å–¥–µ–ª–æ–∫ –∏–∑ CSV")
                return trades_data
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {e}")
        
        # –ï—Å–ª–∏ CSV –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("üìù CSV –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        return await self._create_test_data_from_known_results()
    
    async def _convert_csv_to_trade_data(self, df: pd.DataFrame) -> List[Dict]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç CSV –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        trades_data = []
        
        for _, row in df.iterrows():
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
            entry_time = pd.to_datetime(row['–í—Ä–µ–º—è –≤—Ö–æ–¥–∞'])
            exit_time = pd.to_datetime(row['–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞'])
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª—è—Ö
            participating_models = []
            consensus_strength = int(row.get('–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞', 1))
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            model_names = ["TradingAI", "LavaAI", "LGBMAI", "MistralAI", "ReinforcementLearningEngine"]
            for i in range(min(consensus_strength, len(model_names))):
                participating_models.append({
                    'model_name': model_names[i],
                    'action': 'BUY' if row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'] == 'LONG' else 'SELL',
                    'confidence': float(row.get('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)', 0)) / 100,
                    'reasoning': f"Model {model_names[i]} signal",
                    'timestamp': entry_time.isoformat()
                })
            
            trade_data = {
                'symbol': row['–°–∏–º–≤–æ–ª'],
                'entry_time': entry_time.isoformat(),
                'entry_price': float(row['–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞']),
                'exit_time': exit_time.isoformat(),
                'exit_price': float(row['–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞']),
                'direction': row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
                'pnl': float(row['P&L ($)']),
                'pnl_percent': float(row['P&L (%)']),
                'confidence': float(row.get('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)', 0)) / 100,
                'ai_model': row.get('AI –º–æ–¥–µ–ª—å', 'unknown'),
                'consensus_strength': consensus_strength,
                'participating_models': participating_models,
                'position_size': float(row.get('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', 1000)),
                'commission': float(row.get('–ö–æ–º–∏—Å—Å–∏—è', 1)),
                'exit_reason': 'unknown'
            }
            
            trades_data.append(trade_data)
        
        return trades_data
    
    async def _create_test_data_from_known_results(self) -> List[Dict]:
        """
        üß™ –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –ù–ê –û–°–ù–û–í–ï –ò–ó–í–ï–°–¢–ù–´–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
        
        –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞:
        - Win Rate: 41.2%
        - ROI: -15.6%
        - 34 —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ç–æ–ø-5 –ø–∞—Ä–∞—Ö
        """
        logger.info("üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "ADAUSDT", "XRPUSDT"]
        total_trades = 34
        win_rate = 0.412  # 41.2%
        total_roi = -15.6  # -15.6%
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L –ø–æ –ø–∞—Ä–∞–º (–∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞)
        symbol_pnl = {
            "BTCUSDT": -2.85,
            "ETHUSDT": -3.22,
            "SOLUSDT": -4.15,
            "ADAUSDT": -3.89,
            "XRPUSDT": -2.45,
            "APTUSDT": 0.96  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è
        }
        
        trades_data = []
        base_time = datetime.now() - timedelta(days=7)
        
        # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in symbols:
            symbol_trades = int(total_trades / len(symbols))  # ~6-7 —Å–¥–µ–ª–æ–∫ –Ω–∞ —Å–∏–º–≤–æ–ª
            symbol_total_pnl = symbol_pnl.get(symbol, -2.0)
            
            for i in range(symbol_trades):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏
                is_profitable = (i / symbol_trades) < win_rate
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º P&L
                if is_profitable:
                    pnl = abs(symbol_total_pnl) * 0.3 * (1 + i * 0.1)  # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                else:
                    pnl = -abs(symbol_total_pnl) * 0.7 * (1 + i * 0.1)  # –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                
                # –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏
                entry_time = base_time + timedelta(hours=i * 24 + symbol.index(symbol[0]) * 4)
                exit_time = entry_time + timedelta(hours=24)  # 24 —á–∞—Å–∞ —É–¥–µ—Ä–∂–∞–Ω–∏—è
                
                # –¶–µ–Ω—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞)
                base_prices = {
                    "BTCUSDT": 50000,
                    "ETHUSDT": 3000,
                    "SOLUSDT": 200,
                    "ADAUSDT": 0.8,
                    "XRPUSDT": 2.5,
                    "APTUSDT": 15
                }
                
                entry_price = base_prices.get(symbol, 100) * (1 + (i * 0.01))
                pnl_percent = (pnl / 1000) * 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é $1000
                exit_price = entry_price * (1 + pnl_percent / 100)
                
                # –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
                participating_models = []
                consensus_strength = 1  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–º 1 –º–æ–¥–µ–ª–∏
                
                # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
                confidence = 0.001 + (i * 0.0001)  # 0.1% - 0.4%
                
                model_names = ["trading_ai", "lava_ai", "lgbm_ai", "mistral_ai", "reinforcement_learning_engine"]
                for j in range(consensus_strength):
                    participating_models.append({
                        'model_name': model_names[j],
                        'action': 'BUY' if pnl > 0 else 'SELL',
                        'confidence': confidence,
                        'reasoning': f"Signal from {model_names[j]}",
                        'timestamp': entry_time.isoformat()
                    })
                
                trade_data = {
                    'symbol': symbol,
                    'entry_time': entry_time.isoformat(),
                    'entry_price': entry_price,
                    'exit_time': exit_time.isoformat(),
                    'exit_price': exit_price,
                    'direction': 'LONG' if pnl > 0 else 'SHORT',
                    'pnl': pnl,
                    'pnl_percent': pnl_percent,
                    'confidence': confidence,
                    'ai_model': f'consensus_{consensus_strength}',
                    'consensus_strength': consensus_strength,
                    'participating_models': participating_models,
                    'position_size': 1000.0,
                    'commission': 1.0,
                    'exit_reason': 'stop_loss' if pnl < 0 else 'take_profit'
                }
                
                trades_data.append(trade_data)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(trades_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")
        return trades_data
    
    async def load_historical_data(self) -> Dict[str, pd.DataFrame]:
        """
        üìà –ó–ê–ì–†–£–ó–ö–ê –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–•
        
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        """
        logger.info("üìà –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        symbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT", "ADAUSDT", "XRPUSDT", "APTUSDT"]
        historical_data = {}
        
        for symbol in symbols:
            # –°–æ–∑–¥–∞–µ–º 7 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö —Å —á–∞—Å–æ–≤—ã–º–∏ —Å–≤–µ—á–∞–º–∏
            dates = pd.date_range(
                start=datetime.now() - timedelta(days=7),
                end=datetime.now(),
                freq='H'
            )
            
            # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã
            base_prices = {
                "BTCUSDT": 50000,
                "ETHUSDT": 3000,
                "SOLUSDT": 200,
                "ADAUSDT": 0.8,
                "XRPUSDT": 2.5,
                "APTUSDT": 15
            }
            
            base_price = base_prices.get(symbol, 100)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
            data = []
            current_price = base_price
            
            for date in dates:
                # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                change = (np.random.random() - 0.5) * 0.02  # ¬±1% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                current_price *= (1 + change)
                
                # OHLC
                open_price = current_price
                high_price = open_price * (1 + abs(change) * 0.5)
                low_price = open_price * (1 - abs(change) * 0.5)
                close_price = current_price
                volume = np.random.randint(1000000, 10000000)
                
                data.append({
                    'timestamp': date,
                    'open': open_price,
                    'high': high_price,
                    'low': low_price,
                    'close': close_price,
                    'volume': volume
                })
            
            historical_data[symbol] = pd.DataFrame(data)
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(historical_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        return historical_data


async def main():
    """
    üöÄ –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ê–ù–ê–õ–ò–ó–ê
    """
    print("üîç –°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò")
    print("=" * 50)
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        data_loader = TradingDataLoader()
        
        trades_data = await data_loader.load_latest_test_data()
        historical_data = await data_loader.load_historical_data()
        
        if not trades_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–∞—Ö")
            return
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        logger.info("üîç –≠—Ç–∞–ø 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
        analyzer = TradingLogicAnalyzer(trades_data, historical_data)
        
        # 3. –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        logger.info("üöÄ –≠—Ç–∞–ø 3: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        analysis_results = await analyzer.run_full_analysis()
        
        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä–∞
        logger.info("üéØ –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä–∞...")
        calibrator = TradingCalibrator(analyzer)
        
        # 5. –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        logger.info("‚öôÔ∏è –≠—Ç–∞–ø 5: –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
        calibration_results = await calibrator.run_full_calibration()
        
        # 6. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 30)
        
        for component_name, analysis in analysis_results.items():
            score_emoji = "üî¥" if analysis.performance_score < 50 else "üü°" if analysis.performance_score < 70 else "üü¢"
            print(f"{score_emoji} {analysis.component_name}: {analysis.performance_score:.1f}/100")
            
            if analysis.issues:
                print(f"   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã: {len(analysis.issues)}")
                for issue in analysis.issues[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –ø—Ä–æ–±–ª–µ–º—ã
                    print(f"      ‚Ä¢ {issue}")
                if len(analysis.issues) > 2:
                    print(f"      ‚Ä¢ ... –∏ –µ—â–µ {len(analysis.issues) - 2}")
            
            if analysis.recommendations:
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(analysis.recommendations)}")
            print()
        
        # 7. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        output_dir = Path("trading_analysis_results")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir.absolute()}")
        print(f"üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {output_dir / 'visualizations'}")
        print(f"üìã –û—Ç—á–µ—Ç—ã: {output_dir / 'reports'}")
        
        # 8. –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
        main_report = output_dir / "reports" / "diagnostic_report.md"
        if main_report.exists():
            print(f"\nüìñ –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á–µ—Ç: {main_report}")
            print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    exit_code = asyncio.run(main())
    sys.exit(exit_code)