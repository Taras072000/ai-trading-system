"""
üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò
–°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞

–ê–≤—Ç–æ—Ä: AI Trading System
–î–∞—Ç–∞: 2024
"""

import asyncio
import pandas as pd
import numpy as np
import json
import logging
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass, asdict
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from winrate_test_with_results2 import RealWinrateTester, TestConfig, WinrateTestResult
from mock_ai_trading_system import MockTradingSystem, MockAIOrchestrator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
plt.rcParams['font.family'] = ['Arial Unicode MS', 'DejaVu Sans', 'Liberation Sans']
plt.rcParams['axes.unicode_minus'] = False

@dataclass
class SignalAnalysis:
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–∏"""
    model_name: str
    total_signals: int
    buy_signals: int
    sell_signals: int
    hold_signals: int
    avg_confidence: float
    confidence_distribution: Dict[str, int]  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    signal_accuracy: float  # –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
    bias_score: float  # –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (-1 –º–µ–¥–≤–µ–∂—å—è, 0 –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è, 1 –±—ã—á—å—è)

@dataclass
class ConsensusAnalysis:
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
    total_consensus_attempts: int
    successful_consensus: int
    consensus_rate: float
    avg_models_participating: float
    avg_consensus_confidence: float
    consensus_by_strength: Dict[int, int]  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
    action_distribution: Dict[str, int]  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (BUY/SELL/HOLD)

@dataclass
class FilterAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    filter_name: str
    total_checks: int
    passed_checks: int
    blocked_checks: int
    pass_rate: float
    impact_on_performance: float  # –í–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    false_positives: int  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö–æ—Ä–æ—à–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    true_positives: int   # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–æ—Ö–∏–µ —Å–∏–≥–Ω–∞–ª—ã

@dataclass
class EntryExitAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞"""
    total_entries: int
    successful_entries: int  # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã
    entry_success_rate: float
    avg_holding_time: float
    exit_reasons: Dict[str, int]  # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –≤—ã—Ö–æ–¥–∞
    avg_profit_per_exit_reason: Dict[str, float]
    timing_analysis: Dict[str, Any]  # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞

@dataclass
class RiskManagementAnalysis:
    """–ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
    total_trades: int
    stop_loss_triggered: int
    take_profit_triggered: int
    max_drawdown_reached: int
    risk_reward_ratio: float
    avg_risk_per_trade: float
    position_sizing_effectiveness: float

@dataclass
class ComponentAnalysisResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    component_name: str
    analysis_data: Any
    performance_score: float  # 0-100
    issues_found: List[str]
    recommendations: List[str]
    charts_generated: List[str]

class TradingLogicAnalyzer:
    """
    üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò
    
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:
    1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π
    2. –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    3. –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
    4. –£—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏
    5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
    6. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    
    def __init__(self, config: TestConfig):
        self.config = config
        self.mock_system = MockTradingSystem(config)
        self.analysis_results = {}
        self.charts_dir = "trading_logic_analysis"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        import os
        os.makedirs(self.charts_dir, exist_ok=True)
        
        logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏")
    
    async def run_full_analysis(self) -> Dict[str, ComponentAnalysisResult]:
        """
        üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò
        
        –≠—Ç–∞–ø—ã:
        1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å mock —Å–∏—Å—Ç–µ–º—ã
        2. –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
        4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_data = await self._collect_analysis_data()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        results = {}
        
        # 1. –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        logger.info("üìä –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π...")
        results['signal_generation'] = await self.analyze_signal_generation(analysis_data)
        
        # 2. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        logger.info("ü§ù –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞...")
        results['consensus_logic'] = await self.analyze_consensus_logic(analysis_data)
        
        # 3. –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞
        logger.info("üìà –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞...")
        results['entry_conditions'] = await self.analyze_entry_conditions(analysis_data)
        
        # 4. –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞
        logger.info("üìâ –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞...")
        results['exit_conditions'] = await self.analyze_exit_conditions(analysis_data)
        
        # 5. –ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        logger.info("‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏...")
        results['risk_management'] = await self.analyze_risk_management(analysis_data)
        
        # 6. –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        logger.info("üîß –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        results['filters'] = await self.analyze_filters(analysis_data)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        await self._generate_summary_report(results)
        
        logger.info("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        return results
    
    async def _collect_analysis_data(self) -> Dict[str, Any]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        data = {
            'signals': [],
            'consensus_attempts': [],
            'trades': [],
            'filter_checks': [],
            'market_data': {}
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º mock —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        for symbol in self.config.symbols:
            logger.info(f"üìà –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            market_data = await self.mock_system._load_mock_historical_data(symbol)
            data['market_data'][symbol] = market_data
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            symbol_data = await self._simulate_with_logging(symbol, market_data)
            
            data['signals'].extend(symbol_data['signals'])
            data['consensus_attempts'].extend(symbol_data['consensus_attempts'])
            data['trades'].extend(symbol_data['trades'])
            data['filter_checks'].extend(symbol_data['filter_checks'])
        
        logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data['signals'])} —Å–∏–≥–Ω–∞–ª–æ–≤, "
                   f"{len(data['consensus_attempts'])} –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞, "
                   f"{len(data['trades'])} —Å–¥–µ–ª–æ–∫")
        
        return data
    
    async def _simulate_with_logging(self, symbol: str, data: pd.DataFrame) -> Dict[str, List]:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        simulation_data = {
            'signals': [],
            'consensus_attempts': [],
            'trades': [],
            'filter_checks': []
        }
        
        position = None
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º —Å –æ–∫–Ω–æ–º
        for i in range(20, len(data) - 1):
            current_data = data.iloc[:i+1]
            current_price = current_data['close'].iloc[-1]
            current_time = current_data['timestamp'].iloc[-1]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç AI –º–æ–¥–µ–ª–µ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            signals = await self.mock_system.ai_orchestrator.get_all_signals(symbol, current_data)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
            for model_name, signal in signals.items():
                simulation_data['signals'].append({
                    'symbol': symbol,
                    'timestamp': current_time,
                    'model_name': model_name,
                    'action': signal.action,
                    'confidence': signal.confidence,
                    'reasoning': signal.reasoning,
                    'price': current_price
                })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            consensus = self.mock_system._form_consensus(signals)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            simulation_data['consensus_attempts'].append({
                'symbol': symbol,
                'timestamp': current_time,
                'signals_count': len(signals),
                'consensus_formed': consensus is not None,
                'consensus_action': consensus['action'] if consensus else None,
                'consensus_confidence': consensus['confidence'] if consensus else None,
                'participating_models': consensus['total_models'] if consensus else 0,
                'price': current_price
            })
            
            if consensus is None:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            filter_result = self._check_filters_with_logging(consensus, current_data, symbol, current_time)
            simulation_data['filter_checks'].extend(filter_result)
            
            # –õ–æ–≥–∏–∫–∞ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
            if position is None and consensus['action'] in ['BUY', 'SELL']:
                if self.mock_system._check_entry_conditions(consensus, current_data):
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    position = {
                        'symbol': symbol,
                        'action': consensus['action'],
                        'entry_price': current_price,
                        'entry_time': current_time,
                        'size': self.config.position_size_percent / 100 * self.mock_system.balance / current_price,
                        'consensus': consensus
                    }
            
            elif position is not None:
                exit_reason = self.mock_system._check_exit_conditions(position, current_price, current_time)
                if exit_reason:
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                    trade = self.mock_system._close_position(position, current_price, current_time, exit_reason)
                    simulation_data['trades'].append(trade)
                    position = None
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
        if position is not None:
            final_price = data['close'].iloc[-1]
            final_time = data['timestamp'].iloc[-1]
            trade = self.mock_system._close_position(position, final_price, final_time, "–ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∞")
            simulation_data['trades'].append(trade)
        
        return simulation_data
    
    def _check_filters_with_logging(self, consensus: Dict[str, Any], data: pd.DataFrame, 
                                   symbol: str, timestamp: datetime) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        filter_checks = []
        
        # –§–∏–ª—å—Ç—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_check = {
            'symbol': symbol,
            'timestamp': timestamp,
            'filter_name': 'min_confidence',
            'value': consensus['confidence'],
            'threshold': self.config.min_confidence,
            'passed': consensus['confidence'] >= self.config.min_confidence,
            'impact': 'entry_block' if consensus['confidence'] < self.config.min_confidence else 'entry_allow'
        }
        filter_checks.append(confidence_check)
        
        # –§–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        if self.config.min_volatility > 0:
            volatility = data['close'].pct_change().tail(10).std()
            volatility_check = {
                'symbol': symbol,
                'timestamp': timestamp,
                'filter_name': 'min_volatility',
                'value': volatility,
                'threshold': self.config.min_volatility,
                'passed': volatility >= self.config.min_volatility,
                'impact': 'entry_block' if volatility < self.config.min_volatility else 'entry_allow'
            }
            filter_checks.append(volatility_check)
        
        # –§–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞
        if self.config.min_volume_ratio > 0 and 'volume' in data.columns:
            recent_volume = data['volume'].tail(5).mean()
            avg_volume = data['volume'].tail(20).mean()
            volume_ratio = recent_volume / avg_volume if avg_volume > 0 else 0
            volume_check = {
                'symbol': symbol,
                'timestamp': timestamp,
                'filter_name': 'min_volume_ratio',
                'value': volume_ratio,
                'threshold': self.config.min_volume_ratio,
                'passed': volume_ratio >= self.config.min_volume_ratio,
                'impact': 'entry_block' if volume_ratio < self.config.min_volume_ratio else 'entry_allow'
            }
            filter_checks.append(volume_check)
        
        return filter_checks
    
    async def analyze_signal_generation(self, data: Dict[str, Any]) -> ComponentAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π"""
        
        signals_df = pd.DataFrame(data['signals'])
        
        if signals_df.empty:
            return ComponentAnalysisResult(
                component_name="Signal Generation",
                analysis_data=None,
                performance_score=0,
                issues_found=["–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
                recommendations=["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É AI –º–æ–¥–µ–ª–µ–π"],
                charts_generated=[]
            )
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–æ–¥–µ–ª—è–º
        model_analyses = {}
        
        for model_name in signals_df['model_name'].unique():
            model_signals = signals_df[signals_df['model_name'] == model_name]
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_bins = pd.cut(model_signals['confidence'], 
                                   bins=[0, 0.3, 0.5, 0.7, 0.9, 1.0], 
                                   labels=['–ù–∏–∑–∫–∞—è', '–°—Ä–µ–¥–Ω—è—è-', '–°—Ä–µ–¥–Ω—è—è', '–í—ã—Å–æ–∫–∞—è', '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'])
            confidence_dist = confidence_bins.value_counts().to_dict()
            
            # –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            action_counts = model_signals['action'].value_counts()
            buy_ratio = action_counts.get('BUY', 0) / len(model_signals)
            sell_ratio = action_counts.get('SELL', 0) / len(model_signals)
            bias_score = buy_ratio - sell_ratio  # –û—Ç -1 (–º–µ–¥–≤–µ–∂—å—è) –¥–æ 1 (–±—ã—á—å—è)
            
            analysis = SignalAnalysis(
                model_name=model_name,
                total_signals=len(model_signals),
                buy_signals=action_counts.get('BUY', 0),
                sell_signals=action_counts.get('SELL', 0),
                hold_signals=action_counts.get('HOLD', 0),
                avg_confidence=model_signals['confidence'].mean(),
                confidence_distribution=confidence_dist,
                signal_accuracy=0.0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                bias_score=bias_score
            )
            
            model_analyses[model_name] = analysis
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        charts = await self._create_signal_charts(signals_df, model_analyses)
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_score = self._calculate_signal_performance_score(model_analyses)
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        issues = self._identify_signal_issues(model_analyses)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_signal_recommendations(model_analyses, issues)
        
        return ComponentAnalysisResult(
            component_name="Signal Generation",
            analysis_data=model_analyses,
            performance_score=performance_score,
            issues_found=issues,
            recommendations=recommendations,
            charts_generated=charts
        )
    
    async def analyze_consensus_logic(self, data: Dict[str, Any]) -> ComponentAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        
        consensus_df = pd.DataFrame(data['consensus_attempts'])
        
        if consensus_df.empty:
            return ComponentAnalysisResult(
                component_name="Consensus Logic",
                analysis_data=None,
                performance_score=0,
                issues_found=["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ"],
                recommendations=["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"],
                charts_generated=[]
            )
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        total_attempts = len(consensus_df)
        successful = len(consensus_df[consensus_df['consensus_formed'] == True])
        consensus_rate = successful / total_attempts if total_attempts > 0 else 0
        
        successful_consensus = consensus_df[consensus_df['consensus_formed'] == True]
        
        avg_models = successful_consensus['participating_models'].mean() if not successful_consensus.empty else 0
        avg_confidence = successful_consensus['consensus_confidence'].mean() if not successful_consensus.empty else 0
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–ª–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_strength_dist = successful_consensus['participating_models'].value_counts().to_dict()
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        action_dist = successful_consensus['consensus_action'].value_counts().to_dict()
        
        analysis = ConsensusAnalysis(
            total_consensus_attempts=total_attempts,
            successful_consensus=successful,
            consensus_rate=consensus_rate,
            avg_models_participating=avg_models,
            avg_consensus_confidence=avg_confidence,
            consensus_by_strength=consensus_strength_dist,
            action_distribution=action_dist
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        charts = await self._create_consensus_charts(consensus_df, analysis)
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_score = self._calculate_consensus_performance_score(analysis)
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        issues = self._identify_consensus_issues(analysis)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = self._generate_consensus_recommendations(analysis, issues)
        
        return ComponentAnalysisResult(
            component_name="Consensus Logic",
            analysis_data=analysis,
            performance_score=performance_score,
            issues_found=issues,
            recommendations=recommendations,
            charts_generated=charts
        )
    
    async def analyze_entry_conditions(self, data: Dict[str, Any]) -> ComponentAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É"""
        
        trades_df = pd.DataFrame(data['trades'])
        
        if trades_df.empty:
            return ComponentAnalysisResult(
                component_name="Entry Conditions",
                analysis_data=None,
                performance_score=0,
                issues_found=["–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
                recommendations=["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É"],
                charts_generated=[]
            )
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ö–æ–¥–æ–≤
        total_entries = len(trades_df)
        successful_entries = len(trades_df[trades_df['pnl'] > 0])
        entry_success_rate = successful_entries / total_entries if total_entries > 0 else 0
        
        # –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        avg_holding_time = trades_df['holding_time_hours'].mean()
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
        trades_df['entry_hour'] = pd.to_datetime(trades_df['entry_time']).dt.hour
        hourly_performance = trades_df.groupby('entry_hour')['pnl'].agg(['count', 'mean', 'sum']).to_dict()
        
        analysis = EntryExitAnalysis(
            total_entries=total_entries,
            successful_entries=successful_entries,
            entry_success_rate=entry_success_rate,
            avg_holding_time=avg_holding_time,
            exit_reasons={},  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ analyze_exit_conditions
            avg_profit_per_exit_reason={},
            timing_analysis=hourly_performance
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        charts = await self._create_entry_charts(trades_df, analysis)
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_score = entry_success_rate * 100
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        issues = []
        if entry_success_rate < 0.4:
            issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: {entry_success_rate:.1%}")
        if avg_holding_time > self.config.max_hold_hours * 0.8:
            issues.append(f"–°–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π: {avg_holding_time:.1f} —á–∞—Å–æ–≤")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if entry_success_rate < 0.4:
            recommendations.append("–£–∂–µ—Å—Ç–æ—á–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        if avg_holding_time > self.config.max_hold_hours * 0.8:
            recommendations.append("–°–æ–∫—Ä–∞—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞")
        
        return ComponentAnalysisResult(
            component_name="Entry Conditions",
            analysis_data=analysis,
            performance_score=performance_score,
            issues_found=issues,
            recommendations=recommendations,
            charts_generated=charts
        )
    
    async def analyze_exit_conditions(self, data: Dict[str, Any]) -> ComponentAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏"""
        
        trades_df = pd.DataFrame(data['trades'])
        
        if trades_df.empty:
            return ComponentAnalysisResult(
                component_name="Exit Conditions",
                analysis_data=None,
                performance_score=0,
                issues_found=["–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
                recommendations=["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏"],
                charts_generated=[]
            )
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –≤—ã—Ö–æ–¥–∞
        exit_reasons = trades_df['exit_reason'].value_counts().to_dict()
        
        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã—Ö–æ–¥–∞
        avg_profit_per_reason = trades_df.groupby('exit_reason')['pnl'].mean().to_dict()
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞
        trades_df['exit_hour'] = pd.to_datetime(trades_df['exit_time']).dt.hour
        hourly_exit_performance = trades_df.groupby('exit_hour')['pnl'].agg(['count', 'mean']).to_dict()
        
        analysis = EntryExitAnalysis(
            total_entries=len(trades_df),
            successful_entries=len(trades_df[trades_df['pnl'] > 0]),
            entry_success_rate=len(trades_df[trades_df['pnl'] > 0]) / len(trades_df),
            avg_holding_time=trades_df['holding_time_hours'].mean(),
            exit_reasons=exit_reasons,
            avg_profit_per_exit_reason=avg_profit_per_reason,
            timing_analysis=hourly_exit_performance
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        charts = await self._create_exit_charts(trades_df, analysis)
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        tp_ratio = exit_reasons.get('Take Profit', 0) / len(trades_df) if len(trades_df) > 0 else 0
        sl_ratio = exit_reasons.get('Stop Loss', 0) / len(trades_df) if len(trades_df) > 0 else 0
        performance_score = tp_ratio * 100 - sl_ratio * 50  # TP —Ö–æ—Ä–æ—à–æ, SL –ø–ª–æ—Ö–æ
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        issues = []
        if sl_ratio > 0.6:
            issues.append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π Stop Loss: {sl_ratio:.1%}")
        if tp_ratio < 0.3:
            issues.append(f"–ú–∞–ª–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π Take Profit: {tp_ratio:.1%}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if sl_ratio > 0.6:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä Stop Loss")
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞")
        if tp_ratio < 0.3:
            recommendations.append("–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä Take Profit")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        
        return ComponentAnalysisResult(
            component_name="Exit Conditions",
            analysis_data=analysis,
            performance_score=max(0, performance_score),
            issues_found=issues,
            recommendations=recommendations,
            charts_generated=charts
        )
    
    async def analyze_risk_management(self, data: Dict[str, Any]) -> ComponentAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        
        trades_df = pd.DataFrame(data['trades'])
        
        if trades_df.empty:
            return ComponentAnalysisResult(
                component_name="Risk Management",
                analysis_data=None,
                performance_score=0,
                issues_found=["–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"],
                recommendations=["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"],
                charts_generated=[]
            )
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
        total_trades = len(trades_df)
        stop_loss_count = len(trades_df[trades_df['exit_reason'] == 'Stop Loss'])
        take_profit_count = len(trades_df[trades_df['exit_reason'] == 'Take Profit'])
        
        # –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        wins = trades_df[trades_df['pnl'] > 0]['pnl']
        losses = trades_df[trades_df['pnl'] <= 0]['pnl']
        
        avg_win = wins.mean() if not wins.empty else 0
        avg_loss = abs(losses.mean()) if not losses.empty else 0
        risk_reward_ratio = avg_win / avg_loss if avg_loss > 0 else 0
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É
        avg_risk = trades_df['size'].mean() * self.config.stop_loss_percent / 100
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
        position_sizing_eff = trades_df['pnl'].sum() / trades_df['size'].sum() if trades_df['size'].sum() > 0 else 0
        
        analysis = RiskManagementAnalysis(
            total_trades=total_trades,
            stop_loss_triggered=stop_loss_count,
            take_profit_triggered=take_profit_count,
            max_drawdown_reached=0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            risk_reward_ratio=risk_reward_ratio,
            avg_risk_per_trade=avg_risk,
            position_sizing_effectiveness=position_sizing_eff
        )
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        charts = await self._create_risk_charts(trades_df, analysis)
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_score = min(100, risk_reward_ratio * 50) if risk_reward_ratio > 0 else 0
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        issues = []
        if risk_reward_ratio < 1.5:
            issues.append(f"–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {risk_reward_ratio:.2f}")
        if stop_loss_count / total_trades > 0.7:
            issues.append(f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è Stop Loss: {stop_loss_count/total_trades:.1%}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if risk_reward_ratio < 1.5:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä Take Profit")
            recommendations.append("–£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä Stop Loss")
        if stop_loss_count / total_trades > 0.7:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—Ö–æ–¥–∞")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        
        return ComponentAnalysisResult(
            component_name="Risk Management",
            analysis_data=analysis,
            performance_score=performance_score,
            issues_found=issues,
            recommendations=recommendations,
            charts_generated=charts
        )
    
    async def analyze_filters(self, data: Dict[str, Any]) -> ComponentAnalysisResult:
        """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        
        filter_checks_df = pd.DataFrame(data['filter_checks'])
        
        if filter_checks_df.empty:
            return ComponentAnalysisResult(
                component_name="Filters",
                analysis_data=None,
                performance_score=0,
                issues_found=["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö"],
                recommendations=["–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"],
                charts_generated=[]
            )
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_analyses = {}
        
        for filter_name in filter_checks_df['filter_name'].unique():
            filter_data = filter_checks_df[filter_checks_df['filter_name'] == filter_name]
            
            total_checks = len(filter_data)
            passed_checks = len(filter_data[filter_data['passed'] == True])
            blocked_checks = total_checks - passed_checks
            pass_rate = passed_checks / total_checks if total_checks > 0 else 0
            
            analysis = FilterAnalysis(
                filter_name=filter_name,
                total_checks=total_checks,
                passed_checks=passed_checks,
                blocked_checks=blocked_checks,
                pass_rate=pass_rate,
                impact_on_performance=0.0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                false_positives=0,  # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                true_positives=0    # –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            )
            
            filter_analyses[filter_name] = analysis
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        charts = await self._create_filter_charts(filter_checks_df, filter_analyses)
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        avg_pass_rate = np.mean([f.pass_rate for f in filter_analyses.values()])
        performance_score = avg_pass_rate * 100
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        issues = []
        for name, analysis in filter_analyses.items():
            if analysis.pass_rate < 0.1:
                issues.append(f"–§–∏–ª—å—Ç—Ä {name} –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {analysis.pass_rate:.1%}")
            elif analysis.pass_rate > 0.9:
                issues.append(f"–§–∏–ª—å—Ç—Ä {name} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {analysis.pass_rate:.1%}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        for name, analysis in filter_analyses.items():
            if analysis.pass_rate < 0.1:
                recommendations.append(f"–û—Å–ª–∞–±–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä {name}")
            elif analysis.pass_rate > 0.9:
                recommendations.append(f"–£–∂–µ—Å—Ç–æ—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä {name}")
        
        return ComponentAnalysisResult(
            component_name="Filters",
            analysis_data=filter_analyses,
            performance_score=performance_score,
            issues_found=issues,
            recommendations=recommendations,
            charts_generated=charts
        )
    
    async def _create_signal_charts(self, signals_df: pd.DataFrame, 
                                   analyses: Dict[str, SignalAnalysis]) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        
        charts = []
        
        # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üìä –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º
        model_counts = signals_df['model_name'].value_counts()
        axes[0, 0].bar(model_counts.index, model_counts.values, color='skyblue')
        axes[0, 0].set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º')
        axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤')
        axes[0, 0].tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–æ–¥–µ–ª—è–º
        avg_confidence = signals_df.groupby('model_name')['confidence'].mean()
        axes[0, 1].bar(avg_confidence.index, avg_confidence.values, color='lightgreen')
        axes[0, 1].set_title('–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –º–æ–¥–µ–ª—è–º')
        axes[0, 1].set_ylabel('–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
        axes[0, 1].tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
        action_counts = signals_df['action'].value_counts()
        axes[1, 0].pie(action_counts.values, labels=action_counts.index, autopct='%1.1f%%')
        axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π
        bias_scores = [analyses[model].bias_score for model in analyses.keys()]
        model_names = list(analyses.keys())
        colors = ['red' if score < -0.1 else 'green' if score > 0.1 else 'gray' for score in bias_scores]
        axes[1, 1].bar(model_names, bias_scores, color=colors)
        axes[1, 1].set_title('–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π (–ú–µ–¥–≤–µ–∂—å—è ‚Üê ‚Üí –ë—ã—á—å—è)')
        axes[1, 1].set_ylabel('–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å')
        axes[1, 1].axhline(y=0, color='black', linestyle='--', alpha=0.5)
        axes[1, 1].tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        chart_path = f"{self.charts_dir}/signal_analysis.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        charts.append(chart_path)
        
        # 2. –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        fig, ax = plt.subplots(figsize=(15, 8))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
        signals_df['hour'] = pd.to_datetime(signals_df['timestamp']).dt.hour
        hourly_signals = signals_df.groupby(['hour', 'action']).size().unstack(fill_value=0)
        
        hourly_signals.plot(kind='bar', stacked=True, ax=ax, color=['red', 'green', 'gray'])
        ax.set_title('üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫', fontsize=14, fontweight='bold')
        ax.set_xlabel('–ß–∞—Å (UTC)')
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤')
        ax.legend(title='–î–µ–π—Å—Ç–≤–∏–µ')
        
        plt.tight_layout()
        chart_path = f"{self.charts_dir}/signal_timing.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        charts.append(chart_path)
        
        return charts
    
    async def _create_consensus_charts(self, consensus_df: pd.DataFrame, 
                                      analysis: ConsensusAnalysis) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        
        charts = []
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('ü§ù –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_success = consensus_df['consensus_formed'].value_counts()
        axes[0, 0].pie(consensus_success.values, 
                      labels=['–ù–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω', '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω'], 
                      autopct='%1.1f%%',
                      colors=['lightcoral', 'lightgreen'])
        axes[0, 0].set_title('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–ª–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        if analysis.consensus_by_strength:
            strength_data = list(analysis.consensus_by_strength.items())
            strength_data.sort()
            models_count, frequency = zip(*strength_data)
            axes[0, 1].bar(models_count, frequency, color='skyblue')
            axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π')
            axes[0, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π')
            axes[0, 1].set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        if analysis.action_distribution:
            actions = list(analysis.action_distribution.keys())
            counts = list(analysis.action_distribution.values())
            axes[1, 0].bar(actions, counts, color=['red', 'green', 'gray'])
            axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞')
            axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_df['hour'] = pd.to_datetime(consensus_df['timestamp']).dt.hour
        hourly_consensus = consensus_df.groupby('hour')['consensus_formed'].mean()
        axes[1, 1].plot(hourly_consensus.index, hourly_consensus.values, marker='o', color='blue')
        axes[1, 1].set_title('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫')
        axes[1, 1].set_xlabel('–ß–∞—Å (UTC)')
        axes[1, 1].set_ylabel('–î–æ–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–≤')
        axes[1, 1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        chart_path = f"{self.charts_dir}/consensus_analysis.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        charts.append(chart_path)
        
        return charts
    
    async def _create_entry_charts(self, trades_df: pd.DataFrame, 
                                  analysis: EntryExitAnalysis) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ö–æ–¥–æ–≤"""
        
        charts = []
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üìà –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–æ–≤
        success_data = ['–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ', '–£–±—ã—Ç–æ—á–Ω—ã–µ']
        success_counts = [analysis.successful_entries, analysis.total_entries - analysis.successful_entries]
        axes[0, 0].pie(success_counts, labels=success_data, autopct='%1.1f%%', 
                      colors=['lightgreen', 'lightcoral'])
        axes[0, 0].set_title(f'–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–æ–≤ ({analysis.entry_success_rate:.1%})')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
        axes[0, 1].hist(trades_df['holding_time_hours'], bins=20, color='skyblue', alpha=0.7)
        axes[0, 1].axvline(analysis.avg_holding_time, color='red', linestyle='--', 
                          label=f'–°—Ä–µ–¥–Ω–µ–µ: {analysis.avg_holding_time:.1f}—á')
        axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è')
        axes[0, 1].set_xlabel('–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á–∞—Å—ã)')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        axes[0, 1].legend()
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
        trades_df['entry_hour'] = pd.to_datetime(trades_df['entry_time']).dt.hour
        hourly_performance = trades_df.groupby('entry_hour')['pnl'].mean()
        axes[1, 0].bar(hourly_performance.index, hourly_performance.values, 
                      color=['red' if x < 0 else 'green' for x in hourly_performance.values])
        axes[1, 0].set_title('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞')
        axes[1, 0].set_xlabel('–ß–∞—Å –≤—Ö–æ–¥–∞ (UTC)')
        axes[1, 0].set_ylabel('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (USDT)')
        axes[1, 0].axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π vs –ø—Ä–∏–±—ã–ª—å
        axes[1, 1].scatter(trades_df['size'], trades_df['pnl'], alpha=0.6, 
                          c=['red' if x < 0 else 'green' for x in trades_df['pnl']])
        axes[1, 1].set_title('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ vs –ü—Ä–∏–±—ã–ª—å')
        axes[1, 1].set_xlabel('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏')
        axes[1, 1].set_ylabel('–ü—Ä–∏–±—ã–ª—å (USDT)')
        axes[1, 1].axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        plt.tight_layout()
        chart_path = f"{self.charts_dir}/entry_analysis.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        charts.append(chart_path)
        
        return charts
    
    async def _create_exit_charts(self, trades_df: pd.DataFrame, 
                                 analysis: EntryExitAnalysis) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—Ö–æ–¥–æ–≤"""
        
        charts = []
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üìâ –ê–Ω–∞–ª–∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –≤—ã—Ö–æ–¥–∞
        if analysis.exit_reasons:
            reasons = list(analysis.exit_reasons.keys())
            counts = list(analysis.exit_reasons.values())
            axes[0, 0].pie(counts, labels=reasons, autopct='%1.1f%%')
            axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –≤—ã—Ö–æ–¥–∞')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ü—Ä–∏–±—ã–ª—å –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã—Ö–æ–¥–∞
        if analysis.avg_profit_per_exit_reason:
            reasons = list(analysis.avg_profit_per_exit_reason.keys())
            profits = list(analysis.avg_profit_per_exit_reason.values())
            colors = ['red' if p < 0 else 'green' for p in profits]
            axes[0, 1].bar(reasons, profits, color=colors)
            axes[0, 1].set_title('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –≤—ã—Ö–æ–¥–∞')
            axes[0, 1].set_ylabel('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (USDT)')
            axes[0, 1].tick_params(axis='x', rotation=45)
            axes[0, 1].axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ vs –ø—Ä–∏–±—ã–ª—å
        trades_df['exit_hour'] = pd.to_datetime(trades_df['exit_time']).dt.hour
        hourly_exit_performance = trades_df.groupby('exit_hour')['pnl'].mean()
        axes[1, 0].bar(hourly_exit_performance.index, hourly_exit_performance.values,
                      color=['red' if x < 0 else 'green' for x in hourly_exit_performance.values])
        axes[1, 0].set_title('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–∞')
        axes[1, 0].set_xlabel('–ß–∞—Å –≤—ã—Ö–æ–¥–∞ (UTC)')
        axes[1, 0].set_ylabel('–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å (USDT)')
        axes[1, 0].axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        trades_df_sorted = trades_df.sort_values('exit_time')
        cumulative_pnl = trades_df_sorted['pnl'].cumsum()
        axes[1, 1].plot(range(len(cumulative_pnl)), cumulative_pnl, color='blue', linewidth=2)
        axes[1, 1].set_title('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å')
        axes[1, 1].set_xlabel('–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏')
        axes[1, 1].set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å (USDT)')
        axes[1, 1].grid(True, alpha=0.3)
        axes[1, 1].axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        plt.tight_layout()
        chart_path = f"{self.charts_dir}/exit_analysis.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        charts.append(chart_path)
        
        return charts
    
    async def _create_risk_charts(self, trades_df: pd.DataFrame, 
                                 analysis: RiskManagementAnalysis) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–æ–≤"""
        
        charts = []
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('‚öñÔ∏è –ê–Ω–∞–ª–∏–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ TP/SL
        tp_sl_data = ['Take Profit', 'Stop Loss', '–î—Ä—É–≥–∏–µ']
        tp_sl_counts = [
            analysis.take_profit_triggered,
            analysis.stop_loss_triggered,
            analysis.total_trades - analysis.take_profit_triggered - analysis.stop_loss_triggered
        ]
        axes[0, 0].pie(tp_sl_counts, labels=tp_sl_data, autopct='%1.1f%%',
                      colors=['lightgreen', 'lightcoral', 'lightgray'])
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π TP/SL')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L
        axes[0, 1].hist(trades_df['pnl'], bins=20, color='skyblue', alpha=0.7)
        axes[0, 1].axvline(trades_df['pnl'].mean(), color='red', linestyle='--',
                          label=f'–°—Ä–µ–¥–Ω–µ–µ: {trades_df["pnl"].mean():.2f}')
        axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞')
        axes[0, 1].set_xlabel('P&L (USDT)')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        axes[0, 1].axvline(0, color='black', linestyle='-', alpha=0.3)
        axes[0, 1].legend()
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∏—Å–∫ vs –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        wins = trades_df[trades_df['pnl'] > 0]['pnl']
        losses = trades_df[trades_df['pnl'] <= 0]['pnl'].abs()
        
        if not wins.empty and not losses.empty:
            axes[1, 0].scatter([1], [wins.mean()], s=100, color='green', label='–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å')
            axes[1, 0].scatter([1], [losses.mean()], s=100, color='red', label='–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫')
            axes[1, 0].plot([1, 1], [losses.mean(), wins.mean()], 'k--', alpha=0.5)
            axes[1, 0].set_title(f'–†–∏—Å–∫/–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (R/R: {analysis.risk_reward_ratio:.2f})')
            axes[1, 0].set_ylabel('–†–∞–∑–º–µ—Ä (USDT)')
            axes[1, 0].set_xlim(0.5, 1.5)
            axes[1, 0].set_xticks([1])
            axes[1, 0].set_xticklabels(['–°–¥–µ–ª–∫–∏'])
            axes[1, 0].legend()
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π
        axes[1, 1].hist(trades_df['size'], bins=20, color='orange', alpha=0.7)
        axes[1, 1].axvline(trades_df['size'].mean(), color='red', linestyle='--',
                          label=f'–°—Ä–µ–¥–Ω–µ–µ: {trades_df["size"].mean():.4f}')
        axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π')
        axes[1, 1].set_xlabel('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏')
        axes[1, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        axes[1, 1].legend()
        
        plt.tight_layout()
        chart_path = f"{self.charts_dir}/risk_analysis.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        charts.append(chart_path)
        
        return charts
    
    async def _create_filter_charts(self, filter_checks_df: pd.DataFrame, 
                                   analyses: Dict[str, FilterAnalysis]) -> List[str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        
        charts = []
        
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('üîß –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤', fontsize=16, fontweight='bold')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_names = list(analyses.keys())
        pass_rates = [analyses[name].pass_rate * 100 for name in filter_names]
        
        axes[0, 0].bar(filter_names, pass_rates, color='lightblue')
        axes[0, 0].set_title('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤')
        axes[0, 0].set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (%)')
        axes[0, 0].tick_params(axis='x', rotation=45)
        axes[0, 0].axhline(y=50, color='red', linestyle='--', alpha=0.5, label='50%')
        axes[0, 0].legend()
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        total_checks = [analyses[name].total_checks for name in filter_names]
        axes[0, 1].bar(filter_names, total_checks, color='lightgreen')
        axes[0, 1].set_title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º')
        axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫')
        axes[0, 1].tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ vs –ø—Ä–æ–ø—É—Å–∫–∏
        blocked_checks = [analyses[name].blocked_checks for name in filter_names]
        passed_checks = [analyses[name].passed_checks for name in filter_names]
        
        x = np.arange(len(filter_names))
        width = 0.35
        
        axes[1, 0].bar(x - width/2, blocked_checks, width, label='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', color='red', alpha=0.7)
        axes[1, 0].bar(x + width/2, passed_checks, width, label='–ü—Ä–æ–ø—É—â–µ–Ω–æ', color='green', alpha=0.7)
        axes[1, 0].set_title('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ vs –ü—Ä–æ–ø—É—Å–∫–∏')
        axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        axes[1, 0].set_xticks(x)
        axes[1, 0].set_xticklabels(filter_names, rotation=45)
        axes[1, 0].legend()
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if not filter_checks_df.empty:
            filter_checks_df['hour'] = pd.to_datetime(filter_checks_df['timestamp']).dt.hour
            hourly_pass_rate = filter_checks_df.groupby('hour')['passed'].mean()
            axes[1, 1].plot(hourly_pass_rate.index, hourly_pass_rate.values * 100, 
                           marker='o', color='blue')
            axes[1, 1].set_title('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏')
            axes[1, 1].set_xlabel('–ß–∞—Å (UTC)')
            axes[1, 1].set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (%)')
            axes[1, 1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        chart_path = f"{self.charts_dir}/filter_analysis.png"
        plt.savefig(chart_path, dpi=300, bbox_inches='tight')
        plt.close()
        charts.append(chart_path)
        
        return charts
    
    def _calculate_signal_performance_score(self, analyses: Dict[str, SignalAnalysis]) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not analyses:
            return 0
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        avg_confidence = np.mean([a.avg_confidence for a in analyses.values()])
        
        # –ë–∞–ª–∞–Ω—Å —Å–∏–≥–Ω–∞–ª–æ–≤ (–Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ HOLD)
        total_signals = sum(a.total_signals for a in analyses.values())
        total_hold = sum(a.hold_signals for a in analyses.values())
        hold_ratio = total_hold / total_signals if total_signals > 0 else 1
        
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        diversity_score = 1 - abs(0.5 - hold_ratio)  # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ –æ–∫–æ–ª–æ 50% HOLD
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
        score = (avg_confidence * 50 + diversity_score * 50)
        return min(100, max(0, score))
    
    def _calculate_consensus_performance_score(self, analysis: ConsensusAnalysis) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–≤
        base_score = analysis.consensus_rate * 60
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        confidence_bonus = analysis.avg_consensus_confidence * 20 if analysis.avg_consensus_confidence > 0 else 0
        
        # –ë–æ–Ω—É—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –º–æ–¥–µ–ª–µ–π
        participation_bonus = min(20, analysis.avg_models_participating * 5)
        
        score = base_score + confidence_bonus + participation_bonus
        return min(100, max(0, score))
    
    def _identify_signal_issues(self, analyses: Dict[str, SignalAnalysis]) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        issues = []
        
        for model_name, analysis in analyses.items():
            # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            if analysis.avg_confidence < 0.4:
                issues.append(f"–ú–æ–¥–µ–ª—å {model_name}: –Ω–∏–∑–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({analysis.avg_confidence:.2f})")
            
            # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ HOLD —Å–∏–≥–Ω–∞–ª–æ–≤
            hold_ratio = analysis.hold_signals / analysis.total_signals
            if hold_ratio > 0.8:
                issues.append(f"–ú–æ–¥–µ–ª—å {model_name}: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ HOLD —Å–∏–≥–Ω–∞–ª–æ–≤ ({hold_ratio:.1%})")
            
            # –°–∏–ª—å–Ω–∞—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å
            if abs(analysis.bias_score) > 0.5:
                bias_type = "–±—ã—á—å—è" if analysis.bias_score > 0 else "–º–µ–¥–≤–µ–∂—å—è"
                issues.append(f"–ú–æ–¥–µ–ª—å {model_name}: —Å–∏–ª—å–Ω–∞—è {bias_type} —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å ({analysis.bias_score:.2f})")
        
        return issues
    
    def _identify_consensus_issues(self, analysis: ConsensusAnalysis) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –ª–æ–≥–∏–∫–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        issues = []
        
        # –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–≤
        if analysis.consensus_rate < 0.3:
            issues.append(f"–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {analysis.consensus_rate:.1%}")
        
        # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        if analysis.avg_consensus_confidence < 0.5:
            issues.append(f"–ù–∏–∑–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {analysis.avg_consensus_confidence:.2f}")
        
        # –ú–∞–ª–æ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
        if analysis.avg_models_participating < 2:
            issues.append(f"–ú–∞–ª–æ —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ: {analysis.avg_models_participating:.1f}")
        
        return issues
    
    def _generate_signal_recommendations(self, analyses: Dict[str, SignalAnalysis], issues: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        recommendations = []
        
        for model_name, analysis in analyses.items():
            if analysis.avg_confidence < 0.4:
                recommendations.append(f"–ú–æ–¥–µ–ª—å {model_name}: —É–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä–æ–≥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
            
            hold_ratio = analysis.hold_signals / analysis.total_signals
            if hold_ratio > 0.8:
                recommendations.append(f"–ú–æ–¥–µ–ª—å {model_name}: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
            
            if abs(analysis.bias_score) > 0.5:
                recommendations.append(f"–ú–æ–¥–µ–ª—å {model_name}: —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ")
        
        return recommendations
    
    def _generate_consensus_recommendations(self, analysis: ConsensusAnalysis, issues: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        recommendations = []
        
        if analysis.consensus_rate < 0.3:
            recommendations.append("–°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞")
            recommendations.append("–î–æ–±–∞–≤–∏—Ç—å –≤–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–µ–π")
        
        if analysis.avg_consensus_confidence < 0.5:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞")
            recommendations.append("–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        if analysis.avg_models_participating < 2:
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π")
            recommendations.append("–°–Ω–∏–∑–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—á–∞—Å—Ç–∏—é –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ")
        
        return recommendations
    
    async def _generate_summary_report(self, results: Dict[str, ComponentAnalysisResult]):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = f"trading_logic_analysis_report_{timestamp}.txt"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("üîç –û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            total_score = np.mean([r.performance_score for r in results.values()])
            f.write(f"üìä –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´: {total_score:.1f}/100\n\n")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            for component_name, result in results.items():
                f.write(f"üîß {result.component_name.upper()}\n")
                f.write("-" * 30 + "\n")
                f.write(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {result.performance_score:.1f}/100\n")
                
                if result.issues_found:
                    f.write("\n‚ùå –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:\n")
                    for issue in result.issues_found:
                        f.write(f"  ‚Ä¢ {issue}\n")
                
                if result.recommendations:
                    f.write("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")
                    for rec in result.recommendations:
                        f.write(f"  ‚Ä¢ {rec}\n")
                
                if result.charts_generated:
                    f.write("\nüìà –°–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:\n")
                    for chart in result.charts_generated:
                        f.write(f"  ‚Ä¢ {chart}\n")
                
                f.write("\n" + "=" * 50 + "\n\n")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            f.write("üéØ –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´\n")
            f.write("=" * 50 + "\n")
            
            all_issues = []
            for result in results.values():
                all_issues.extend(result.issues_found)
            
            if len(all_issues) > 5:
                f.write("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n")
                f.write("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—ç—Ç–∞–ø–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n")
            elif len(all_issues) > 2:
                f.write("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Ç–æ—á–µ—á–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π\n")
                f.write("‚Ä¢ –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏\n")
            else:
                f.write("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ\n")
                f.write("‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Ç–æ–Ω–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n")
        
        logger.info(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")


class TradingCalibrator:
    """
    ‚öôÔ∏è –ö–ê–õ–ò–ë–†–ê–¢–û–† –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´
    
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    def __init__(self, config: TestConfig, analysis_results: Dict[str, ComponentAnalysisResult]):
        self.config = config
        self.analysis_results = analysis_results
        self.calibration_history = []
        
        logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã")
    
    async def run_auto_calibration(self) -> TestConfig:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
        
        new_config = self._create_config_copy()
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        new_config = await self.calibrate_confidence_thresholds(new_config)
        new_config = await self.calibrate_consensus_rules(new_config)
        new_config = await self.calibrate_filters(new_config)
        new_config = await self.optimize_entry_exit(new_config)
        
        logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        return new_config
    
    def _create_config_copy(self) -> TestConfig:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        return TestConfig(
            test_period_days=self.config.test_period_days,
            start_balance=self.config.start_balance,
            commission_rate=self.config.commission_rate,
            position_size_percent=self.config.position_size_percent,
            min_position_value_usdt=self.config.min_position_value_usdt,
            leverage_multiplier=self.config.leverage_multiplier,
            stop_loss_percent=self.config.stop_loss_percent,
            take_profit_percent=self.config.take_profit_percent,
            use_trailing_stop=self.config.use_trailing_stop,
            trailing_stop_activation_percent=self.config.trailing_stop_activation_percent,
            trailing_stop_distance_percent=self.config.trailing_stop_distance_percent,
            max_hold_hours=self.config.max_hold_hours,
            min_confidence=self.config.min_confidence,
            min_volatility=self.config.min_volatility,
            min_volume_ratio=self.config.min_volume_ratio,
            symbols=self.config.symbols.copy()
        )
    
    async def calibrate_confidence_thresholds(self, config: TestConfig) -> TestConfig:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        
        signal_result = self.analysis_results.get('signal_generation')
        if signal_result and signal_result.performance_score < 60:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            config.min_confidence = min(0.8, config.min_confidence + 0.1)
            logger.info(f"‚öôÔ∏è –£–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ {config.min_confidence}")
        
        return config
    
    async def calibrate_consensus_rules(self, config: TestConfig) -> TestConfig:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        
        consensus_result = self.analysis_results.get('consensus_logic')
        if consensus_result and consensus_result.performance_score < 50:
            # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É
            config.min_confidence = max(0.3, config.min_confidence - 0.05)
            logger.info(f"‚öôÔ∏è –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –¥–æ {config.min_confidence}")
        
        return config
    
    async def calibrate_filters(self, config: TestConfig) -> TestConfig:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        
        filter_result = self.analysis_results.get('filters')
        if filter_result and filter_result.performance_score < 40:
            # –û—Å–ª–∞–±–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            config.min_volatility = max(0, config.min_volatility * 0.8)
            config.min_volume_ratio = max(0, config.min_volume_ratio * 0.8)
            logger.info(f"‚öôÔ∏è –û—Å–ª–∞–±–ª–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å={config.min_volatility}, –æ–±—ä–µ–º={config.min_volume_ratio}")
        
        return config
    
    async def optimize_entry_exit(self, config: TestConfig) -> TestConfig:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞"""
        
        risk_result = self.analysis_results.get('risk_management')
        if risk_result and hasattr(risk_result.analysis_data, 'risk_reward_ratio'):
            rr_ratio = risk_result.analysis_data.risk_reward_ratio
            
            if rr_ratio < 1.5:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º TP –∏ —É–º–µ–Ω—å—à–∞–µ–º SL
                config.take_profit_percent = min(10, config.take_profit_percent * 1.2)
                config.stop_loss_percent = max(1, config.stop_loss_percent * 0.8)
                logger.info(f"‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã TP/SL: TP={config.take_profit_percent}%, SL={config.stop_loss_percent}%")
        
        return config


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    config = TestConfig(
        test_period_days=7,
        start_balance=1000.0,
        commission_rate=0.001,
        position_size_percent=10.0,
        min_position_value_usdt=10.0,
        leverage_multiplier=1.0,
        stop_loss_percent=2.0,
        take_profit_percent=4.0,
        use_trailing_stop=True,
        trailing_stop_activation_percent=1.0,
        trailing_stop_distance_percent=0.5,
        max_hold_hours=24,
        min_confidence=0.6,
        min_volatility=0.01,
        min_volume_ratio=1.2,
        symbols=['BTCUSDT', 'ETHUSDT']
    )
    
    # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    analyzer = TradingLogicAnalyzer(config)
    results = await analyzer.run_full_analysis()
    
    # –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    calibrator = TradingCalibrator(config, results)
    optimized_config = await calibrator.run_auto_calibration()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    config_path = f"optimized_config_{timestamp}.json"
    
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(asdict(optimized_config), f, indent=2, ensure_ascii=False)
    
    logger.info(f"üíæ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_path}")
    
    print("\nüéâ –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò –ó–ê–í–ï–†–®–ï–ù!")
    print(f"üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {np.mean([r.performance_score for r in results.values()]):.1f}/100")
    print(f"üìÑ –û—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: trading_logic_analysis/")
    print(f"‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_path}")


if __name__ == "__main__":
    asyncio.run(main())