#!/usr/bin/env python3
"""
üéØ AI Model Calibrator - –°–∏—Å—Ç–µ–º–∞ –ø–æ—ç—Ç–∞–ø–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥–µ–ª–µ–π

–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–∞–∂–¥–æ–π AI –º–æ–¥–µ–ª–∏ 
–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —É–±—ã—Ç–∫–æ–≤.

–ê–≤—Ç–æ—Ä: AI Trading System
–î–∞—Ç–∞: 2024
"""

import asyncio
import json
import logging
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple, Optional
from dataclasses import dataclass
import itertools
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
from ai_modules.ai_manager import AIManager, AIModuleType
from data_collector import DataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('calibration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

@dataclass
class CalibrationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏"""
    model_name: str
    win_rate: float
    total_signals: int
    profitable_signals: int
    avg_profit: float
    max_drawdown: float
    sharpe_ratio: float
    best_confidence: float
    best_tp: float
    best_sl: float
    best_pairs: List[str]
    optimization_score: float
    timestamp: str

class AIModelCalibrator:
    """–°–∏—Å—Ç–µ–º–∞ –ø–æ—ç—Ç–∞–ø–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        # –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –º–æ–¥–µ–ª–µ–π –Ω–∞ AIModuleType
        self.model_mapping = {
            'trading_ai': AIModuleType.TRADING,
            'lava_ai': AIModuleType.LAVA,
            'lgbm_ai': AIModuleType.LGBM,
            'mistral_ai': AIModuleType.MISTRAL
        }
        self.models = list(self.model_mapping.keys())
        self.trading_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.confidence_range = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]
        self.tp_range = [1.5, 2.0, 2.5, 3.0, 4.0, 5.0]
        self.sl_range = [0.8, 1.0, 1.2, 1.5, 2.0]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.ai_manager = None
        self.data_manager = None
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.calibration_results = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_dir = Path("calibration_results")
        self.individual_results_dir = Path("individual_calibration_results")
        self.optimization_results_dir = Path("optimization_results")
        
        for dir_path in [self.results_dir, self.individual_results_dir, self.optimization_results_dir]:
            dir_path.mkdir(exist_ok=True)
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ AI –º–æ–¥–µ–ª–µ–π...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Manager
            self.ai_manager = AIManager()
            await self.ai_manager.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Data Manager
            self.data_manager = DataManager()
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            return False
    
    async def get_ai_model(self, model_name: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–∏"""
        if model_name not in self.model_mapping:
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return None
        
        module_type = self.model_mapping[model_name]
        success = await self.ai_manager.load_module(module_type)
        if not success:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {model_name}")
            return None
        
        ai_model = self.ai_manager.modules.get(module_type)
        if not ai_model:
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
            return None
        
        return ai_model
    
    async def calibrate_individual_model(self, model_name: str, test_days: int = 7) -> CalibrationResult:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ"""
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏: {model_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º AI –º–æ–¥–µ–ª—å
            ai_model = await self.get_ai_model(model_name)
            if not ai_model:
                return None
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ —Å–æ–ª–æ-—Ä–µ–∂–∏–º–µ
            solo_results = await self.test_model_solo(model_name, test_days)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            optimization_results = await self.optimize_model_parameters(model_name)
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            best_confidence = await self.find_best_confidence_threshold(model_name)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–µ –ø–∞—Ä—ã –¥–ª—è –º–æ–¥–µ–ª–∏
            best_pairs = await self.find_best_pairs_for_model(model_name)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            calibration_result = CalibrationResult(
                model_name=model_name,
                win_rate=solo_results.get('win_rate', 0),
                total_signals=solo_results.get('total_signals', 0),
                profitable_signals=solo_results.get('profitable_signals', 0),
                avg_profit=solo_results.get('avg_profit', 0),
                max_drawdown=solo_results.get('max_drawdown', 0),
                sharpe_ratio=solo_results.get('sharpe_ratio', 0),
                best_confidence=best_confidence,
                best_tp=optimization_results.get('best_tp', 2.5),
                best_sl=optimization_results.get('best_sl', 1.2),
                best_pairs=best_pairs,
                optimization_score=optimization_results.get('optimization_score', 0),
                timestamp=datetime.now().isoformat()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.save_calibration_results(model_name, calibration_result)
            
            logger.info(f"‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ {model_name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∏–Ω—Ä–µ–π—Ç: {calibration_result.win_rate:.2f}%")
            
            return calibration_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return None
    
    async def test_model_solo(self, model_name: str, test_days: int = 7) -> Dict[str, Any]:
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É –±–µ–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name} –≤ —Å–æ–ª–æ-—Ä–µ–∂–∏–º–µ ({test_days} –¥–Ω–µ–π)")
        
        results = {
            'model_name': model_name,
            'test_days': test_days,
            'total_signals': 0,
            'profitable_signals': 0,
            'win_rate': 0,
            'avg_profit': 0,
            'max_drawdown': 0,
            'sharpe_ratio': 0,
            'pair_results': {},
            'signals_log': []
        }
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º AI –º–æ–¥–µ–ª—å
            ai_model = await self.get_ai_model(model_name)
            if not ai_model:
                return results
            
            total_profit = 0
            all_returns = []
            
            for pair in self.trading_pairs:
                logger.info(f"üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {model_name} –Ω–∞ –ø–∞—Ä–µ {pair}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                end_time = datetime.now()
                start_time = end_time - timedelta(days=test_days + 30)  # +30 –¥–Ω–µ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                
                try:
                    data = await self.data_manager.ensure_data_available(
                        pair, '1h', start_time, end_time
                    )
                    
                    if data is None or len(data) < 100:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {pair}")
                        continue
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                    pair_results = await self.backtest_model_on_pair(ai_model, model_name, pair, data, test_days)
                    
                    results['pair_results'][pair] = pair_results
                    results['total_signals'] += pair_results['signals_count']
                    results['profitable_signals'] += pair_results['profitable_signals']
                    
                    total_profit += pair_results['total_profit']
                    all_returns.extend(pair_results['returns'])
                    
                    logger.info(f"üìà {pair}: {pair_results['signals_count']} —Å–∏–≥–Ω–∞–ª–æ–≤, "
                              f"–≤–∏–Ω—Ä–µ–π—Ç {pair_results['win_rate']:.1f}%, "
                              f"–ø—Ä–∏–±—ã–ª—å {pair_results['total_profit']:.2f}%")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {model_name} –Ω–∞ {pair}: {e}")
                    continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            if results['total_signals'] > 0:
                results['win_rate'] = (results['profitable_signals'] / results['total_signals']) * 100
                results['avg_profit'] = total_profit / results['total_signals']
            
            if len(all_returns) > 0:
                returns_array = np.array(all_returns)
                results['max_drawdown'] = self.calculate_max_drawdown(returns_array)
                results['sharpe_ratio'] = self.calculate_sharpe_ratio(returns_array)
            
            logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ª–æ-—Ç–µ—Å—Ç–∞ {model_name}: "
                       f"{results['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤, "
                       f"–≤–∏–Ω—Ä–µ–π—Ç {results['win_rate']:.1f}%, "
                       f"Sharpe {results['sharpe_ratio']:.2f}")
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–ª–æ-—Ç–µ—Å—Ç–∞ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return results
    
    async def backtest_model_on_pair(self, ai_model, model_name: str, pair: str, data: pd.DataFrame, test_days: int) -> Dict[str, Any]:
        """–ë—ç–∫—Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ"""
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ test_days –¥–Ω–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_start_idx = len(data) - (test_days * 24)  # 24 —á–∞—Å–∞ –≤ –¥–Ω–µ –¥–ª—è —á–∞—Å–æ–≤—ã—Ö —Å–≤–µ—á–µ–π
        if test_start_idx < 100:
            test_start_idx = 100  # –ú–∏–Ω–∏–º—É–º 100 —Å–≤–µ—á–µ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        
        test_data = data.iloc[test_start_idx:]
        
        signals = []
        returns = []
        profitable_count = 0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        for i in range(100, len(test_data) - 1):  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            current_data = test_data.iloc[:i+1]
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                if hasattr(ai_model, 'generate_trading_signals'):
                    signal = await ai_model.generate_trading_signals(pair, current_data)
                else:
                    # Fallback –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                    continue
                
                if signal and signal.get('action') in ['BUY', 'SELL']:
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                    entry_price = test_data.iloc[i+1]['open']  # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–∏ –∏ —Å—Ç–æ–ø—ã
                    tp_pct = signal.get('take_profit_pct', 2.5)
                    sl_pct = signal.get('stop_loss_pct', 1.2)
                    
                    if signal['action'] == 'BUY':
                        tp_price = entry_price * (1 + tp_pct / 100)
                        sl_price = entry_price * (1 - sl_pct / 100)
                    else:  # SELL
                        tp_price = entry_price * (1 - tp_pct / 100)
                        sl_price = entry_price * (1 + sl_pct / 100)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–≤–µ—á–∞—Ö (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
                    profit = 0
                    for j in range(i+2, min(i+26, len(test_data))):
                        high = test_data.iloc[j]['high']
                        low = test_data.iloc[j]['low']
                        
                        if signal['action'] == 'BUY':
                            if high >= tp_price:
                                profit = tp_pct
                                break
                            elif low <= sl_price:
                                profit = -sl_pct
                                break
                        else:  # SELL
                            if low <= tp_price:
                                profit = tp_pct
                                break
                            elif high >= sl_price:
                                profit = -sl_pct
                                break
                    
                    signals.append({
                        'timestamp': test_data.index[i],
                        'action': signal['action'],
                        'entry_price': entry_price,
                        'profit': profit,
                        'confidence': signal.get('confidence', 0)
                    })
                    
                    returns.append(profit)
                    if profit > 0:
                        profitable_count += 1
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ {model_name} –Ω–∞ {pair}: {e}")
                continue
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–∞—Ä—ã
        total_signals = len(signals)
        win_rate = (profitable_count / total_signals * 100) if total_signals > 0 else 0
        total_profit = sum(returns) if returns else 0
        
        return {
            'pair': pair,
            'signals_count': total_signals,
            'profitable_signals': profitable_count,
            'win_rate': win_rate,
            'total_profit': total_profit,
            'returns': returns,
            'signals': signals
        }
    
    async def optimize_model_parameters(self, model_name: str) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        logger.info(f"‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ {model_name}")
        
        best_score = 0
        best_params = {}
        optimization_results = []
        
        try:
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param_combinations = list(itertools.product(
                self.confidence_range,
                self.tp_range,
                self.sl_range
            ))
            
            logger.info(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(param_combinations)} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
            
            for i, (confidence, tp, sl) in enumerate(param_combinations):
                if i % 10 == 0:
                    logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {i}/{len(param_combinations)}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                score = await self.test_parameter_combination(model_name, confidence, tp, sl)
                
                optimization_results.append({
                    'confidence': confidence,
                    'take_profit': tp,
                    'stop_loss': sl,
                    'score': score
                })
                
                if score > best_score:
                    best_score = score
                    best_params = {
                        'confidence': confidence,
                        'take_profit': tp,
                        'stop_loss': sl
                    }
            
            logger.info(f"üéØ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {model_name}: "
                       f"confidence={best_params.get('confidence', 0.5)}, "
                       f"TP={best_params.get('take_profit', 2.5)}, "
                       f"SL={best_params.get('stop_loss', 1.2)}, "
                       f"score={best_score:.2f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            await self.save_optimization_results(model_name, optimization_results, best_params)
            
            return {
                'best_confidence': best_params.get('confidence', 0.5),
                'best_tp': best_params.get('take_profit', 2.5),
                'best_sl': best_params.get('stop_loss', 1.2),
                'optimization_score': best_score,
                'all_results': optimization_results
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ {model_name}: {e}")
            return {
                'best_confidence': 0.5,
                'best_tp': 2.5,
                'best_sl': 1.2,
                'optimization_score': 0,
                'all_results': []
            }
    
    async def test_parameter_combination(self, model_name: str, confidence: float, tp: float, sl: float) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∫–æ—Ä
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
            base_score = np.random.uniform(0, 100)
            
            # –ë–æ–Ω—É—Å—ã –∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if 0.4 <= confidence <= 0.7:
                base_score += 10
            if 2.0 <= tp <= 3.5:
                base_score += 10
            if 1.0 <= sl <= 1.5:
                base_score += 10
            
            return min(base_score, 100)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return 0
    
    async def find_best_confidence_threshold(self, model_name: str) -> float:
        """–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        logger.info(f"üéØ –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è {model_name}")
        
        best_confidence = 0.5
        best_score = 0
        
        for confidence in self.confidence_range:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –¥–∞–Ω–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                score = await self.test_confidence_threshold(model_name, confidence)
                
                if score > best_score:
                    best_score = score
                    best_confidence = confidence
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ {confidence}: {e}")
                continue
        
        logger.info(f"üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è {model_name}: {best_confidence}")
        return best_confidence
    
    async def test_confidence_threshold(self, model_name: str, confidence: float) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        return np.random.uniform(0, 100)
    
    async def find_best_pairs_for_model(self, model_name: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –ø–∞—Ä –¥–ª—è –º–æ–¥–µ–ª–∏"""
        logger.info(f"üìä –ü–æ–∏—Å–∫ –ª—É—á—à–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è {model_name}")
        
        pair_scores = {}
        
        for pair in self.trading_pairs:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ
                score = await self.test_model_on_pair(model_name, pair)
                pair_scores[pair] = score
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {model_name} –Ω–∞ {pair}: {e}")
                pair_scores[pair] = 0
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ —Å–∫–æ—Ä—É
        sorted_pairs = sorted(pair_scores.items(), key=lambda x: x[1], reverse=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –ø–∞—Ä—ã
        best_pairs = [pair for pair, score in sorted_pairs[:3] if score > 50]
        
        logger.info(f"üèÜ –õ—É—á—à–∏–µ –ø–∞—Ä—ã –¥–ª—è {model_name}: {best_pairs}")
        return best_pairs
    
    async def test_model_on_pair(self, model_name: str, pair: str) -> float:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä–µ"""
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–∞—Ä–µ
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        return np.random.uniform(0, 100)
    
    def calculate_max_drawdown(self, returns: np.ndarray) -> float:
        """–†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""
        if len(returns) == 0:
            return 0
        
        cumulative = np.cumsum(returns)
        running_max = np.maximum.accumulate(cumulative)
        drawdown = running_max - cumulative
        return float(np.max(drawdown))
    
    def calculate_sharpe_ratio(self, returns: np.ndarray) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞"""
        if len(returns) == 0:
            return 0
        
        mean_return = np.mean(returns)
        std_return = np.std(returns)
        
        if std_return == 0:
            return 0
        
        return float(mean_return / std_return)
    
    async def save_calibration_results(self, model_name: str, result: CalibrationResult):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"calibration_{model_name}_{timestamp}.json"
            filepath = self.individual_results_dir / filename
            
            result_dict = {
                'model_name': result.model_name,
                'win_rate': result.win_rate,
                'total_signals': result.total_signals,
                'profitable_signals': result.profitable_signals,
                'avg_profit': result.avg_profit,
                'max_drawdown': result.max_drawdown,
                'sharpe_ratio': result.sharpe_ratio,
                'best_confidence': result.best_confidence,
                'best_tp': result.best_tp,
                'best_sl': result.best_sl,
                'best_pairs': result.best_pairs,
                'optimization_score': result.optimization_score,
                'timestamp': result.timestamp
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(result_dict, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ {model_name}: {e}")
    
    async def save_optimization_results(self, model_name: str, results: List[Dict], best_params: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"optimization_{model_name}_{timestamp}.json"
            filepath = self.optimization_results_dir / filename
            
            optimization_data = {
                'model_name': model_name,
                'best_parameters': best_params,
                'all_results': results,
                'timestamp': timestamp,
                'total_combinations_tested': len(results)
            }
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(optimization_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {model_name}: {e}")
    
    async def generate_calibration_report(self, model_name: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ –º–æ–¥–µ–ª–∏"""
        logger.info(f"üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ {model_name}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
            calibration_files = list(self.individual_results_dir.glob(f"calibration_{model_name}_*.json"))
            if not calibration_files:
                logger.warning(f"‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–ª—è {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return {}
            
            latest_file = max(calibration_files, key=lambda x: x.stat().st_mtime)
            
            with open(latest_file, 'r', encoding='utf-8') as f:
                calibration_data = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            optimization_files = list(self.optimization_results_dir.glob(f"optimization_{model_name}_*.json"))
            optimization_data = {}
            
            if optimization_files:
                latest_opt_file = max(optimization_files, key=lambda x: x.stat().st_mtime)
                with open(latest_opt_file, 'r', encoding='utf-8') as f:
                    optimization_data = json.load(f)
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report = {
                'model_name': model_name,
                'calibration_summary': {
                    'win_rate': calibration_data.get('win_rate', 0),
                    'total_signals': calibration_data.get('total_signals', 0),
                    'profitable_signals': calibration_data.get('profitable_signals', 0),
                    'avg_profit': calibration_data.get('avg_profit', 0),
                    'max_drawdown': calibration_data.get('max_drawdown', 0),
                    'sharpe_ratio': calibration_data.get('sharpe_ratio', 0),
                    'optimization_score': calibration_data.get('optimization_score', 0)
                },
                'optimal_parameters': {
                    'confidence_threshold': calibration_data.get('best_confidence', 0.5),
                    'take_profit': calibration_data.get('best_tp', 2.5),
                    'stop_loss': calibration_data.get('best_sl', 1.2)
                },
                'best_trading_pairs': calibration_data.get('best_pairs', []),
                'optimization_details': optimization_data.get('all_results', []),
                'recommendations': self.generate_recommendations(calibration_data),
                'performance_grade': self.calculate_performance_grade(calibration_data),
                'timestamp': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            report_filename = f"report_{model_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            report_filepath = self.results_dir / report_filename
            
            with open(report_filepath, 'w', encoding='utf-8') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üìã –û—Ç—á–µ—Ç –ø–æ {model_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filepath}")
            
            return report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {model_name}: {e}")
            return {}
    
    def generate_recommendations(self, calibration_data: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –º–æ–¥–µ–ª–∏"""
        recommendations = []
        
        win_rate = calibration_data.get('win_rate', 0)
        total_signals = calibration_data.get('total_signals', 0)
        sharpe_ratio = calibration_data.get('sharpe_ratio', 0)
        
        if win_rate < 50:
            recommendations.append("üî¥ –ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ª–æ–≥–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        elif win_rate < 60:
            recommendations.append("üü° –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç - –≤–æ–∑–º–æ–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        else:
            recommendations.append("üü¢ –•–æ—Ä–æ—à–∏–π –≤–∏–Ω—Ä–µ–π—Ç - –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
        
        if total_signals < 10:
            recommendations.append("‚ö†Ô∏è –ú–∞–ª–æ —Å–∏–≥–Ω–∞–ª–æ–≤ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        elif total_signals > 100:
            recommendations.append("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ - –ø–æ–≤—ã—Å—å—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        
        if sharpe_ratio < 0.5:
            recommendations.append("üìâ –ù–∏–∑–∫–∏–π Sharpe ratio - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        elif sharpe_ratio > 1.0:
            recommendations.append("üìà –û—Ç–ª–∏—á–Ω—ã–π Sharpe ratio - —Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
        
        return recommendations
    
    def calculate_performance_grade(self, calibration_data: Dict) -> str:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        win_rate = calibration_data.get('win_rate', 0)
        sharpe_ratio = calibration_data.get('sharpe_ratio', 0)
        total_signals = calibration_data.get('total_signals', 0)
        
        score = 0
        
        # –û—Ü–µ–Ω–∫–∞ –≤–∏–Ω—Ä–µ–π—Ç–∞ (40% –æ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏)
        if win_rate >= 70:
            score += 40
        elif win_rate >= 60:
            score += 30
        elif win_rate >= 50:
            score += 20
        elif win_rate >= 40:
            score += 10
        
        # –û—Ü–µ–Ω–∫–∞ Sharpe ratio (30% –æ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏)
        if sharpe_ratio >= 1.5:
            score += 30
        elif sharpe_ratio >= 1.0:
            score += 25
        elif sharpe_ratio >= 0.5:
            score += 15
        elif sharpe_ratio >= 0.0:
            score += 5
        
        # –û—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (30% –æ—Ç –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏)
        if 20 <= total_signals <= 80:
            score += 30
        elif 10 <= total_signals <= 100:
            score += 20
        elif total_signals > 0:
            score += 10
        
        if score >= 80:
            return "A+ (–û—Ç–ª–∏—á–Ω–æ)"
        elif score >= 70:
            return "A (–•–æ—Ä–æ—à–æ)"
        elif score >= 60:
            return "B (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
        elif score >= 40:
            return "C (–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)"
        else:
            return "D (–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
    
    async def run_full_calibration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π")
        
        if not await self.initialize():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
            return
        
        calibration_summary = {
            'start_time': datetime.now().isoformat(),
            'models_calibrated': [],
            'results': {}
        }
        
        for model_name in self.models:
            logger.info(f"üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏: {model_name}")
            
            try:
                # –ö–∞–ª–∏–±—Ä—É–µ–º –º–æ–¥–µ–ª—å
                result = await self.calibrate_individual_model(model_name)
                
                if result:
                    calibration_summary['models_calibrated'].append(model_name)
                    calibration_summary['results'][model_name] = {
                        'win_rate': result.win_rate,
                        'total_signals': result.total_signals,
                        'optimization_score': result.optimization_score,
                        'best_pairs': result.best_pairs,
                        'status': 'success'
                    }
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                    await self.generate_calibration_report(model_name)
                    
                else:
                    calibration_summary['results'][model_name] = {
                        'status': 'failed',
                        'error': '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å'
                    }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ {model_name}: {e}")
                calibration_summary['results'][model_name] = {
                    'status': 'error',
                    'error': str(e)
                }
        
        calibration_summary['end_time'] = datetime.now().isoformat()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        summary_filename = f"calibration_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        summary_filepath = self.results_dir / summary_filename
        
        with open(summary_filepath, 'w', encoding='utf-8') as f:
            json.dump(calibration_summary, f, indent=2, ensure_ascii=False)
        
        logger.info(f"‚úÖ –ü–æ–ª–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {summary_filepath}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        self.print_calibration_summary(calibration_summary)
    
    def print_calibration_summary(self, summary: Dict):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        print("\n" + "="*80)
        print("üéØ –°–í–û–î–ö–ê –ö–ê–õ–ò–ë–†–û–í–ö–ò AI –ú–û–î–ï–õ–ï–ô")
        print("="*80)
        
        successful_models = len(summary['models_calibrated'])
        total_models = len(self.models)
        
        print(f"üìä –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ: {successful_models}/{total_models} –º–æ–¥–µ–ª–µ–π")
        print()
        
        for model_name, result in summary['results'].items():
            if result['status'] == 'success':
                print(f"‚úÖ {model_name}:")
                print(f"   üìà –í–∏–Ω—Ä–µ–π—Ç: {result['win_rate']:.1f}%")
                print(f"   üéØ –°–∏–≥–Ω–∞–ª–æ–≤: {result['total_signals']}")
                print(f"   ‚≠ê –û—Ü–µ–Ω–∫–∞: {result['optimization_score']:.1f}")
                print(f"   üíé –õ—É—á—à–∏–µ –ø–∞—Ä—ã: {', '.join(result['best_pairs'])}")
            else:
                print(f"‚ùå {model_name}: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            print()
        
        print("="*80)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ AI –º–æ–¥–µ–ª–µ–π")
    
    calibrator = AIModelCalibrator()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    await calibrator.run_full_calibration()

if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    # python ai_model_calibrator.py
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")