#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Å–∞–º–±–ª—è AI –º–æ–¥–µ–ª–µ–π
Peper Binance v4 - –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
"""

import asyncio
import logging
import sys
import json
from pathlib import Path
from datetime import datetime, timedelta
import pandas as pd
from typing import Dict, List, Optional
from utils.timezone_utils import get_utc_now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(f'scalping_system_{get_utc_now().strftime("%Y%m%d_%H%M%S")}.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã
try:
    from scalping_ensemble_system import ScalpingEnsembleSystem, ScalpingSignal, MarketPhase
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ScalpingEnsembleSystem: {e}")
    sys.exit(1)

class ScalpingSystemRunner:
    """–ó–∞–ø—É—Å–∫–∞—Ç–µ–ª—å —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, config_path: str = "scalping_config.json"):
        self.config_path = config_path
        self.config = self._load_config()
        self.scalping_system = ScalpingEnsembleSystem()
        self.active_trades = {}
        self.daily_stats = {
            'trades': 0,
            'wins': 0,
            'losses': 0,
            'total_profit': 0.0,
            'start_time': get_utc_now()
        }
        
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    async def run_live_scalping(self, symbols: List[str], duration_hours: int = 1):
        """–ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞"""
        
        print("üöÄ –ó–ê–ü–£–°–ö –ì–ò–ë–†–ò–î–ù–û–ô –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–°–¢–ï–ú–´")
        print("="*60)
        print(f"üéØ –¶–µ–ª—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π Binance")
        print(f"ü§ñ AI –ö–æ–º–∞–Ω–¥–∞: LGBM + Lava + Mistral + Trading AI")
        print(f"üìä –°–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
        print(f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å(–æ–≤)")
        print("="*60)
        
        start_time = get_utc_now()
        end_time = start_time + timedelta(hours=duration_hours)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        while get_utc_now() < end_time:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
                for symbol in symbols:
                    await self._process_symbol(symbol)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
                await self._check_active_trades()
                
                # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
                if get_utc_now().minute % 10 == 0:
                    self._print_stats()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (30 —Å–µ–∫—É–Ω–¥)
                await asyncio.sleep(30)
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º...")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await self._print_final_stats()
    
    async def _process_symbol(self, symbol: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
            if not self._check_trading_limits():
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            signal = await self.scalping_system.generate_scalping_signal(symbol, '1m')
            
            if signal and signal.action in ['BUY', 'SELL']:
                logger.info(f"üéØ –°–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {signal.action} "
                          f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.1%}, "
                          f"–ø—Ä–∏–±—ã–ª—å: {signal.expected_profit_after_fees:.2f} –ø–∏–ø—Å–æ–≤)")
                
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ API –±–∏—Ä–∂–∏
                await self._simulate_trade(symbol, signal)
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")
    
    async def _simulate_trade(self, symbol: str, signal: ScalpingSignal):
        """–°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –≤—ã–∑–æ–≤ API –±–∏—Ä–∂–∏)"""
        
        trade_id = f"{symbol}_{get_utc_now().strftime('%H%M%S')}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        self.active_trades[trade_id] = {
            'symbol': symbol,
            'signal': signal,
            'entry_time': get_utc_now(),
            'status': 'active'
        }
        
        print(f"üìà –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê: {trade_id}")
        print(f"   –°–∏–º–≤–æ–ª: {symbol}")
        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {signal.action}")
        print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${signal.entry_price:.4f}")
        print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: ${signal.stop_loss:.4f}")
        print(f"   –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${signal.take_profit:.4f}")
        print(f"   –§–∞–∑–∞ —Ä—ã–Ω–∫–∞: {signal.market_phase.value}")
        print(f"   AI –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {signal.ai_consensus}")
        print()
    
    async def _check_active_trades(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        
        completed_trades = []
        
        for trade_id, trade_info in self.active_trades.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–¥–µ–ª–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞)
            if get_utc_now() - trade_info['entry_time'] > timedelta(minutes=5):
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É
                await self._close_trade(trade_id, 'timeout')
                completed_trades.append(trade_id)
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        for trade_id in completed_trades:
            del self.active_trades[trade_id]
    
    async def _close_trade(self, trade_id: str, reason: str):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏"""
        
        trade_info = self.active_trades[trade_id]
        signal = trade_info['signal']
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –ø–æ–ª—É—á–∞–µ–º —Å –±–∏—Ä–∂–∏)
        import random
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è: 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        is_profitable = random.random() < 0.7
        
        if is_profitable:
            profit_pips = signal.expected_profit_after_fees
            self.daily_stats['wins'] += 1
            result_emoji = "‚úÖ"
        else:
            profit_pips = -self.config['risk_management']['stop_loss_pips']
            self.daily_stats['losses'] += 1
            result_emoji = "‚ùå"
        
        self.daily_stats['trades'] += 1
        self.daily_stats['total_profit'] += profit_pips
        
        print(f"{result_emoji} –°–î–ï–õ–ö–ê –ó–ê–ö–†–´–¢–ê: {trade_id}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {profit_pips:+.2f} –ø–∏–ø—Å–æ–≤")
        print(f"   –í—Ä–µ–º—è: {get_utc_now() - trade_info['entry_time']}")
        print()
    
    def _check_trading_limits(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≤ —á–∞—Å
        trades_per_hour = self.config['trading_parameters']['max_trades_per_hour']
        if len(self.active_trades) >= trades_per_hour:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if self.daily_stats['trades'] >= self.config['trading_parameters']['max_trades_per_day']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
        max_daily_loss = self.config['risk_management']['max_daily_loss_pct'] * 100
        if self.daily_stats['total_profit'] < -max_daily_loss:
            logger.warning("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –¥–Ω–µ–≤–Ω—ã—Ö –ø–æ—Ç–µ—Ä—å!")
            return False
        
        return True
    
    def _print_stats(self):
        """–í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if self.daily_stats['trades'] == 0:
            return
        
        winrate = self.daily_stats['wins'] / self.daily_stats['trades']
        runtime = get_utc_now() - self.daily_stats['start_time']
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({runtime}):")
        print(f"   –°–¥–µ–ª–æ–∫: {self.daily_stats['trades']}")
        print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.daily_stats['wins']}")
        print(f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö: {self.daily_stats['losses']}")
        print(f"   –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1%}")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {self.daily_stats['total_profit']:+.2f} –ø–∏–ø—Å–æ–≤")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(self.active_trades)}")
        print("-" * 40)
    
    async def _print_final_stats(self):
        """–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        
        print("\n" + "="*60)
        print("üèÅ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–°–¢–ï–ú–´")
        print("="*60)
        
        if self.daily_stats['trades'] > 0:
            winrate = self.daily_stats['wins'] / self.daily_stats['trades']
            avg_profit = self.daily_stats['total_profit'] / self.daily_stats['trades']
            
            print(f"üìà –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {self.daily_stats['trades']}")
            print(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {self.daily_stats['wins']}")
            print(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {self.daily_stats['losses']}")
            print(f"üéØ –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1%}")
            print(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {self.daily_stats['total_profit']:+.2f} –ø–∏–ø—Å–æ–≤")
            print(f"üìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:+.2f} –ø–∏–ø—Å–æ–≤/—Å–¥–µ–ª–∫–∞")
            
            # –û—Ü–µ–Ω–∫–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
            total_fees = self.daily_stats['trades'] * 2 * 0.1  # 0.1% * 2 (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥)
            net_profit = self.daily_stats['total_profit'] - total_fees
            print(f"üí∏ –ö–æ–º–∏—Å—Å–∏–∏: -{total_fees:.2f} –ø–∏–ø—Å–æ–≤")
            print(f"üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_profit:+.2f} –ø–∏–ø—Å–æ–≤")
            
            if winrate >= 0.75:
                print("üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –í–∏–Ω—Ä–µ–π—Ç 75%+")
            else:
                print("‚ö†Ô∏è  –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        else:
            print("‚ùå –°–¥–µ–ª–æ–∫ –Ω–µ –±—ã–ª–æ")
        
        print("="*60)
    
    async def run_training_mode(self):
        """–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π"""
        
        print("\nüéì –†–ï–ñ–ò–ú –û–ë–£–ß–ï–ù–ò–Ø AI –ú–û–î–ï–õ–ï–ô")
        print("="*50)
        print("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
        print("1. üß† Trading AI - –ë—ã—Å—Ç—Ä—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è")
        print("2. üåü LGBM AI - –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –±—É—Å—Ç–∏–Ω–≥")
        print("3. üî• Lava AI - –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        print("4. üéØ Mistral AI - –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        print("5. üöÄ –í—Å–µ –º–æ–¥–µ–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
        print("="*50)
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (1-5): ").strip()
            
            if choice == "1":
                await self._train_trading_ai()
            elif choice == "2":
                await self._train_lgbm_ai()
            elif choice == "3":
                await self._train_lava_ai()
            elif choice == "4":
                await self._train_mistral_ai()
            elif choice == "5":
                await self._train_all_models()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è  –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def _train_trading_ai(self):
        """–û–±—É—á–µ–Ω–∏–µ Trading AI"""
        print("\nüß† –û–ë–£–ß–ï–ù–ò–ï TRADING AI")
        print("-" * 30)
        
        try:
            # –ò–º–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–µ—Ä–∞
            from trading_ai_trainer import TradingAITrainer
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
            symbol = input("–°–∏–º–≤–æ–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (BTCUSDT): ").strip() or "BTCUSDT"
            days = int(input("–î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (365): ") or "365")
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ Trading AI –¥–ª—è {symbol} –∑–∞ {days} –¥–Ω–µ–π...")
            
            trainer = TradingAITrainer(symbol)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            data = await trainer.load_market_data(days)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            print("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
            features_df = trainer.prepare_features(data)
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏
            print("üè∑Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫...")
            labels, features_df = trainer.create_labels(data, features_df)
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
            print("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
            results = trainer.train_models(features_df, labels)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏
            print("üìà –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π...")
            evaluation = trainer.evaluate_model(results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            trainer.save_model()
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ Trading AI –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {evaluation.get('best_model', 'N/A')}")
            print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {evaluation.get('best_score', 0):.4f}")
            print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: models/trading_ai/{symbol}_trading_model.joblib")
            
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª trading_ai_trainer.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è Trading AI: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _train_trading_ai: {e}", exc_info=True)
    
    async def _train_lgbm_ai(self):
        """–û–±—É—á–µ–Ω–∏–µ LGBM AI"""
        print("\nüåü –û–ë–£–ß–ï–ù–ò–ï LGBM AI")
        print("-" * 30)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º AI –º–æ–¥—É–ª—å
            lgbm_ai = self.scalping_system.ai_manager.models.get('lgbm_ai')
            if not lgbm_ai:
                print("‚ùå LGBM AI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
            symbols = input("–°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (BTCUSDT,ETHUSDT): ").strip() or "BTCUSDT,ETHUSDT"
            symbols = [s.strip() for s in symbols.split(",")]
            
            days = int(input("–î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (90): ") or "90")
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ LGBM AI –Ω–∞ {symbols} –∑–∞ {days} –¥–Ω–µ–π...")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            from data_collector import BinanceDataCollector
            
            all_data = []
            async with BinanceDataCollector() as collector:
                for symbol in symbols:
                    data = await collector.get_historical_data(symbol, "1h", days)
                    if data is not None and len(data) > 0:
                        all_data.append(data)
            
            if not all_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_data = pd.concat(all_data, ignore_index=True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–∫–∏
            X = combined_data[['open', 'high', 'low', 'close', 'volume']].copy()
            y = (combined_data['close'].shift(-1) > combined_data['close']).astype(int)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (–Ω–µ—Ç –±—É–¥—É—â–µ–π —Ü–µ–Ω—ã)
            X = X[:-1]
            y = y[:-1]
            
            # –û–±—É—á–µ–Ω–∏–µ
            results = await lgbm_ai.train_model("scalping_model", X, y, "classification")
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ LGBM AI –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {results}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è LGBM AI: {e}")
    
    async def _train_lava_ai(self):
        """–û–±—É—á–µ–Ω–∏–µ Lava AI"""
        print("\nüî• –û–ë–£–ß–ï–ù–ò–ï LAVA AI")
        print("-" * 30)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º AI –º–æ–¥—É–ª—å
            lava_ai = self.scalping_system.ai_manager.models.get('lava_ai')
            if not lava_ai:
                print("‚ùå Lava AI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
            symbols = input("–°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (BTCUSDT,ETHUSDT): ").strip() or "BTCUSDT,ETHUSDT"
            symbols = [s.strip() for s in symbols.split(",")]
            
            days = int(input("–î–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (90): ") or "90")
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ Lava AI –Ω–∞ {symbols} –∑–∞ {days} –¥–Ω–µ–π...")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            from data_collector import BinanceDataCollector
            
            all_data = []
            async with BinanceDataCollector() as collector:
                for symbol in symbols:
                    print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
                    data = await collector.get_historical_data(symbol, "1h", days)
                    if data is not None and len(data) > 0:
                        print(f"‚úÖ {symbol}: {len(data)} —Å–≤–µ—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
                        all_data.append(data)
            
            if not all_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_data = pd.concat(all_data, ignore_index=True)
            print(f"üìà –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: {len(combined_data)} —Å–≤–µ—á–µ–π")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ –º–µ—Ç–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            X = combined_data[['open', 'high', 'low', 'close', 'volume']].copy()
            y = (combined_data['close'].shift(-1) > combined_data['close']).astype(int)
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (–Ω–µ—Ç –±—É–¥—É—â–µ–π —Ü–µ–Ω—ã)
            X = X[:-1]
            y = y[:-1]
            
            print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lava AI –º–æ–¥—É–ª—è...")
            await lava_ai.initialize()
            
            print("üî• –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
            # –û–±—É—á–µ–Ω–∏–µ
            results = await lava_ai.train_model("scalping_pattern_model", X, y, "pattern_analysis")
            
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ Lava AI –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            print(f"   ‚Ä¢ –ú–æ–¥–µ–ª—å: {results['model_name']}")
            print(f"   ‚Ä¢ –û–±—É—á–∞—é—â–∞—è –≤—ã–±–æ—Ä–∫–∞: {results['training_samples']} –æ–±—Ä–∞–∑—Ü–æ–≤")
            print(f"   ‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞: {results['test_samples']} –æ–±—Ä–∞–∑—Ü–æ–≤")
            print(f"   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {results['accuracy']:.3f}")
            print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {results['confidence']:.3f}")
            print(f"   ‚Ä¢ –†–µ–∑—é–º–µ: {results['analysis_summary']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            print(f"\nüéØ –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
            for feature, importance in results['feature_importance'].items():
                print(f"   ‚Ä¢ {feature}: {importance:.1%}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è Lava AI: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è Lava AI: {e}")
    
    async def _train_mistral_ai(self):
        """–û–±—É—á–µ–Ω–∏–µ Mistral AI"""
        print("\nüéØ –û–ë–£–ß–ï–ù–ò–ï MISTRAL AI")
        print("-" * 30)
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è Mistral AI
            mistral_ai = self.scalping_system.ai_manager.models.get('mistral_ai')
            if not mistral_ai:
                print("‚ùå –û—à–∏–±–∫–∞: Mistral AI –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            print("\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è:")
            symbols_input = input("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é BTCUSDT,ETHUSDT): ").strip()
            symbols = [s.strip().upper() for s in symbols_input.split(',')] if symbols_input else ['BTCUSDT', 'ETHUSDT']
            
            days_input = input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90): ").strip()
            days = int(days_input) if days_input.isdigit() else 90
            
            print(f"\nüîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤: {', '.join(symbols)}")
            print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            all_data = []
            end_date = get_utc_now()
            start_date = end_date - timedelta(days=days)
            
            for symbol in symbols:
                print(f"üìä –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ HistoricalDataManager
                data = await self.scalping_system.data_manager.load_data(
                    symbol=symbol, 
                    interval='1h',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                    start_date=start_date,
                    end_date=end_date
                )
                
                if data is not None and not data.empty:
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
                    all_data.append(data)
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ data_collector...")
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ HistoricalDataManager, –∏—Å–ø–æ–ª—å–∑—É–µ–º data_collector
                    try:
                        async with self.scalping_system.data_collector as collector:
                            collector_data = await collector.get_historical_data(
                                symbol=symbol,
                                interval='1h',
                                days=days
                            )
                            if collector_data is not None and not collector_data.empty:
                                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(collector_data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} —á–µ—Ä–µ–∑ data_collector")
                                all_data.append(collector_data)
                            else:
                                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            
            if not all_data:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                return
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            combined_data = pd.concat(all_data, ignore_index=True)
            print(f"üìà –û–±—â–∏–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: {len(combined_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            features = combined_data[['open', 'high', 'low', 'close', 'volume']].copy()
            target = (combined_data['close'].shift(-1) > combined_data['close']).astype(int)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ (–Ω–µ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è)
            features = features[:-1]
            target = target[:-1]
            
            print(f"üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mistral AI...")
            await mistral_ai.initialize()
            
            print(f"üéØ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            results = await mistral_ai.train_model(
                model_name='mistral_hybrid_model',
                X=features,
                y=target
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print(f"\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø MISTRAL AI:")
            print("=" * 50)
            print(f"üìä –ú–æ–¥–µ–ª—å: {results.get('model_name', 'N/A')}")
            print(f"üìà –û–±—É—á–∞—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {results.get('training_samples', 0)}")
            print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {results.get('accuracy', 0):.3f}")
            print(f"üí™ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {results.get('confidence', 0):.3f}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {results.get('training_time', 0):.2f}—Å")
            print(f"üî§ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {results.get('tokens_used', 0)}")
            
            if 'analysis' in results:
                print(f"\nü§ñ –ê–Ω–∞–ª–∏–∑ Mistral AI:")
                print(f"   {results['analysis']}")
            
            if 'recommendations' in results:
                print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                for i, rec in enumerate(results['recommendations'], 1):
                    print(f"   {i}. {rec}")
            
            print("\n" + "=" * 50)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ Mistral AI: {e}")
            import traceback
            traceback.print_exc()
    
    async def _train_all_models(self):
        """–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        print("\nüöÄ –û–ë–£–ß–ï–ù–ò–ï –í–°–ï–• AI –ú–û–î–ï–õ–ï–ô")
        print("="*40)
        
        try:
            # –ò–º–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
            from multi_ai_trainer import MultiAITrainer
            
            trainer = MultiAITrainer()
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
            days = 180  # –ü–æ–ª–≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
            print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π –Ω–∞ {symbols} –∑–∞ {days} –¥–Ω–µ–π...")
            print("‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è...")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            results = await trainer.train_all_models(symbols)
            
            print("\n‚úÖ –û–ë–£–ß–ï–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô –ó–ê–í–ï–†–®–ï–ù–û!")
            print("="*40)
            
            for model_name, result in results.items():
                print(f"ü§ñ {model_name.upper()}:")
                print(f"   üìä –¢–æ—á–Ω–æ—Å—Ç—å: {result.accuracy:.2%}")
                print(f"   üéØ –í–∏–Ω—Ä–µ–π—Ç: {result.winrate:.2%}")
                print(f"   üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {result.profitable_trades}/{result.total_trades}")
                print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {result.training_time:.1f}—Å")
                print()
            
            return results
            
        except ImportError as e:
            print(f"‚ùå –ú–æ–¥—É–ª—å multi_ai_trainer –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            print("üîß –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞...")
            import os
            if os.path.exists("multi_ai_trainer.py"):
                print("‚úÖ –§–∞–π–ª multi_ai_trainer.py –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –§–∞–π–ª multi_ai_trainer.py –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π: {e}")
            import traceback
            traceback.print_exc()
    
    async def run_backtest(self, symbol: str, days: int = 7):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        
        print(f"üîÑ –ë–≠–ö–¢–ï–°–¢ –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–°–¢–ï–ú–´")
        print("="*50)
        print(f"üìä –°–∏–º–≤–æ–ª: {symbol}")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        print("="*50)
        
        try:
            results = await self.scalping_system.backtest_scalping_system(symbol, days)
            
            if 'error' not in results:
                print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–≠–ö–¢–ï–°–¢–ê:")
                print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {results['total_trades']}")
                print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {results['winning_trades']}")
                print(f"   –í–∏–Ω—Ä–µ–π—Ç: {results['winrate']:.1%}")
                print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {results['avg_profit_per_trade']:.3%}")
                print(f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['total_return']:.1%}")
                print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${results['final_balance']:.2f}")
                
                # –ê–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
                total_fees = results['total_trades'] * 2 * 0.001  # 0.1% * 2
                net_return = results['total_return'] - total_fees
                print(f"   –ß–∏—Å—Ç–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {net_return:.1%}")
                
                if results['winrate'] >= 0.75:
                    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π –≤–∏–Ω—Ä–µ–π—Ç 75%+")
                else:
                    print("\n‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–¥–µ–ª–æ–∫
                if 'trades' in results and results['trades']:
                    print(f"\nüìã –ü–†–ò–ú–ï–†–´ –°–î–ï–õ–û–ö:")
                    for i, trade in enumerate(results['trades'][:5]):
                        profit_emoji = "‚úÖ" if trade['profit_pct'] > 0 else "‚ùå"
                        print(f"   {i+1}. {profit_emoji} {trade['action']} "
                              f"${trade['entry_price']:.4f} ‚Üí ${trade['exit_price']:.4f} "
                              f"({trade['profit_pct']:+.3%})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {results['error']}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ PEPER BINANCE V4 - –ì–ò–ë–†–ò–î–ù–ê–Ø –°–ö–ê–õ–¨–ü–ò–ù–ì –°–ò–°–¢–ï–ú–ê")
    print("="*70)
    print("üéØ –ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞ 4 AI –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞")
    print("üí∞ –° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π Binance (0.1%)")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    runner = ScalpingSystemRunner()
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:")
    print("1. üéì –û–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π")
    print("2. üìä –ë—ç–∫—Ç–µ—Å—Ç –∞–Ω—Å–∞–º–±–ª—è AI")
    print("3. üöÄ Live —Ç–æ—Ä–≥–æ–≤–ª—è")
    
    try:
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1-3): ").strip()
        
        if choice == "1":
            # –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
            await runner.run_training_mode()
        elif choice == "2":
            # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∞–Ω—Å–∞–º–±–ª—è
            symbol = input("–°–∏–º–≤–æ–ª –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (BTCUSDT): ").strip() or "BTCUSDT"
            days = int(input("–î–Ω–µ–π –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (180): ") or "180")
            await runner.run_backtest(symbol, days)
        elif choice == "3":
            # –ó–∞–ø—É—Å–∫ live —Ç–æ—Ä–≥–æ–≤–ª–∏
            symbols_input = input("–°–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (BTCUSDT,ETHUSDT): ").strip() or "BTCUSDT,ETHUSDT"
            symbols = [s.strip() for s in symbols_input.split(",")]
            hours = int(input("–ß–∞—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏ (1): ") or "1")
            await runner.run_live_scalping(symbols, hours)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())