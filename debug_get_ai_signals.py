#!/usr/bin/env python3

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from winrate_test_with_results2 import RealWinrateTester, TestConfig
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def debug_get_ai_signals():
    """–û—Ç–ª–∞–¥–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_ai_signals"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º—è–≥–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    config = TestConfig(
        test_period_days=1,  # –¢–æ–ª—å–∫–æ 1 –¥–µ–Ω—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        symbols=['BTCUSDT'],  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
        min_confidence=0.001,  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
        min_consensus_models=1,  # –ú–∏–Ω–∏–º—É–º 1 –º–æ–¥–µ–ª—å
        use_strict_filters=False,  # –û—Ç–∫–ª—é—á–∏—Ç—å —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        debug_mode=True,
        enabled_ai_models=['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai']
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = RealWinrateTester(config)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞...")
        await tester.initialize()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT
        symbol = 'BTCUSDT'
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
        data = await tester.load_historical_data(symbol)
        
        if data.empty:
            logger.error(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return
            
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {data.index[0]} - {data.index[-1]}")
        
        # –í—ã–∑—ã–≤–∞–µ–º get_ai_signals —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info(f"üîç –í—ã–∑—ã–≤–∞–µ–º get_ai_signals –¥–ª—è {symbol}...")
        signals = await tester.get_ai_signals(symbol, data)
        
        logger.info(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: get_ai_signals –≤–µ—Ä–Ω—É–ª {len(signals) if signals else 0} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        if signals:
            for i, signal in enumerate(signals):
                logger.info(f"üìà –°–∏–≥–Ω–∞–ª {i+1}:")
                logger.info(f"   - –î–µ–π—Å—Ç–≤–∏–µ: {signal.final_action}")
                logger.info(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence_avg:.2%}")
                logger.info(f"   - –í—Ä–µ–º—è: {signal.timestamp}")
                logger.info(f"   - –¶–µ–Ω–∞: {signal.price}")
                logger.info(f"   - –°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {signal.consensus_strength}")
                logger.info(f"   - –£—á–∞—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏: {[m.model_name for m in signal.participating_models]}")
        else:
            logger.warning("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_get_ai_signals())