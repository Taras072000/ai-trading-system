#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
"""

import os
import sys
import json
import joblib
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from data_collector import BinanceDataCollector, DataManager
from enhanced_indicators import EnhancedTechnicalIndicators

class ModelTester:
    def __init__(self):
        self.data_manager = DataManager()
        self.indicators = EnhancedTechnicalIndicators()
        self.models_dir = "models/trading_ai"
        
    def load_model_files(self, symbol):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        try:
            model_path = f"{self.models_dir}/{symbol}_trading_model.joblib"
            scaler_path = f"{self.models_dir}/{symbol}_scaler.joblib"
            config_path = f"{self.models_dir}/{symbol}_config.json"
            features_path = f"{self.models_dir}/{symbol}_features.json"
            
            if not all(os.path.exists(path) for path in [model_path, scaler_path, config_path, features_path]):
                return None
                
            model = joblib.load(model_path)
            scaler = joblib.load(scaler_path)
            
            with open(config_path, 'r') as f:
                config = json.load(f)
                
            with open(features_path, 'r') as f:
                features = json.load(f)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ features —Å–ø–∏—Å–∫–æ–º –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º
            if isinstance(features, list):
                feature_names = features
            elif isinstance(features, dict) and 'feature_names' in features:
                feature_names = features['feature_names']
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
                return None
                
            return {
                'model': model,
                'scaler': scaler,
                'config': config,
                'features': feature_names
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {symbol}: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def prepare_features(self, df, feature_names):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            features_list = []
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ (—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ)
            for i in range(len(df)):
                # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤)
                start_idx = max(0, i - 100)  # –£–º–µ–Ω—å—à–∞–µ–º –æ–∫–Ω–æ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                window_data = df.iloc[start_idx:i+1].copy()
                
                if len(window_data) >= 1:  # –ú–∏–Ω–∏–º—É–º 1 –∑–∞–ø–∏—Å—å –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                    indicators = self.indicators.calculate_all_indicators(window_data)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
                    current_row = df.iloc[i]
                    if 'open' not in indicators:
                        indicators['open'] = current_row['open']
                    if 'high' not in indicators:
                        indicators['high'] = current_row['high']
                    if 'low' not in indicators:
                        indicators['low'] = current_row['low']
                    if 'close' not in indicators:
                        indicators['close'] = current_row['close']
                    if 'volume' not in indicators:
                        indicators['volume'] = current_row.get('volume', 0)
                    
                    features_list.append(indicators)
                else:
                    # –î–ª—è –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    current_row = df.iloc[i]
                    basic_features = {
                        'open': current_row['open'],
                        'high': current_row['high'], 
                        'low': current_row['low'],
                        'close': current_row['close'],
                        'volume': current_row.get('volume', 0),
                        'hour': 12.0,
                        'day_of_week': 2.0,
                        'day_of_month': 15.0,
                        'price_change': 0.0
                    }
                    features_list.append(basic_features)
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            features_df = pd.DataFrame(features_list, index=df.index)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            features_df = features_df.fillna(method='ffill').fillna(0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            missing_features = [f for f in feature_names if f not in features_df.columns]
            if missing_features:
                print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing_features[:5]}...")
                # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                for feature in missing_features:
                    features_df[feature] = 0.0
            
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_df = features_df[feature_names].copy()
            
            # –ó–∞–º–µ–Ω—è–µ–º inf –∏ -inf –Ω–∞ NaN, –∑–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω—è–µ–º
            features_df = features_df.replace([np.inf, -np.inf], np.nan)
            features_df = features_df.fillna(method='ffill').fillna(0)
            
            return features_df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def apply_confidence_thresholds(self, raw_predictions, probabilities, max_probs, config):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            min_confidence = config.get('min_confidence', 0.6)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            unique_preds, pred_counts = np.unique(raw_predictions, return_counts=True)
            print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
            for pred, count in zip(unique_preds, pred_counts):
                pred_name = {0: 'HOLD', 1: 'BUY', 2: 'SELL'}.get(pred, f'Class_{pred}')
                print(f"   - {pred_name}: {count} ({count/len(raw_predictions)*100:.1f}%)")
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_percentile_50 = np.percentile(max_probs, 50)
            confidence_percentile_75 = np.percentile(max_probs, 75)
            confidence_percentile_85 = np.percentile(max_probs, 85)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            buy_threshold = min(0.25, confidence_percentile_50 * 0.7)  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
            sell_threshold = min(0.25, confidence_percentile_50 * 0.7)  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
            
            print(f"üìä –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
            print(f"   - BUY –ø–æ—Ä–æ–≥: {buy_threshold:.3f}")
            print(f"   - SELL –ø–æ—Ä–æ–≥: {sell_threshold:.3f}")
            print(f"   - 50-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_percentile_50:.3f}")
            print(f"   - 75-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_percentile_75:.3f}")
            print(f"   - 85-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_percentile_85:.3f}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            adjusted_predictions = raw_predictions.copy()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            for i in range(len(raw_predictions)):
                prediction = raw_predictions[i]
                confidence = max_probs[i]
                
                # –ï—Å–ª–∏ —ç—Ç–æ BUY —Å–∏–≥–Ω–∞–ª (–∫–ª–∞—Å—Å 1)
                if prediction == 1:
                    if confidence < buy_threshold:
                        adjusted_predictions[i] = 0  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ HOLD
                        
                # –ï—Å–ª–∏ —ç—Ç–æ SELL —Å–∏–≥–Ω–∞–ª (–∫–ª–∞—Å—Å 2)
                elif prediction == 2:
                    if confidence < sell_threshold:
                        adjusted_predictions[i] = 0  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ HOLD
                        
                # HOLD —Å–∏–≥–Ω–∞–ª—ã (–∫–ª–∞—Å—Å 0) –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤
            unique_adj, adj_counts = np.unique(adjusted_predictions, return_counts=True)
            print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤:")
            for pred, count in zip(unique_adj, adj_counts):
                pred_name = {0: 'HOLD', 1: 'BUY', 2: 'SELL'}.get(pred, f'Class_{pred}')
                print(f"   - {pred_name}: {count} ({count/len(adjusted_predictions)*100:.1f}%)")
                
            return adjusted_predictions
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return raw_predictions  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def test_model_predictions(self, symbol, days=30):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {symbol}...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model_data = self.load_model_files(symbol)
        if not model_data:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è {symbol}")
            return None
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days + 100)  # +100 –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            import asyncio
            df = asyncio.run(self.data_manager.ensure_data_available(
                symbol=symbol,
                interval='1h',
                days=days + 100,
                force_update=False
            ))
            
            if df is None or len(df) < 100:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return None
                
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            features_df = self.prepare_features(df, model_data['features'])
            if features_df is None:
                return None
                
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            test_data = features_df.tail(days * 24).copy()  # 24 —á–∞—Å–∞ –≤ —Å—É—Ç–∫–∞—Ö
            
            if len(test_data) == 0:
                print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}")
                return None
                
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ {len(test_data)} –∑–∞–ø–∏—Å—è—Ö")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
            X_test = model_data['scaler'].transform(test_data)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            raw_predictions = model_data['model'].predict(X_test)
            probabilities = model_data['model'].predict_proba(X_test)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
            max_probs = np.max(probabilities, axis=1)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            predictions = self.apply_confidence_thresholds(raw_predictions, probabilities, max_probs, model_data['config'])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            unique, counts = np.unique(predictions, return_counts=True)
            pred_distribution = dict(zip(unique, counts))
            
            avg_confidence = np.mean(max_probs)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
            hold_signals = np.sum(predictions == 0)
            buy_signals = np.sum(predictions == 1) 
            sell_signals = np.sum(predictions == 2)
            
            results = {
                'symbol': symbol,
                'total_predictions': len(predictions),
                'hold_signals': hold_signals,
                'buy_signals': buy_signals,
                'sell_signals': sell_signals,
                'hold_pct': (hold_signals / len(predictions)) * 100,
                'buy_pct': (buy_signals / len(predictions)) * 100,
                'sell_pct': (sell_signals / len(predictions)) * 100,
                'avg_confidence': avg_confidence,
                'prediction_distribution': pred_distribution,
                'recent_predictions': predictions[-10].tolist(),
                'recent_probabilities': probabilities[-10].tolist(),
                'feature_count': len(model_data['features']),
                'model_type': str(type(model_data['model']).__name__)
            }
            
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
            return None
    
    def diagnose_model_issues(self, symbol):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é"""
        print(f"\nüîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏ {symbol}...")
        
        model_data = self.load_model_files(symbol)
        if not model_data:
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = model_data['config']
            print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏:")
            print(f"   - –¶–µ–ª–µ–≤–æ–π winrate: {config.get('target_winrate', 'N/A')}")
            print(f"   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config.get('min_confidence', 'N/A')}")
            print(f"   - Risk/Reward: {config.get('risk_reward_ratio', 'N/A')}")
            print(f"   - Stop Loss: {config.get('stop_loss_pct', 'N/A')}%")
            print(f"   - Take Profit: {config.get('take_profit_pct', 'N/A')}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(model_data['features'])}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
            model = model_data['model']
            print(f"ü§ñ –¢–∏–ø –º–æ–¥–µ–ª–∏: {type(model).__name__}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω—Å–∞–º–±–ª—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ—Å—Ç–∞–≤
            if hasattr(model, 'estimators_'):
                print(f"üå≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤/–æ—Ü–µ–Ω—â–∏–∫–æ–≤: {len(model.estimators_)}")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if hasattr(model, 'feature_importances_'):
                importances = model.feature_importances_
                top_features_idx = np.argsort(importances)[-10:][::-1]
                print(f"üéØ –¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                for i, idx in enumerate(top_features_idx):
                    feature_name = model_data['features'][idx]
                    importance = importances[idx]
                    print(f"   {i+1}. {feature_name}: {importance:.4f}")
                    
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ {symbol}: {e}")
            return None
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–£–ß–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô")
        print("=" * 60)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if not os.path.exists(self.models_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ —Å –º–æ–¥–µ–ª—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.models_dir}")
            return
            
        model_files = [f for f in os.listdir(self.models_dir) if f.endswith('_trading_model.joblib')]
        symbols = [f.replace('_trading_model.joblib', '') for f in model_files]
        
        if not symbols:
            print("‚ùå –û–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(symbols)}")
        print(f"üí∞ –°–∏–º–≤–æ–ª—ã: {', '.join(symbols)}")
        
        all_results = {}
        
        for symbol in symbols:
            print(f"\n{'='*50}")
            print(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {symbol}")
            print(f"{'='*50}")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥–µ–ª–∏
            self.diagnose_model_issues(symbol)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            test_results = self.test_model_predictions(symbol, days=7)
            if test_results:
                all_results[symbol] = test_results
                
                print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø {symbol}:")
                print(f"   üî¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {test_results['total_predictions']}")
                print(f"   ‚è∏Ô∏è  HOLD —Å–∏–≥–Ω–∞–ª–æ–≤: {test_results['hold_signals']} ({test_results['hold_pct']:.1f}%)")
                print(f"   üìà BUY —Å–∏–≥–Ω–∞–ª–æ–≤: {test_results['buy_signals']} ({test_results['buy_pct']:.1f}%)")
                print(f"   üìâ SELL —Å–∏–≥–Ω–∞–ª–æ–≤: {test_results['sell_signals']} ({test_results['sell_pct']:.1f}%)")
                print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {test_results['avg_confidence']:.3f}")
                print(f"   ü§ñ –¢–∏–ø –º–æ–¥–µ–ª–∏: {test_results['model_type']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                print(f"   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {test_results['recent_predictions']}")
        
        # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞
        print(f"\n{'='*60}")
        print("üìà –û–ë–©–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print(f"{'='*60}")
        
        if all_results:
            total_predictions = sum(r['total_predictions'] for r in all_results.values())
            total_buy = sum(r['buy_signals'] for r in all_results.values())
            total_sell = sum(r['sell_signals'] for r in all_results.values())
            total_hold = sum(r['hold_signals'] for r in all_results.values())
            avg_confidence = np.mean([r['avg_confidence'] for r in all_results.values()])
            
            print(f"üî¢ –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {total_predictions}")
            print(f"üìà –í—Å–µ–≥–æ BUY —Å–∏–≥–Ω–∞–ª–æ–≤: {total_buy} ({(total_buy/total_predictions)*100:.1f}%)")
            print(f"üìâ –í—Å–µ–≥–æ SELL —Å–∏–≥–Ω–∞–ª–æ–≤: {total_sell} ({(total_sell/total_predictions)*100:.1f}%)")
            print(f"‚è∏Ô∏è  –í—Å–µ–≥–æ HOLD —Å–∏–≥–Ω–∞–ª–æ–≤: {total_hold} ({(total_hold/total_predictions)*100:.1f}%)")
            print(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            results_file = f"model_test_results_{timestamp}.json"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º numpy —Ç–∏–ø—ã –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Python —Ç–∏–ø—ã –¥–ª—è JSON
            def convert_numpy_types(obj):
                if isinstance(obj, np.integer):
                    return int(obj)
                elif isinstance(obj, np.floating):
                    return float(obj)
                elif isinstance(obj, np.ndarray):
                    return obj.tolist()
                elif isinstance(obj, dict):
                    return {str(k): convert_numpy_types(v) for k, v in obj.items()}
                elif isinstance(obj, list):
                    return [convert_numpy_types(item) for item in obj]
                return obj
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            converted_results = convert_numpy_types(all_results)
            
            with open(results_file, 'w', encoding='utf-8') as f:
                json.dump(converted_results, f, indent=2, ensure_ascii=False)
                
            print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
            print(f"\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:")
            
            if total_buy == 0 and total_sell == 0:
                print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ú–æ–¥–µ–ª–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!")
                print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("   1. –°–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
                print("   2. –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è")
                print("   3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π —Ü–µ–ª–µ–≤—ã—Ö –º–µ—Ç–æ–∫")
                print("   4. –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫–ª–∞—Å—Å HOLD")
                
            elif total_buy < total_predictions * 0.01:  # –ú–µ–Ω–µ–µ 1% BUY —Å–∏–≥–Ω–∞–ª–æ–≤
                print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –û—á–µ–Ω—å –º–∞–ª–æ BUY —Å–∏–≥–Ω–∞–ª–æ–≤")
                print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print("   1. –°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è BUY")
                print("   2. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ BUY —Å–∏–≥–Ω–∞–ª–æ–≤")
                print("   3. –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å –∫–ª–∞—Å—Å–∞ BUY –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
                
            elif total_sell < total_predictions * 0.01:  # –ú–µ–Ω–µ–µ 1% SELL —Å–∏–≥–Ω–∞–ª–æ–≤
                print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –û—á–µ–Ω—å –º–∞–ª–æ SELL —Å–∏–≥–Ω–∞–ª–æ–≤")
                print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print("   1. –°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è SELL")
                print("   2. –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ SELL —Å–∏–≥–Ω–∞–ª–æ–≤")
                print("   3. –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å –∫–ª–∞—Å—Å–∞ SELL –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
                
            if avg_confidence < 0.6:
                print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π")
                print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                print("   1. –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                print("   2. –£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
                print("   3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–µ–π")
        
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω—É –º–æ–¥–µ–ª—å")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ModelTester()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()