#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á–µ–º—É –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ç–æ–ª—å–∫–æ HOLD —Å–∏–≥–Ω–∞–ª—ã
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/mac/Documents/Peper Binance v4')

from ai_modules.trading_ai import TradingAI
from ai_modules.lava_ai import LavaAI
from ai_modules.lgbm_ai import LGBMAI
from ai_modules.mistral_ai import MistralAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def create_test_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º"""
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤–æ—Å—Ö–æ–¥—è—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º
    dates = pd.date_range(start='2025-10-01', periods=100, freq='1H')
    
    # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º
    base_price = 50000
    trend = np.linspace(0, 2000, 100)  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ +2000
    noise = np.random.normal(0, 100, 100)  # –®—É–º
    
    prices = base_price + trend + noise
    
    # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
    data = pd.DataFrame({
        'open': prices * (1 + np.random.normal(0, 0.001, 100)),
        'high': prices * (1 + np.random.uniform(0, 0.01, 100)),
        'low': prices * (1 - np.random.uniform(0, 0.01, 100)),
        'close': prices,
        'volume': np.random.uniform(1000, 5000, 100)
    }, index=dates)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ high >= max(open, close) –∏ low <= min(open, close)
    data['high'] = np.maximum(data['high'], np.maximum(data['open'], data['close']))
    data['low'] = np.minimum(data['low'], np.minimum(data['open'], data['close']))
    
    return data

async def test_trading_ai(data):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Trading AI"""
    logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Trading AI...")
    
    trading_ai = TradingAI()
    await trading_ai.initialize()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    for period in [20, 50, 100]:
        test_data = data.tail(period)
        signal = await trading_ai.analyze_market('BTCUSDT', test_data)
        
        logger.info(f"Trading AI ({period} —Å–≤–µ—á–µ–π): {signal.action} (confidence: {signal.confidence:.3f}) - {signal.reason}")
        
        if signal.action != 'HOLD':
            return True
    
    return False

async def test_lava_ai(data):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Lava AI"""
    logger.info("üåã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Lava AI...")
    
    lava_ai = LavaAI()
    await lava_ai.initialize()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    for period in [30, 50, 100]:
        test_data = data.tail(period)
        signals = await lava_ai.generate_trading_signals(test_data)
        
        signal = signals.get('signal', 'UNKNOWN')
        confidence = signals.get('confidence', 0.0)
        
        logger.info(f"Lava AI ({period} —Å–≤–µ—á–µ–π): {signal} (confidence: {confidence:.3f})")
        
        if signal != 'HOLD':
            return True
    
    return False

async def test_lgbm_ai(data):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º LGBM AI"""
    logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LGBM AI...")
    
    lgbm_ai = LGBMAI()
    await lgbm_ai.initialize()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    for period in [30, 50, 100]:
        test_data = data.tail(period)
        prediction = await lgbm_ai.predict_market_direction('BTCUSDT', test_data)
        
        if prediction:
            direction = prediction.get('direction', 0)
            confidence = prediction.get('confidence', 0.0)
            
            logger.info(f"LGBM AI ({period} —Å–≤–µ—á–µ–π): direction={direction:.3f} (confidence: {confidence:.3f})")
            
            if abs(direction) > 0.1:  # –ü–æ—Ä–æ–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
                return True
        else:
            logger.info(f"LGBM AI ({period} —Å–≤–µ—á–µ–π): None")
    
    return False

async def test_mistral_ai(data):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Mistral AI"""
    logger.info("üîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Mistral AI...")
    
    mistral_ai = MistralAI()
    await mistral_ai.initialize()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–µ—Ä–∏–æ–¥–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    for period in [20, 30, 50]:
        test_data = data.tail(period)
        current_price = float(test_data['close'].iloc[-1])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è mistral_ai
        price_data = [
            {
                'timestamp': str(row.name),
                'open': float(row['open']),
                'high': float(row['high']),
                'low': float(row['low']),
                'close': float(row['close']),
                'volume': float(row['volume'])
            }
            for _, row in test_data.iterrows()
        ]
        
        try:
            analysis = await mistral_ai.analyze_trading_opportunity('BTCUSDT', current_price, price_data)
            
            logger.info(f"Mistral AI ({period} —Å–≤–µ—á–µ–π): {analysis}")
            
            if analysis and isinstance(analysis, str) and analysis.upper() in ['BUY', 'SELL']:
                return True
        except Exception as e:
            logger.warning(f"Mistral AI –æ—à–∏–±–∫–∞: {e}")
    
    return False

async def test_reinforcement_learning(data):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º Reinforcement Learning Engine"""
    logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Reinforcement Learning Engine...")
    
    rl_engine = ReinforcementLearningEngine()
    await rl_engine.initialize()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ winrate_test_with_results2.py
    for period in [20, 30, 50]:
        test_data = data.tail(period)
        
        if len(test_data) >= 10:
            price_change = (test_data['close'].iloc[-1] - test_data['close'].iloc[-5]) / test_data['close'].iloc[-5]
            volume_ratio = test_data['volume'].iloc[-1] / test_data['volume'].iloc[-10:].mean()
            
            logger.info(f"RL Engine ({period} —Å–≤–µ—á–µ–π): price_change={price_change:.3f}, volume_ratio={volume_ratio:.2f}")
            
            # –õ–æ–≥–∏–∫–∞ –∏–∑ winrate_test_with_results2.py
            if price_change > 0.01 and volume_ratio > 1.2:
                logger.info(f"RL Engine: BUY —Å–∏–≥–Ω–∞–ª")
                return True
            elif price_change < -0.01 and volume_ratio > 1.2:
                logger.info(f"RL Engine: SELL —Å–∏–≥–Ω–∞–ª")
                return True
    
    return False

async def fix_ai_models():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º AI –º–æ–¥–µ–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π...")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Trading AI - –¥–µ–ª–∞–µ–º –ø–æ—Ä–æ–≥–∏ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏
    trading_ai_fix = '''
    # –í –º–µ—Ç–æ–¥–µ _calculate_trading_signal –∏–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É:
    
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ (—Å–ª–∏—à–∫–æ–º –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è):
    if sma_5 > sma_20 and rsi < 70:
        action = 'BUY'
        confidence = min(0.8, (sma_5 - sma_20) / sma_20 * 10)
    
    # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è):
    if sma_5 > sma_20 and rsi < 80:  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ø–æ—Ä–æ–≥ RSI
        action = 'BUY'
        confidence = min(0.8, max(0.3, (sma_5 - sma_20) / sma_20 * 20))  # –ú–∏–Ω–∏–º—É–º 0.3
    elif sma_5 < sma_20 and rsi > 20:  # –£–º–µ–Ω—å—à–∏–ª–∏ –ø–æ—Ä–æ–≥ RSI
        action = 'SELL'
        confidence = min(0.8, max(0.3, (sma_20 - sma_5) / sma_20 * 20))  # –ú–∏–Ω–∏–º—É–º 0.3
    '''
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Lava AI - —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥–∏
    lava_ai_fix = '''
    # –í –º–µ—Ç–æ–¥–µ generate_trading_signals –∏–∑–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥–∏:
    
    # –°—Ç–∞—Ä—ã–µ –ø–æ—Ä–æ–≥–∏ (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ):
    if signal_score > 0.4:
        signal = 'BUY'
    elif signal_score < -0.4:
        signal = 'SELL'
    
    # –ù–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ (–±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–µ):
    if signal_score > 0.2:  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 0.4 –¥–æ 0.2
        signal = 'BUY'
    elif signal_score < -0.2:  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å -0.4 –¥–æ -0.2
        signal = 'SELL'
    '''
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º LGBM AI - —É–º–µ–Ω—å—à–∞–µ–º –ø–æ—Ä–æ–≥ direction
    lgbm_ai_fix = '''
    # –í –º–µ—Ç–æ–¥–µ predict_market_direction –∏–∑–º–µ–Ω—è–µ–º –ø–æ—Ä–æ–≥:
    
    # –°—Ç–∞—Ä—ã–π –ø–æ—Ä–æ–≥ (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π):
    if abs(direction) > 0.1:
        action = 'BUY' if direction > 0 else 'SELL'
    
    # –ù–æ–≤—ã–π –ø–æ—Ä–æ–≥ (–±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π):
    if abs(direction) > 0.05:  # –£–º–µ–Ω—å—à–∏–ª–∏ —Å 0.1 –¥–æ 0.05
        action = 'BUY' if direction > 0 else 'SELL'
    '''
    
    logger.info("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
    logger.info("1. Trading AI: –£–≤–µ–ª–∏—á–∏—Ç—å –ø–æ—Ä–æ–≥–∏ RSI (70‚Üí80, 30‚Üí20), –¥–æ–±–∞–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é confidence")
    logger.info("2. Lava AI: –£–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä–æ–≥–∏ signal_score (0.4‚Üí0.2)")
    logger.info("3. LGBM AI: –£–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä–æ–≥ direction (0.1‚Üí0.05)")
    logger.info("4. Mistral AI: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É Ollama —Å–µ—Ä–≤–µ—Ä–∞")
    logger.info("5. RL Engine: –£–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä–æ–≥–∏ price_change –∏ volume_ratio")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ AI –º–æ–¥–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
    data = await create_test_data()
    logger.info(f"üìä –°–æ–∑–¥–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(data)} —Å–≤–µ—á–µ–π")
    logger.info(f"üìà –¢—Ä–µ–Ω–¥: {data['close'].iloc[0]:.2f} ‚Üí {data['close'].iloc[-1]:.2f} (+{((data['close'].iloc[-1]/data['close'].iloc[0])-1)*100:.1f}%)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    results = {}
    
    try:
        results['trading_ai'] = await test_trading_ai(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Trading AI: {e}")
        results['trading_ai'] = False
    
    try:
        results['lava_ai'] = await test_lava_ai(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Lava AI: {e}")
        results['lava_ai'] = False
    
    try:
        results['lgbm_ai'] = await test_lgbm_ai(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ LGBM AI: {e}")
        results['lgbm_ai'] = False
    
    try:
        results['mistral_ai'] = await test_mistral_ai(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Mistral AI: {e}")
        results['mistral_ai'] = False
    
    try:
        results['reinforcement_learning'] = await test_reinforcement_learning(data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ RL Engine: {e}")
        results['reinforcement_learning'] = False
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("\n" + "="*50)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    logger.info("="*50)
    
    working_models = 0
    for model, is_working in results.items():
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if is_working else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        logger.info(f"{model}: {status}")
        if is_working:
            working_models += 1
    
    logger.info(f"\nüìà –†–∞–±–æ—Ç–∞—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π: {working_models}/5")
    
    if working_models < 5:
        logger.info("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π!")
        await fix_ai_models()
    else:
        logger.info("\nüéâ –í—Å–µ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())