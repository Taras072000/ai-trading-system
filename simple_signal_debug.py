#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from historical_data_manager import HistoricalDataManager
from lava_ai import LavaAI
from reinforcement_learning_engine import ReinforcementLearningEngine

async def main():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    data_manager = HistoricalDataManager()
    lava_ai = LavaAI()
    rl_engine = ReinforcementLearningEngine()
    
    symbols = ['BTCUSDT', 'ETHUSDT']
    timeframe = '1h'
    
    # –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    end_date = datetime.now()
    start_date = end_date - timedelta(days=3)
    
    for symbol in symbols:
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {symbol}:")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = data_manager.load_data(symbol, timeframe, start_date, end_date)
        if data is None or len(data) == 0:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            continue
            
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        try:
            lava_signals = await lava_ai.generate_signal(symbol, timeframe, data)
            print(f"ü§ñ LavaAI —Å–∏–≥–Ω–∞–ª: {lava_signals}")
            
            rl_signals = await rl_engine.generate_signal(symbol, timeframe, data)
            print(f"üß† RL —Å–∏–≥–Ω–∞–ª: {rl_signals}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
            if lava_signals and rl_signals:
                if (lava_signals.get('action') == rl_signals.get('action') and 
                    lava_signals.get('action') in ['BUY', 'SELL']):
                    print(f"‚úÖ –ö–û–ù–°–ï–ù–°–£–°: {lava_signals.get('action')}")
                    print(f"   LavaAI confidence: {lava_signals.get('confidence', 0):.3f}")
                    print(f"   RL confidence: {rl_signals.get('confidence', 0):.3f}")
                else:
                    print(f"‚ùå –ù–ï–¢ –ö–û–ù–°–ï–ù–°–£–°–ê: LavaAI={lava_signals.get('action')}, RL={rl_signals.get('action')}")
            else:
                print("‚ùå –û–¥–∏–Ω –∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–æ–π")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

if __name__ == "__main__":
    asyncio.run(main())