#!/usr/bin/env python3
"""
üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏ –∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —è–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–∏ (candlesticks) –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import seaborn as sns
import mplfinance as mpf
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.express as px
from dataclasses import dataclass
import json
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è matplotlib
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

@dataclass
class TradeVisualizationData:
    """–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏"""
    symbol: str
    entry_time: datetime
    exit_time: datetime
    entry_price: float
    exit_price: float
    direction: str  # 'LONG' –∏–ª–∏ 'SHORT'
    pnl: float
    pnl_percent: float
    confidence: float
    ai_model: str
    position_size: float
    commission: float
    exit_reason: str
    partial_exits: List[Dict[str, Any]]
    market_data: pd.DataFrame  # –î–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å–¥–µ–ª–∫–∏
    tp_levels: List[float] = None  # –£—Ä–æ–≤–Ω–∏ Take Profit
    sl_level: float = None  # –£—Ä–æ–≤–µ–Ω—å Stop Loss
    max_profit: float = 0.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏
    max_loss: float = 0.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫ –≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏

def generate_ohlc_data(entry_time: datetime, exit_time: datetime, entry_price: float, exit_price: float, interval_minutes: int = 5) -> pd.DataFrame:
    """
    üïØÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç OHLC –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    
    Args:
        entry_time: –í—Ä–µ–º—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
        exit_time: –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏
        entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
        exit_price: –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
        interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    Returns:
        DataFrame —Å OHLC –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥
        time_range = pd.date_range(start=entry_time, end=exit_time, freq=f'{interval_minutes}min')
        
        if len(time_range) < 2:
            # –ï—Å–ª–∏ –ø–µ—Ä–∏–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            time_range = pd.date_range(start=entry_time, periods=10, freq=f'{interval_minutes}min')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
        price_diff = exit_price - entry_price
        num_candles = len(time_range)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
        base_trend = np.linspace(0, price_diff, num_candles)
        volatility = abs(price_diff) * 0.02  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        noise = np.random.normal(0, volatility, num_candles)
        
        close_prices = entry_price + base_trend + noise
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –¥–∞–Ω–Ω—ã–µ
        ohlc_data = []
        for i, timestamp in enumerate(time_range):
            close = close_prices[i]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º High –∏ Low –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Close
            high_low_range = abs(close) * 0.001  # 0.1% –¥–∏–∞–ø–∞–∑–æ–Ω
            high = close + np.random.uniform(0, high_low_range)
            low = close - np.random.uniform(0, high_low_range)
            
            # Open –±–µ—Ä–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ Close (–∏–ª–∏ entry_price –¥–ª—è –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏)
            open_price = entry_price if i == 0 else ohlc_data[i-1]['Close']
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ High >= max(Open, Close) –∏ Low <= min(Open, Close)
            high = max(high, open_price, close)
            low = min(low, open_price, close)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä–µ–º
            volume = np.random.randint(1000, 10000)
            
            ohlc_data.append({
                'Open': open_price,
                'High': high,
                'Low': low,
                'Close': close,
                'Volume': volume
            })
        
        df = pd.DataFrame(ohlc_data, index=time_range)
        return df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OHLC –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        simple_data = pd.DataFrame({
            'Open': [entry_price, entry_price],
            'High': [max(entry_price, exit_price), max(entry_price, exit_price)],
            'Low': [min(entry_price, exit_price), min(entry_price, exit_price)],
            'Close': [entry_price, exit_price],
            'Volume': [5000, 5000]
        }, index=[entry_time, exit_time])
        return simple_data


class DetailedTradeVisualizer:
    """
    üé® –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫ —Å —è–ø–æ–Ω—Å–∫–∏–º–∏ —Å–≤–µ—á–∞–º–∏
    
    –°–æ–∑–¥–∞–µ—Ç:
    - –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å–≤–µ—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏
    - –û–±—â–∏–µ —Å–≤–µ—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º
    - –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä
    """
    
    def __init__(self, output_dir: str = "reports/detailed_charts"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        """
        self.output_dir = Path(output_dir)
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        self.session_dir = self.output_dir / self.timestamp
        self.individual_trades_dir = self.session_dir / "individual_trades"
        self.pair_summaries_dir = self.session_dir / "pair_summaries"
        self.portfolio_dir = self.session_dir / "portfolio"
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for dir_path in [self.individual_trades_dir, self.pair_summaries_dir, self.portfolio_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –≤: {self.session_dir}")
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è mplfinance
        self.candlestick_style = mpf.make_marketcolors(
            up='#2E8B57',      # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö —Å–≤–µ—á–µ–π
            down='#DC143C',    # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø–∞–¥–∞—é—â–∏—Ö —Å–≤–µ—á–µ–π
            edge='inherit',
            wick={'up':'#2E8B57', 'down':'#DC143C'},
            volume='#708090'   # –°–µ—Ä—ã–π –¥–ª—è –æ–±—ä–µ–º–∞
        )
        
        self.chart_style = mpf.make_mpf_style(
            marketcolors=self.candlestick_style,
            gridstyle='-',
            gridcolor='lightgray',
            y_on_right=False
        )
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.colors = {
            'profit': '#2E8B57',      # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø—Ä–∏–±—ã–ª–∏
            'loss': '#DC143C',        # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —É–±—ã—Ç–∫–∞
            'entry_long': '#4169E1',  # –°–∏–Ω–∏–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–æ–Ω–≥
            'entry_short': '#FF6347', # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —à–æ—Ä—Ç
            'exit': '#9932CC',        # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –≤—ã—Ö–æ–¥–∞
            'tp': '#32CD32',          # –õ–∞–π–º –¥–ª—è TP
            'sl': '#FF4500',          # –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è SL
            'price': '#1E90FF',       # –ì–æ–ª—É–±–æ–π –¥–ª—è —Ü–µ–Ω—ã
            'volume': '#708090'       # –°–µ—Ä—ã–π –¥–ª—è –æ–±—ä–µ–º–∞
        }

    def create_individual_trade_charts(self, symbol: str, trades: List[Any]) -> None:
        """
        üïØÔ∏è –°–æ–∑–¥–∞–µ—Ç —Å–≤–µ—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
            trades: –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        """
        try:
            logger.info(f"üé® –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–µ—á–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}: {len(trades)} —Å–¥–µ–ª–æ–∫")
            
            for i, trade in enumerate(trades):
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–¥–µ–ª–∫–∏
                    ohlc_data = generate_ohlc_data(
                        trade.entry_time, 
                        trade.exit_time, 
                        trade.entry_price, 
                        trade.exit_price
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
                    addplot_lines = []
                    
                    # –õ–∏–Ω–∏—è –≤—Ö–æ–¥–∞
                    entry_line = [trade.entry_price] * len(ohlc_data)
                    addplot_lines.append(mpf.make_addplot(entry_line, color=self.colors['entry_long'], 
                                                        linestyle='--', width=2, alpha=0.8))
                    
                    # –õ–∏–Ω–∏—è –≤—ã—Ö–æ–¥–∞
                    exit_line = [trade.exit_price] * len(ohlc_data)
                    addplot_lines.append(mpf.make_addplot(exit_line, color=self.colors['exit'], 
                                                        linestyle='--', width=2, alpha=0.8))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º TP –∏ SL —É—Ä–æ–≤–Ω–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if hasattr(trade, 'tp_levels') and trade.tp_levels:
                        for tp_level in trade.tp_levels:
                            tp_line = [tp_level] * len(ohlc_data)
                            addplot_lines.append(mpf.make_addplot(tp_line, color=self.colors['tp'], 
                                                                linestyle=':', width=1.5, alpha=0.7))
                    
                    if hasattr(trade, 'sl_level') and trade.sl_level:
                        sl_line = [trade.sl_level] * len(ohlc_data)
                        addplot_lines.append(mpf.make_addplot(sl_line, color=self.colors['sl'], 
                                                            linestyle=':', width=1.5, alpha=0.7))
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é mplfinance
                    color = self.colors['profit'] if trade.pnl > 0 else self.colors['loss']
                    result_text = '‚úÖ –ü–†–ò–ë–´–õ–¨' if trade.pnl > 0 else '‚ùå –£–ë–´–¢–û–ö'
                    
                    title = f"üïØÔ∏è {symbol} - –°–¥–µ–ª–∫–∞ #{i+1} - {result_text}\n" \
                           f"–í—Ö–æ–¥: {trade.entry_price:.6f} | –í—ã—Ö–æ–¥: {trade.exit_price:.6f} | " \
                           f"P&L: {trade.pnl:.2f}$ ({trade.pnl_percent:.2f}%)"
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
                    mpf.plot(ohlc_data, 
                           type='candle',
                           style=self.chart_style,
                           addplot=addplot_lines,
                           volume=True,
                           title=title,
                           ylabel='–¶–µ–Ω–∞',
                           ylabel_lower='–û–±—ä–µ–º',
                           datetime_format='%H:%M',
                           xrotation=45,
                           figsize=(16, 10),
                           savefig=dict(
                               fname=self.individual_trades_dir / f"{symbol}_trade_{i+1:03d}_{trade.entry_time.strftime('%Y%m%d_%H%M')}.png",
                               dpi=300,
                               bbox_inches='tight',
                               facecolor='white'
                           ))
                    
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å–¥–µ–ª–∫–∏: {symbol}_trade_{i+1:03d}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–¥–µ–ª–∫–∏ {i+1}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–µ—á–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}: {e}")

    def create_pair_summary_chart(self, symbol: str, trades: List[Any]) -> None:
        """
        üïØÔ∏è –°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–π —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫ –ø–æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
            trades: –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        """
        try:
            logger.info(f"üìà –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {len(trades)} —Å–¥–µ–ª–æ–∫")
            
            if not trades:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ {symbol}")
                return
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_trades = sorted(trades, key=lambda x: x.entry_time)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            start_time = min(t.entry_time for t in sorted_trades)
            end_time = max(t.exit_time for t in sorted_trades)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–µ OHLC –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            all_prices = []
            for trade in sorted_trades:
                all_prices.extend([trade.entry_price, trade.exit_price])
            
            min_price = min(all_prices)
            max_price = max(all_prices)
            price_range = max_price - min_price
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ OHLC –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
            time_range = pd.date_range(start=start_time, end=end_time, freq='1h')
            if len(time_range) < 10:
                time_range = pd.date_range(start=start_time, periods=24, freq='1h')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç—Ä–µ–Ω–¥
            base_prices = np.linspace(min_price, max_price, len(time_range))
            volatility = price_range * 0.01
            
            ohlc_data = []
            for i, timestamp in enumerate(time_range):
                base_price = base_prices[i]
                noise = np.random.normal(0, volatility)
                close = base_price + noise
                
                high_low_range = price_range * 0.005
                high = close + np.random.uniform(0, high_low_range)
                low = close - np.random.uniform(0, high_low_range)
                open_price = base_prices[i-1] if i > 0 else close
                
                high = max(high, open_price, close)
                low = min(low, open_price, close)
                
                ohlc_data.append({
                    'Open': open_price,
                    'High': high,
                    'Low': low,
                    'Close': close,
                    'Volume': np.random.randint(5000, 15000)
                })
            
            df = pd.DataFrame(ohlc_data, index=time_range)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å —Ç—Ä–µ–º—è –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏
            fig = plt.figure(figsize=(20, 16))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
            ax1 = plt.subplot2grid((4, 1), (0, 0), rowspan=2)
            
            # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            addplot_elements = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏
            profitable_trades = [t for t in trades if t.pnl > 0]
            losing_trades = [t for t in trades if t.pnl <= 0]
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏–∏ –¥–ª—è —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞
            entry_points = pd.Series(index=df.index, dtype=float)
            exit_points = pd.Series(index=df.index, dtype=float)
            
            for trade in sorted_trades:
                # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
                entry_idx = df.index.get_indexer([trade.entry_time], method='nearest')[0]
                exit_idx = df.index.get_indexer([trade.exit_time], method='nearest')[0]
                
                if 0 <= entry_idx < len(df):
                    entry_points.iloc[entry_idx] = trade.entry_price
                if 0 <= exit_idx < len(df):
                    exit_points.iloc[exit_idx] = trade.exit_price
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
            addplot_elements.append(mpf.make_addplot(entry_points, type='scatter', 
                                                   markersize=100, marker='o', 
                                                   color=self.colors['entry_long']))
            addplot_elements.append(mpf.make_addplot(exit_points, type='scatter', 
                                                   markersize=100, marker='X', 
                                                   color=self.colors['exit']))
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
            mpf.plot(df, 
                   type='candle',
                   style=self.chart_style,
                   addplot=addplot_elements,
                   volume=True,
                   title=f"üïØÔ∏è {symbol} - –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫",
                   ylabel='–¶–µ–Ω–∞',
                   datetime_format='%m-%d %H:%M',
                   xrotation=45,
                   figsize=(16, 8),
                   savefig=dict(
                       fname=self.pair_summaries_dir / f"{symbol}_summary_candlestick.png",
                       dpi=300,
                       bbox_inches='tight',
                       facecolor='white'
                   ))
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            profitable_trades = [t for t in trades if t.pnl > 0]
            losing_trades = [t for t in trades if t.pnl < 0]
            
            total_trades = len(trades)
            winning_trades = len(profitable_trades)
            win_rate = (winning_trades / total_trades * 100) if total_trades > 0 else 0
            total_pnl = sum(t.pnl for t in trades)
            avg_pnl = total_pnl / total_trades if total_trades > 0 else 0
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(16, 10))
            
            # –ì—Ä–∞—Ñ–∏–∫ P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            cumulative_pnl = 0
            times = []
            pnl_values = []
            
            for trade in sorted_trades:
                cumulative_pnl += trade.pnl
                times.append(trade.exit_time)
                pnl_values.append(cumulative_pnl)
            
            ax1.plot(times, pnl_values, linewidth=3, color=self.colors['price'], marker='o')
            ax1.fill_between(times, pnl_values, alpha=0.3, color=self.colors['price'])
            ax1.axhline(y=0, color='black', linestyle='-', alpha=0.5)
            ax1.set_title(f"üí∞ {symbol} - –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏", fontsize=14)
            ax1.set_ylabel("P&L ($)")
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û {symbol}:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}                    ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {winning_trades} ({win_rate:.1f}%)
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {len(losing_trades)} ({100-win_rate:.1f}%)      ‚Ä¢ –û–±—â–∏–π P&L: {total_pnl:.2f}$
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π P&L: {avg_pnl:.2f}$                     ‚Ä¢ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {max(t.pnl for t in trades):.2f}$
‚Ä¢ –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {min(t.pnl for t in trades):.2f}$
            """
            
            ax2.text(0.05, 0.5, stats_text, fontsize=12, transform=ax2.transAxes, 
                    verticalalignment='center', fontfamily='monospace',
                    bbox=dict(boxstyle="round,pad=0.5", facecolor="lightgray", alpha=0.8))
            ax2.axis('off')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            filename = f"{symbol}_summary_statistics.png"
            filepath = self.pair_summaries_dir / filename
            plt.savefig(filepath, dpi=300, bbox_inches='tight', facecolor='white')
            plt.close()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ–±—â–∏–π —Å–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è {symbol}: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—â–µ–≥–æ —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {symbol}: {e}")

    def create_portfolio_overview(self, results: Dict[str, Any]) -> None:
        """
        üéØ –°–æ–∑–¥–∞–µ—Ç –æ–±–∑–æ—Ä –≤—Å–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º
        """
        try:
            logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –¥–ª—è {len(results)} –ø–∞—Ä")
            
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 15))
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            symbols = list(results.keys())
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–æ–≤
            win_rates = []
            total_pnls = []
            total_trades = []
            
            for symbol in symbols:
                result = results[symbol]
                if hasattr(result, 'win_rate'):
                    win_rates.append(result.win_rate)
                    total_pnls.append(result.total_pnl)
                    total_trades.append(result.total_trades)
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
                    win_rates.append(50.0)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    total_pnls.append(0.0)
                    total_trades.append(len(result) if isinstance(result, list) else 1)
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –í–∏–Ω—Ä–µ–π—Ç –ø–æ –ø–∞—Ä–∞–º
            colors = [self.colors['profit'] if wr >= 50 else self.colors['loss'] for wr in win_rates]
            bars1 = ax1.bar(symbols, win_rates, color=colors, alpha=0.7)
            ax1.axhline(y=50, color='black', linestyle='--', alpha=0.5, label='50% –≤–∏–Ω—Ä–µ–π—Ç')
            ax1.set_title("üìä –í–∏–Ω—Ä–µ–π—Ç –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º", fontsize=14, weight='bold')
            ax1.set_ylabel("–í–∏–Ω—Ä–µ–π—Ç (%)")
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, wr in zip(bars1, win_rates):
                height = bar.get_height()
                ax1.text(bar.get_x() + bar.get_width()/2., height + 1,
                        f'{wr:.1f}%', ha='center', va='bottom', fontweight='bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: P&L –ø–æ –ø–∞—Ä–∞–º
            colors = [self.colors['profit'] if pnl >= 0 else self.colors['loss'] for pnl in total_pnls]
            bars2 = ax2.bar(symbols, total_pnls, color=colors, alpha=0.7)
            ax2.axhline(y=0, color='black', linestyle='-', alpha=0.5)
            ax2.set_title("üí∞ P&L –ø–æ –≤–∞–ª—é—Ç–Ω—ã–º –ø–∞—Ä–∞–º", fontsize=14, weight='bold')
            ax2.set_ylabel("P&L ($)")
            ax2.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, pnl in zip(bars2, total_pnls):
                height = bar.get_height()
                ax2.text(bar.get_x() + bar.get_width()/2., height + (0.5 if height >= 0 else -0.5),
                        f'{pnl:.1f}$', ha='center', va='bottom' if height >= 0 else 'top', fontweight='bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
            ax3.bar(symbols, total_trades, color=self.colors['price'], alpha=0.7)
            ax3.set_title("üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø–æ –ø–∞—Ä–∞–º", fontsize=14, weight='bold')
            ax3.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫")
            ax3.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_all_trades = sum(total_trades)
            total_all_pnl = sum(total_pnls)
            avg_winrate = sum(win_rates) / len(win_rates) if win_rates else 0
            
            stats_text = f"""
üéØ –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–†–¢–§–ï–õ–Ø:

üìä –¢–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_all_trades}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_winrate:.1f}%
‚Ä¢ –û–±—â–∏–π P&L: {total_all_pnl:.2f}$

üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–∞—Ä–∞–º:
‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ä: {len([p for p in total_pnls if p > 0])}
‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö –ø–∞—Ä: {len([p for p in total_pnls if p <= 0])}
‚Ä¢ –õ—É—á—à–∞—è –ø–∞—Ä–∞: {symbols[total_pnls.index(max(total_pnls))]} ({max(total_pnls):.2f}$)
‚Ä¢ –•—É–¥—à–∞—è –ø–∞—Ä–∞: {symbols[total_pnls.index(min(total_pnls))]} ({min(total_pnls):.2f}$)

üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π P&L –Ω–∞ —Å–¥–µ–ª–∫—É: {total_all_pnl/total_all_trades:.2f}$ 
‚Ä¢ ROI –ø–æ—Ä—Ç—Ñ–µ–ª—è: {total_all_pnl:.2f}$
            """
            
            ax4.text(0.1, 0.5, stats_text, fontsize=11, transform=ax4.transAxes, 
                    verticalalignment='center', bbox=dict(boxstyle="round,pad=0.3", facecolor="lightblue", alpha=0.3))
            ax4.axis('off')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            filename = "portfolio_overview.png"
            filepath = self.portfolio_dir / filename
            plt.savefig(filepath, dpi=300, bbox_inches='tight')
            plt.close()
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –æ–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–∑–æ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

def generate_trade_reports(winrate_results: Dict[str, Any], test_period_days: int) -> Dict[str, str]:
    """
    üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        winrate_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞
        test_period_days: –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–Ω—è—Ö
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –æ—Ç—á–µ—Ç–∞–º
    """
    visualizer = DetailedTradeVisualizer()
    report_paths = {}
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç
    total_trades = sum(result.total_trades for result in winrate_results.values())
    total_wins = sum(result.winning_trades for result in winrate_results.values())
    overall_winrate = (total_wins / total_trades * 100) if total_trades > 0 else 0
    
    print(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã...")
    print(f"üìä –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {overall_winrate:.1f}% ({total_wins}/{total_trades})")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ
    for symbol, result in winrate_results.items():
        if result.trades:
            print(f"üìà –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è {symbol} ({len(result.trades)} —Å–¥–µ–ª–æ–∫)")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–æ–∫
            trade_data_list = []
            for trade in result.trades:
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ —Å–¥–µ–ª–∫–∏
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                mock_market_data = pd.DataFrame({
                    'open': [trade.entry_price] * 100,
                    'high': [trade.entry_price * 1.01] * 100,
                    'low': [trade.entry_price * 0.99] * 100,
                    'close': [trade.exit_price] * 100,
                    'volume': [1000000] * 100
                }, index=pd.date_range(trade.entry_time, periods=100, freq='1h'))
                
                trade_viz_data = TradeVisualizationData(
                    symbol=trade.symbol,
                    entry_time=trade.entry_time,
                    exit_time=trade.exit_time,
                    entry_price=trade.entry_price,
                    exit_price=trade.exit_price,
                    direction=trade.direction,
                    pnl=trade.pnl,
                    pnl_percent=trade.pnl_percent,
                    confidence=trade.confidence,
                    ai_model=trade.ai_model,
                    position_size=trade.position_size,
                    commission=trade.commission,
                    exit_reason=trade.exit_reason,
                    partial_exits=trade.partial_exits or [],
                    market_data=mock_market_data
                )
                trade_data_list.append(trade_viz_data)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç –ø–æ –ø–∞—Ä–µ
            pair_winrate = result.win_rate * 100
            pair_report_path = visualizer.create_pair_summary_chart(
                symbol, trade_data_list, mock_market_data, test_period_days, pair_winrate
            )
            report_paths[f'{symbol}_summary'] = pair_report_path
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–¥–µ–ª–∫–∞–º (–ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
            for i, trade_data in enumerate(trade_data_list[:5]):
                individual_report_path = visualizer.create_individual_trade_chart(
                    trade_data, test_period_days, pair_winrate
                )
                report_paths[f'{symbol}_trade_{i+1}'] = individual_report_path
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
    portfolio_data = {}
    for symbol, result in winrate_results.items():
        portfolio_data[symbol] = {
            'total_pnl': result.total_pnl,
            'win_rate': result.win_rate,
            'total_trades': result.total_trades,
            'avg_trade_pnl': result.avg_trade_pnl
        }
    
    portfolio_report_path = visualizer.create_portfolio_overview(
        portfolio_data, test_period_days, overall_winrate
    )
    report_paths['portfolio_overview'] = portfolio_report_path
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(report_paths)} –æ—Ç—á–µ—Ç–æ–≤")
    print(f"üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {visualizer.output_dir}")
    
    return report_paths

if __name__ == "__main__":
    print("üéØ –î–µ—Ç–∞–ª—å–Ω—ã–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")
    print("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é generate_trade_reports")