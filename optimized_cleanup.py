#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Peper Binance v4
–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ª–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É, –≤–∏–Ω—Ä–µ–π—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤—Å–µ 5 AI-–º–æ–¥–µ–ª–µ–π

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –°–û–•–†–ê–ù–Ø–ï–¢:
- winrate_test_with_results2.py (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞)
- –í—Å–µ 5 AI-–º–æ–¥–µ–ª–µ–π –≤ ai_modules/
- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
- –ü–∞–ø–∫—É models/ —Å –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã

–£–î–ê–õ–Ø–ï–¢:
- –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
- –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –ª–æ–≥–∏
- –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã
- –°—Ç–∞—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
"""

import os
import shutil
import logging
import json
import zipfile
import subprocess
import sys
import fnmatch
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Set, Tuple
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('cleanup_log.txt'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class OptimizedCleanup:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: str = None):
        self.project_root = Path(project_root) if project_root else Path.cwd()
        self.backup_dir = self.project_root / "cleanup_backup"
        self.stats = {
            'files_deleted': 0,
            'dirs_deleted': 0,
            'space_freed': 0,
            'backup_created': False
        }
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´ - –ù–ï –£–î–ê–õ–Ø–¢–¨!
        self.essential_files = {
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –≤–∏–Ω—Ä–µ–π—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'winrate_test_with_results2.py',
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
            'main.py',
            'config.py', 
            'data_collector.py',
            'historical_data_manager.py',
            'detailed_trade_visualizer.py',
            'requirements.txt',
            '.gitignore',
            '.gitattributes',
            
            # AI –º–æ–¥—É–ª–∏ (–≤—Å–µ 5 –º–æ–¥–µ–ª–µ–π)
            'ai_modules/trading_ai.py',
            'ai_modules/lava_ai.py',
            'ai_modules/lgbm_ai.py',
            'ai_modules/mistral_ai.py',
            'ai_modules/reinforcement_learning_engine.py',
            'ai_modules/ai_manager.py',
            'ai_modules/multi_ai_orchestrator.py',
            'ai_modules/mistral_server_manager.py',
            'ai_modules/__init__.py',
            
            # –£—Ç–∏–ª–∏—Ç—ã
            'utils/timezone_utils.py',
            'utils/__init__.py',
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            'config/config_manager.py',
            'config/reinforcement_learning_config.json',
            'config/reinforcement_learning_profiles.json',
            'config/__init__.py',
            
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            'database/persistence_manager.py',
            'database/reinforcement_learning_db.py',
            'database/__init__.py',
            
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            'analytics/reinforcement_learning_analytics.py',
        }
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ü–ê–ü–ö–ò - –ù–ï –£–î–ê–õ–Ø–¢–¨!
        self.essential_dirs = {
            'ai_modules',
            'models',
            'config', 
            'utils',
            'database',
            'analytics',
            '.trae'
        }
        
        # –§–ê–ô–õ–´ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø (–ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        self.files_to_delete = {
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç-—Ç–µ—Å—Ç–∞)
            'test_*.py',
            'debug_*.py', 
            'mock_*.py',
            'demo_*.py',
            '*_test.py',
            '*_debug.py',
            '*_mock.py',
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –¥–∞—Ç–∞–º–∏ (–æ—Å–æ–±–µ–Ω–Ω–æ 20251024)
            '*_20251024_*',
            '*_20251025_*',
            '*_20251026_*',
            '*_20251027_*',
            '*_20251028_*',
            
            # –û—Ç—á–µ—Ç—ã –∏ –ª–æ–≥–∏
            '*.html',
            '*.log',
            'report_*.json',
            'diagnostic_*.json',
            'test_report*.json',
            'quick_test_results.json',
            
            # –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            'advanced_backtester.py',
            'advanced_strategy_tester.py',
            'automated_multi_cycle_tester.py',
            'mass_testing_50_pairs.py',
            'mass_training_script.py',
            'improved_mass_testing.py',
            'individual_model_tester.py',
            'reinforcement_winrate_tester.py',
            'sequential_strategy_tester.py',
            'run_automated_tests.py',
            'run_sequential_testing.py',
            'run_strategy_testing.py',
            
            # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–¥—É–±–ª–∏)
            'ai_model_calibrator.py',
            'ai_models_diagnostics.py',
            'lava_ai_calibration.py',
            'parameter_optimizer.py',
            'quick_recalibration.py',
            'run_calibration.py',
            'trading_ai_trainer.py',
            
            # –ê–Ω–∞–ª–∏–∑ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–¥—É–±–ª–∏)
            'comprehensive_system_report.py',
            'diagnose_model.py',
            'integrated_trading_diagnostics.py',
            'results_analyzer.py',
            'zero_trades_diagnostics.py',
            'system_checker.py',
            
            # –°—Ç–∞—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã
            'enhanced_winrate_system.py',
            'ensemble_system.py',
            'optimized_quality_system.py',
            'premium_ultra_system.py',
            'quality_focused_system.py',
            'scalping_ensemble_system.py',
            
            # –°—Ç–∞—Ä—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            'enhanced_indicators.py',
            'enhanced_labeling_strategy.py',
            'improved_labeling_strategy.py',
            'strategy_manager.py',
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–¥—É–±–ª–∏)
            'trading_visualizer.py',
            'report_generator.py',
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–¥—É–±–ª–∏)
            'cli_monitor.py',
            'checkpoint_manager.py',
            
            # –°–∫—Ä–∏–ø—Ç—ã –∑–∞–ø—É—Å–∫–∞ (–¥—É–±–ª–∏)
            'run_reinforcement_learning.py',
            'run_scalping_system.py',
            'run_trading_analysis.py',
            'run_winrate_test.sh',
            'rl_quick_start.py',
            'activate_env.sh',
            
            # –ë—ç–∫–∞–ø—ã –∏ —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –æ—á–∏—Å—Ç–∫–∏
            'cleanup_script.py',
            'targeted_cleanup.py', 
            'final_cleanup.py',
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é)
            'ANALYSIS_CRITICAL_FIXES.md',
            'AUTOMATED_STRATEGY_TESTING_GUIDE.md',
            'CRITICAL_ISSUES_REPORT.md',
            'README_SCALPING.md',
            'README_automated_testing.md',
            'README_trading_ai.md',
            'SEQUENTIAL_TESTING_GUIDE.md',
            'VISUALIZATION_GUIDE.md',
            'adaptive_reinforcement_learning_system_requirements.md',
            'adaptive_reinforcement_learning_technical_architecture.md',
            'calibration_analysis_report.md',
            'final_optimization_results.md',
            'improvements_summary.md',
            'reinforcement_learning_implementation_plan.md',
            '–°–ò–°–¢–ï–ú–ê_–ì–û–¢–û–í–ê.md'
        }
        
        # –ü–ê–ü–ö–ò –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø
        self.dirs_to_delete = {
            'test_results',
            'automated_test_results',
            'training_results',
            'strategy_testing_results',
            'ai_diagnostic_system',  # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
        }
    
    def create_backup(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
            
            if self.backup_dir.exists():
                shutil.rmtree(self.backup_dir)
            
            self.backup_dir.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
            backup_file = self.backup_dir / f"project_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip"
            
            with zipfile.ZipFile(backup_file, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, dirs, files in os.walk(self.project_root):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É –±—ç–∫–∞–ø–∞
                    if 'cleanup_backup' in root:
                        continue
                        
                    for file in files:
                        file_path = Path(root) / file
                        arcname = file_path.relative_to(self.project_root)
                        zipf.write(file_path, arcname)
            
            self.stats['backup_created'] = True
            logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return False
    
    def get_file_size(self, file_path: Path) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        try:
            return file_path.stat().st_size
        except:
            return 0
    
    def is_essential_file(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–º"""
        relative_path = file_path.relative_to(self.project_root)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if str(relative_path) in self.essential_files:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
        for part in relative_path.parts:
            if part in self.essential_dirs:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ models
        if 'models' in relative_path.parts:
            return True
            
        return False
    
    def should_delete_file(self, file_path: Path) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª"""
        if self.is_essential_file(file_path):
            return False
        
        file_name = file_path.name
        relative_path = str(file_path.relative_to(self.project_root))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for pattern in self.files_to_delete:
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if file_name == pattern:
                return True
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º wildcard –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if '*' in pattern:
                if fnmatch.fnmatch(file_name, pattern):
                    return True
        
        return False
    
    def delete_files(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º"""
        logger.info("üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
        
        files_to_remove = []
        dirs_to_remove = []
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for root, dirs, files in os.walk(self.project_root):
            root_path = Path(root)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É –±—ç–∫–∞–ø–∞
            if 'cleanup_backup' in str(root_path):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            for dir_name in dirs[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                dir_path = root_path / dir_name
                relative_dir = str(dir_path.relative_to(self.project_root))
                
                if relative_dir in self.dirs_to_delete:
                    dirs_to_remove.append(dir_path)
                    dirs.remove(dir_name)  # –ù–µ –∑–∞—Ö–æ–¥–∏–º –≤ —ç—Ç—É –ø–∞–ø–∫—É
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            for file_name in files:
                file_path = root_path / file_name
                
                if self.should_delete_file(file_path):
                    files_to_remove.append(file_path)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
        for file_path in files_to_remove:
            try:
                size = self.get_file_size(file_path)
                file_path.unlink()
                self.stats['files_deleted'] += 1
                self.stats['space_freed'] += size
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path.relative_to(self.project_root)}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_path}: {e}")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏
        for dir_path in dirs_to_remove:
            try:
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏
                for root, dirs, files in os.walk(dir_path):
                    for file in files:
                        self.stats['space_freed'] += self.get_file_size(Path(root) / file)
                
                shutil.rmtree(dir_path)
                self.stats['dirs_deleted'] += 1
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {dir_path.relative_to(self.project_root)}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {dir_path}: {e}")
    
    def clean_empty_directories(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫...")
        
        for root, dirs, files in os.walk(self.project_root, topdown=False):
            for dir_name in dirs:
                dir_path = Path(root) / dir_name
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∂–Ω—ã–µ –ø–∞–ø–∫–∏
                if dir_name in self.essential_dirs:
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É –±—ç–∫–∞–ø–∞
                if 'cleanup_backup' in str(dir_path):
                    continue
                
                try:
                    if not any(dir_path.iterdir()):  # –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è
                        dir_path.rmdir()
                        self.stats['dirs_deleted'] += 1
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –ø–∞–ø–∫–∞: {dir_path.relative_to(self.project_root)}")
                except Exception as e:
                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É {dir_path}: {e}")
    
    def verify_essential_files(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        missing_files = []
        
        for essential_file in self.essential_files:
            file_path = self.project_root / essential_file
            if not file_path.exists():
                missing_files.append(essential_file)
        
        if missing_files:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã: {missing_files}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
        return True
    
    def test_system_functionality(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
            test_imports = [
                "import ai_modules.ai_manager",
                "import ai_modules.trading_ai", 
                "import ai_modules.lava_ai",
                "import ai_modules.lgbm_ai",
                "import ai_modules.mistral_ai",
                "import ai_modules.reinforcement_learning_engine",
                "import data_collector",
                "import historical_data_manager",
                "import config"
            ]
            
            for import_test in test_imports:
                try:
                    exec(import_test)
                    logger.info(f"‚úÖ {import_test}")
                except Exception as e:
                    logger.error(f"‚ùå {import_test}: {e}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å winrate_test_with_results2.py
            winrate_file = self.project_root / "winrate_test_with_results2.py"
            if not winrate_file.exists():
                logger.error("‚ùå –§–∞–π–ª winrate_test_with_results2.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö 5 AI-–º–æ–¥–µ–ª–µ–π
            ai_models = [
                "ai_modules/trading_ai.py",
                "ai_modules/lava_ai.py", 
                "ai_modules/lgbm_ai.py",
                "ai_modules/mistral_ai.py",
                "ai_modules/reinforcement_learning_engine.py"
            ]
            
            for model_file in ai_models:
                model_path = self.project_root / model_file
                if not model_path.exists():
                    logger.error(f"‚ùå AI-–º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_file}")
                    return False
                logger.info(f"‚úÖ AI-–º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_file}")
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ - –≤—Å–µ 5 AI-–º–æ–¥–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def generate_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ—á–∏—Å—Ç–∫–µ"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'stats': self.stats,
            'space_freed_mb': round(self.stats['space_freed'] / (1024 * 1024), 2),
            'essential_files_preserved': list(self.essential_files),
            'essential_dirs_preserved': list(self.essential_dirs)
        }
        
        report_file = self.project_root / "cleanup_report.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò:")
        logger.info(f"   –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {self.stats['files_deleted']}")
        logger.info(f"   –£–¥–∞–ª–µ–Ω–æ –ø–∞–ø–æ–∫: {self.stats['dirs_deleted']}")
        logger.info(f"   –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {report['space_freed_mb']} –ú–ë")
        logger.info(f"   –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {'–î–∞' if self.stats['backup_created'] else '–ù–µ—Ç'}")
    
    def rollback(self) -> bool:
        """–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –±—ç–∫–∞–ø–∞"""
        logger.info("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
        
        try:
            backup_files = list(self.backup_dir.glob("project_backup_*.zip"))
            if not backup_files:
                logger.error("‚ùå –§–∞–π–ª—ã –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                return False
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
            latest_backup = max(backup_files, key=lambda x: x.stat().st_mtime)
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç (–∫—Ä–æ–º–µ –±—ç–∫–∞–ø–∞)
            for item in self.project_root.iterdir():
                if item.name != 'cleanup_backup':
                    if item.is_dir():
                        shutil.rmtree(item)
                    else:
                        item.unlink()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            with zipfile.ZipFile(latest_backup, 'r') as zipf:
                zipf.extractall(self.project_root)
            
            logger.info("‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False
    
    def preview_cleanup(self) -> None:
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        logger.info("üîç –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –û–ß–ò–°–¢–ö–ò")
        logger.info("=" * 60)
        
        files_to_remove = []
        dirs_to_remove = []
        total_size = 0
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        for root, dirs, files in os.walk(self.project_root):
            root_path = Path(root)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫—É –±—ç–∫–∞–ø–∞
            if 'cleanup_backup' in str(root_path):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            for dir_name in dirs[:]:
                dir_path = root_path / dir_name
                relative_dir = str(dir_path.relative_to(self.project_root))
                
                if relative_dir in self.dirs_to_delete:
                    dirs_to_remove.append(relative_dir)
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏
                    for r, d, f in os.walk(dir_path):
                        for file in f:
                            total_size += self.get_file_size(Path(r) / file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            for file_name in files:
                file_path = root_path / file_name
                
                if self.should_delete_file(file_path):
                    relative_path = str(file_path.relative_to(self.project_root))
                    files_to_remove.append(relative_path)
                    total_size += self.get_file_size(file_path)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        logger.info(f"üìÅ –ü–ê–ü–ö–ò –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø ({len(dirs_to_remove)}):")
        for dir_path in sorted(dirs_to_remove):
            logger.info(f"   üóëÔ∏è {dir_path}")
        
        logger.info(f"\nüìÑ –§–ê–ô–õ–´ –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø ({len(files_to_remove)}):")
        for file_path in sorted(files_to_remove):
            logger.info(f"   üóëÔ∏è {file_path}")
        
        logger.info(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"   –ü–∞–ø–æ–∫ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len(dirs_to_remove)}")
        logger.info(f"   –§–∞–π–ª–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–∏—é: {len(files_to_remove)}")
        logger.info(f"   –û—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –º–µ—Å—Ç–∞: {round(total_size / (1024 * 1024), 2)} –ú–ë")
        
        logger.info(f"\n‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –§–ê–ô–õ–´ (–°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø):")
        for essential_file in sorted(self.essential_files):
            file_path = self.project_root / essential_file
            if file_path.exists():
                logger.info(f"   ‚úÖ {essential_file}")
        
        logger.info("=" * 60)
    
    def run_cleanup(self, create_backup: bool = True) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        logger.info("üöÄ –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –û–ß–ò–°–¢–ö–ò –ü–†–û–ï–ö–¢–ê")
        logger.info("=" * 60)
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
            if create_backup:
                if not self.create_backup():
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø. –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                    return False
            
            # 2. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            self.delete_files()
            
            # 3. –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –ø–∞–ø–æ–∫
            self.clean_empty_directories()
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not self.verify_essential_files():
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã!")
                if create_backup:
                    logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç...")
                    self.rollback()
                return False
            
            # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if not self.test_system_functionality():
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é")
                if create_backup:
                    logger.info("üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∫–∞—Ç")
            
            # 6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            self.generate_report()
            
            logger.info("=" * 60)
            logger.info("üéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            logger.info("‚úÖ –í–∏–Ω—Ä–µ–π—Ç-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ") 
            logger.info("‚úÖ –í—Å–µ 5 AI-–º–æ–¥–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            if create_backup:
                logger.info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç...")
                self.rollback()
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Peper Binance v4')
    parser.add_argument('--no-backup', action='store_true', help='–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –±—ç–∫–∞–ø')
    parser.add_argument('--rollback', action='store_true', help='–û—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è')
    parser.add_argument('--dry-run', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    cleanup = OptimizedCleanup()
    
    if args.rollback:
        cleanup.rollback()
        return
    
    if args.dry_run:
        cleanup.preview_cleanup()
        return
    
    success = cleanup.run_cleanup(create_backup=not args.no_backup)
    
    if not success:
        logger.error("‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    else:
        logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

if __name__ == "__main__":
    main()