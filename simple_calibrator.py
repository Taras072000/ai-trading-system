#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import logging
import pandas as pd
from datetime import datetime, timedelta
from ai_modules.ai_manager import AIManager, AIModuleType
from ai_modules.trading_ai import TradingAI
from ai_modules.lava_ai import LavaAI
from ai_modules.lgbm_ai import LGBMAI
from ai_modules.mistral_ai import MistralAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine
from data_collector import DataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SimpleCalibrator:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.data_manager = DataManager()
        self.ai_manager = None
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–µ–ª–µ–π
        self.models = {
            'trading_ai': TradingAI(),
            'lava_ai': LavaAI(),
            'lgbm_ai': LGBMAI(),
            'mistral_ai': MistralAI(),
            'reinforcement_learning_engine': ReinforcementLearningEngine()
        }
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        try:
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Manager...")
            self.ai_manager = AIManager()
            await self.ai_manager.initialize()
            
            logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π...")
            for name, model in self.models.items():
                if hasattr(model, 'initialize'):
                    await model.initialize()
                logger.info(f"‚úÖ {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
            logger.info("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def test_lava_ai(self):
        """–¢–µ—Å—Ç lava_ai –º–æ–¥–µ–ª–∏"""
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ lava_ai...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol = "BTCUSDT"
            data = await self.data_manager.ensure_data_available(symbol, "1h", 168)
            
            if data is None or len(data) == 0:
                logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
                
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–Ω–¥–µ–∫—Å - datetime
            if not isinstance(data.index, pd.DatetimeIndex):
                if 'timestamp' in data.columns:
                    data['timestamp'] = pd.to_datetime(data['timestamp'])
                    data.set_index('timestamp', inplace=True)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞ –¥–∞–Ω–Ω—ã—Ö")
                    data.index = pd.to_datetime(data.index)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º lava_ai –Ω–∞–ø—Ä—è–º—É—é
            lava_ai = self.models['lava_ai']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏
            if hasattr(lava_ai, 'generate_trading_signals'):
                signal = await lava_ai.generate_trading_signals(data)
                logger.info(f"üéØ –°–∏–≥–Ω–∞–ª –æ—Ç lava_ai: {signal}")
            elif hasattr(lava_ai, 'analyze_market_data'):
                analysis = await lava_ai.analyze_market_data(symbol, data)
                logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç lava_ai: {analysis}")
            elif hasattr(lava_ai, 'get_signal'):
                signal = await lava_ai.get_signal(data)
                logger.info(f"üéØ –°–∏–≥–Ω–∞–ª –æ—Ç lava_ai: {signal}")
            elif hasattr(lava_ai, 'analyze'):
                analysis = await lava_ai.analyze(data)
                logger.info(f"üìà –ê–Ω–∞–ª–∏–∑ –æ—Ç lava_ai: {analysis}")
            else:
                logger.error("‚ùå lava_ai –Ω–µ –∏–º–µ–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è lava_ai: {e}")
            import traceback
            traceback.print_exc()
    
    async def test_all_models(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            symbol = "BTCUSDT"
            data = await self.data_manager.ensure_data_available(symbol, "1h", 168)
            
            if data is None or len(data) == 0:
                logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
                
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∏–Ω–¥–µ–∫—Å - datetime
            if not isinstance(data.index, pd.DatetimeIndex):
                if 'timestamp' in data.columns:
                    data['timestamp'] = pd.to_datetime(data['timestamp'])
                    data.set_index('timestamp', inplace=True)
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω–¥–µ–∫—Å–∞ –¥–∞–Ω–Ω—ã—Ö")
                    data.index = pd.to_datetime(data.index)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
            model_methods = {
                'trading_ai': 'generate_trading_signals',
                'lava_ai': 'generate_trading_signals', 
                'lgbm_ai': 'predict_market_direction',
                'mistral_ai': 'analyze_trading_opportunity',
                'reinforcement_learning_engine': 'get_action'
            }
            
            for name, model in self.models.items():
                try:
                    logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name}...")
                    
                    method_name = model_methods.get(name)
                    if method_name and hasattr(model, method_name):
                        if name == 'lgbm_ai':
                            result = await getattr(model, method_name)(symbol, data)
                        elif name == 'mistral_ai':
                            result = await getattr(model, method_name)(symbol, data)
                        elif name == 'reinforcement_learning_engine':
                            result = await getattr(model, method_name)(symbol, data)
                        else:
                            result = await getattr(model, method_name)(data)
                        logger.info(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç {name}: {result}")
                    else:
                        logger.warning(f"‚ö†Ô∏è {name} –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ {method_name}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {name}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    calibrator = SimpleCalibrator()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if not await calibrator.initialize():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º lava_ai
    await calibrator.test_lava_ai()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
    await calibrator.test_all_models()

if __name__ == "__main__":
    asyncio.run(main())