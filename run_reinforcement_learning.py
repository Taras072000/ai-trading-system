#!/usr/bin/env python3
"""
Automated Reinforcement Learning Script
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
1. –ó–∞–ø—É—Å–∫–∞–µ—Ç Mistral —Å–µ—Ä–≤–µ—Ä
2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
3. –ü—Ä–æ–≤–æ–¥–∏—Ç winrate —Ç–µ—Å—Ç—ã —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º
4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã
5. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Mistral —Å–µ—Ä–≤–µ—Ä
"""

import asyncio
import argparse
import logging
import sys
import os
import signal
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine, ReinforcementConfig
from ai_modules.mistral_server_manager import MistralServerManager
from ai_modules.multi_ai_orchestrator import MultiAIOrchestrator
from reinforcement_winrate_tester import ReinforcementWinrateTester, ReinforcementTestConfig
from analytics.reinforcement_learning_analytics import ReinforcementLearningAnalytics, AnalyticsConfig
from database.persistence_manager import PersistenceManager, PersistenceConfig
from config.config_manager import ConfigManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/reinforcement_learning.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

class ReinforcementLearningRunner:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
    """
    
    def __init__(self, config_path: str = "config"):
        self.config_manager = ConfigManager(config_path)
        self.config = self.config_manager
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.persistence_manager = None
        self.mistral_manager = None
        self.orchestrator = None
        self.tester = None
        self.analytics = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.session_id = None
        self.is_running = False
        self.shutdown_requested = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        logger.info("‚úÖ ReinforcementLearningRunner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
        self.shutdown_requested = True
    
    async def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            os.makedirs("data", exist_ok=True)
            os.makedirs("logs", exist_ok=True)
            os.makedirs("reports", exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
            persistence_config = PersistenceConfig(
                db_path=self.config.persistence_config.database_path,
                auto_backup=True,
                backup_interval_hours=24,
                max_backups=self.config.persistence_config.max_backups,
                evolution_snapshot_interval=10,
                enable_compression=self.config.persistence_config.compress_old_data
            )
            self.persistence_manager = PersistenceManager(persistence_config)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Mistral –º–µ–Ω–µ–¥–∂–µ—Ä
            self.mistral_manager = MistralServerManager(self.config.mistral_server_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Mistral —Å–µ—Ä–≤–µ—Ä
            if self.config.mistral_server_config.auto_start:
                logger.info("üîÑ –ó–∞–ø—É—Å–∫ Mistral —Å–µ—Ä–≤–µ—Ä–∞...")
                if await self.mistral_manager.start_server():
                    logger.info("‚úÖ Mistral —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Mistral —Å–µ—Ä–≤–µ—Ä")
                    return False
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            self.orchestrator = MultiAIOrchestrator(
                backtest_mode=True,
                reinforcement_learning=True
            )
            await self.orchestrator.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–µ—Ä
            test_config = ReinforcementTestConfig(
                symbols=self.config.testing_config.default_symbols,
                start_date="2024-01-01",
                end_date="2024-12-31",
                initial_balance=10000
            )
            
            self.tester = ReinforcementWinrateTester(test_config)
            await self.tester.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            analytics_config = AnalyticsConfig(
                reports_dir="reports",
                plots_dir="plots",
                results_dir="results"
            )
            self.analytics = ReinforcementLearningAnalytics(analytics_config)
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    async def run_learning_cycle(self, profile_name: str, session_name: Optional[str] = None) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"""
        try:
            if not session_name:
                session_name = f"RL_Session_{profile_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è: {session_name} (–ø—Ä–æ—Ñ–∏–ª—å: {profile_name})")
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            if not self.config_manager.apply_profile(profile_name):
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")
                return False
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            initial_weights = self.config.ai_modules_config.initial_weights
            config_snapshot = {}
            
            self.session_id = self.persistence_manager.start_session(
                session_name=session_name,
                profile_name=profile_name,
                initial_weights=initial_weights,
                config_snapshot=config_snapshot
            )
            
            if not self.session_id:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            if self.orchestrator.rl_engine:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª—É—á—à–∏–µ –≤–µ—Å–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                best_weights = self.persistence_manager.get_best_performing_weights(30)
                if best_weights:
                    logger.info("üìà –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª—É—á—à–∏–µ –≤–µ—Å–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π")
                    self.orchestrator.rl_engine.load_weights(best_weights)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–±—É—á–µ–Ω–∏—è
                rl_config = ReinforcementConfig(
                    learning_rate=self.config.reinforcement_config.learning_rate,
                    reward_multiplier=self.config.reinforcement_config.reward_multiplier,
                    punishment_multiplier=self.config.reinforcement_config.punishment_multiplier,
                    weight_decay=self.config.reinforcement_config.weight_decay,
                    min_weight=self.config.reinforcement_config.min_weight,
                    max_weight=self.config.reinforcement_config.max_weight,
                    confidence_threshold=self.config.reinforcement_config.confidence_threshold
                )
                self.orchestrator.rl_engine.update_config(rl_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º
            self.is_running = True
            results = await self.tester.run_test_with_learning(
                orchestrator=self.orchestrator,
                persistence_manager=self.persistence_manager,
                session_id=self.session_id
            )
            
            if not results:
                logger.error("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
                return False
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
            final_weights = self.orchestrator.rl_engine.get_weights() if self.orchestrator.rl_engine else {}
            
            success = self.persistence_manager.end_session(
                final_weights=final_weights,
                total_trades=results.total_trades,
                profitable_trades=results.profitable_trades,
                total_pnl=results.total_pnl,
                win_rate=results.win_rate
            )
            
            if success:
                logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {self.session_id}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
                await self.generate_session_report()
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._print_session_results(results)
                
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False
        finally:
            self.is_running = False
    
    async def generate_session_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–µ—Å—Å–∏–∏"""
        try:
            if not self.session_id or not self.analytics:
                return
            
            logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–µ—Å—Å–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            session_data = self.persistence_manager.get_session_data(self.session_id)
            if not session_data:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á–µ—Ç
            report_path = f"reports/session_report_{self.session_id}.html"
            success = await self.analytics.generate_session_report(
                session_data=session_data,
                output_path=report_path
            )
            
            if success:
                logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _print_session_results(self, results):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Å—Å–∏–∏"""
        print("\n" + "="*80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ï–°–°–ò–ò –û–ë–£–ß–ï–ù–ò–Ø –° –ü–û–î–ö–†–ï–ü–õ–ï–ù–ò–ï–ú")
        print("="*80)
        print(f"üÜî ID —Å–µ—Å—Å–∏–∏: {self.session_id}")
        print(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {results.total_trades}")
        print(f"üí∞ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {results.profitable_trades}")
        print(f"üìä –í–∏–Ω—Ä–µ–π—Ç: {results.win_rate:.2f}%")
        print(f"üíµ –û–±—â–∏–π PnL: {results.total_pnl:.2f}")
        print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {results.avg_confidence:.3f}")
        print(f"‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {results.avg_duration:.1f} –º–∏–Ω")
        
        if hasattr(results, 'learning_stats') and results.learning_stats:
            print(f"\nüß† –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø:")
            stats = results.learning_stats
            print(f"üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {stats.get('total_rewards', 0)}")
            print(f"‚ö†Ô∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–∞–∫–∞–∑–∞–Ω–∏–π: {stats.get('total_punishments', 0)}")
            print(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Å–æ–≤: {stats.get('weight_changes', 0)}")
            
            if 'final_weights' in stats:
                print(f"\n‚öñÔ∏è –§–ò–ù–ê–õ–¨–ù–´–ï –í–ï–°–ê AI –ú–û–î–£–õ–ï–ô:")
                for ai_name, weight in stats['final_weights'].items():
                    print(f"   {ai_name}: {weight:.3f}")
        
        print("="*80)
        print(f"üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: reports/session_report_{self.session_id}.html")
        print("="*80 + "\n")
    
    async def run_continuous_learning(self, 
                                    profiles: List[str], 
                                    cycles_per_profile: int = 3,
                                    delay_between_cycles: int = 300):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"""
        try:
            logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {len(profiles)} –ø—Ä–æ—Ñ–∏–ª–µ–π, {cycles_per_profile} —Ü–∏–∫–ª–æ–≤ –∫–∞–∂–¥—ã–π")
            
            total_cycles = len(profiles) * cycles_per_profile
            current_cycle = 0
            
            for profile in profiles:
                if self.shutdown_requested:
                    break
                
                logger.info(f"üìã –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: {profile}")
                
                for cycle in range(cycles_per_profile):
                    if self.shutdown_requested:
                        break
                    
                    current_cycle += 1
                    session_name = f"Continuous_{profile}_Cycle_{cycle+1}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    
                    logger.info(f"üéØ –¶–∏–∫–ª {current_cycle}/{total_cycles}: {session_name}")
                    
                    success = await self.run_learning_cycle(profile, session_name)
                    
                    if not success:
                        logger.error(f"‚ùå –¶–∏–∫–ª {current_cycle} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                        continue
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
                    if current_cycle < total_cycles and not self.shutdown_requested:
                        logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ {delay_between_cycles} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
                        await asyncio.sleep(delay_between_cycles)
            
            logger.info("‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞
            if self.persistence_manager and self.persistence_manager.is_session_active():
                logger.info("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏...")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                if self.orchestrator and self.orchestrator.rl_engine:
                    final_weights = self.orchestrator.rl_engine.get_weights()
                    stats = self.orchestrator.rl_engine.get_performance_metrics()
                    
                    self.persistence_manager.end_session(
                        final_weights=final_weights,
                        total_trades=stats.get('total_trades', 0),
                        profitable_trades=stats.get('profitable_trades', 0),
                        total_pnl=stats.get('total_pnl', 0.0),
                        win_rate=stats.get('win_rate', 0.0)
                    )
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Mistral —Å–µ—Ä–≤–µ—Ä
            if self.mistral_manager and self.config.mistral_server_config.auto_stop:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mistral —Å–µ—Ä–≤–µ—Ä–∞...")
                await self.mistral_manager.stop_server()
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if self.persistence_manager:
                self.persistence_manager._create_backup_if_needed()
            
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    async def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status = {
                'timestamp': datetime.now().isoformat(),
                'is_running': self.is_running,
                'session_id': self.session_id,
                'mistral_server': None,
                'database': None,
                'recent_sessions': []
            }
            
            # –°—Ç–∞—Ç—É—Å Mistral —Å–µ—Ä–≤–µ—Ä–∞
            if self.mistral_manager:
                status['mistral_server'] = self.mistral_manager.get_server_status()
            
            # –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.persistence_manager:
                status['database'] = self.persistence_manager.get_database_info()
                status['recent_sessions'] = [
                    {
                        'session_id': session.session_id,
                        'session_name': session.session_name,
                        'start_time': session.start_time.isoformat(),
                        'win_rate': session.win_rate,
                        'total_pnl': session.total_pnl,
                        'status': session.status
                    }
                    for session in self.persistence_manager.get_recent_sessions(5)
                ]
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {'error': str(e)}

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Reinforcement Learning System for Peper Binance v4')
    parser.add_argument('--config', default='config/reinforcement_learning_config.json', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--profile', default='balanced', 
                       help='–ü—Ä–æ—Ñ–∏–ª—å –æ–±—É—á–µ–Ω–∏—è (conservative, balanced, aggressive, experimental)')
    parser.add_argument('--session-name', 
                       help='–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)')
    parser.add_argument('--continuous', action='store_true', 
                       help='–†–µ–∂–∏–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è')
    parser.add_argument('--profiles', nargs='+', default=['conservative', 'balanced', 'aggressive'],
                       help='–ü—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è')
    parser.add_argument('--cycles', type=int, default=3,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–∫–ª–æ–≤ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ')
    parser.add_argument('--delay', type=int, default=300,
                       help='–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--status', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ –≤—ã–π—Ç–∏')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º runner
    runner = ReinforcementLearningRunner(args.config)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if not await runner.initialize_components():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            return 1
        
        # –†–µ–∂–∏–º —Å—Ç–∞—Ç—É—Å–∞
        if args.status:
            status = await runner.get_system_status()
            print(json.dumps(status, indent=2, ensure_ascii=False))
            return 0
        
        # –†–µ–∂–∏–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        if args.continuous:
            await runner.run_continuous_learning(
                profiles=args.profiles,
                cycles_per_profile=args.cycles,
                delay_between_cycles=args.delay
            )
        else:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è
            success = await runner.run_learning_cycle(args.profile, args.session_name)
            if not success:
                return 1
        
        return 0
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        return 0
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    os.makedirs("logs", exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    exit_code = asyncio.run(main())
    sys.exit(exit_code)