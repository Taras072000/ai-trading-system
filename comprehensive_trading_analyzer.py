#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class ComprehensiveTradingAnalyzer:
    def __init__(self, csv_file_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            csv_file_path (str): –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤
        """
        self.csv_file_path = csv_file_path
        self.df = None
        self.load_data()
        
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.df = pd.read_csv(self.csv_file_path)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} —Ç–æ—Ä–≥–æ–≤ –∏–∑ {self.csv_file_path}")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            self.df['–í—Ä–µ–º—è –≤—Ö–æ–¥–∞'] = pd.to_datetime(self.df['–í—Ä–µ–º—è –≤—Ö–æ–¥–∞'])
            self.df['–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞'] = pd.to_datetime(self.df['–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞'])
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.df['–ß–∞—Å –≤—Ö–æ–¥–∞'] = self.df['–í—Ä–µ–º—è –≤—Ö–æ–¥–∞'].dt.hour
            self.df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'] = self.df['–í—Ä–µ–º—è –≤—Ö–æ–¥–∞'].dt.day_name()
            self.df['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–æ–º–µ—Ä)'] = self.df['–í—Ä–µ–º—è –≤—Ö–æ–¥–∞'].dt.dayofweek
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'] = (self.df['–†–µ–∑—É–ª—å—Ç–∞—Ç'] == '–ü—Ä–∏–±—ã–ª—å').astype(int)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–∏–ª—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è AI –º–æ–¥–µ–ª–∏
            self.df['–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è)'] = self.df['AI –º–æ–¥–µ–ª—å'].str.extract(r'consensus_(\d+)').astype(float)
            
            print("üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
            print(self.df.info())
            print("\nüìà –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"–û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'].mean()*100:.1f}%")
            print(f"–û–±—â–∏–π P&L: ${self.df['P&L ($)'].sum():.2f}")
            print(f"–°—Ä–µ–¥–Ω–∏–π P&L –Ω–∞ —Å–¥–µ–ª–∫—É: ${self.df['P&L ($)'].mean():.2f}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def analyze_entry_timing(self):
        """
        –ê–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        print("\n" + "="*60)
        print("üìÖ –ê–ù–ê–õ–ò–ó –¢–û–ß–ï–ö –í–•–û–î–ê –ü–û –í–†–ï–ú–ï–ù–ò")
        print("="*60)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º –¥–Ω—è
        hourly_stats = self.df.groupby('–ß–∞—Å –≤—Ö–æ–¥–∞').agg({
            '–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞': ['count', 'sum', 'mean'],
            'P&L ($)': ['sum', 'mean']
        }).round(3)
        
        hourly_stats.columns = ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–í–∏–Ω—Ä–µ–π—Ç', '–û–±—â–∏–π P&L', '–°—Ä–µ–¥–Ω–∏–π P&L']
        hourly_stats['–í–∏–Ω—Ä–µ–π—Ç %'] = (hourly_stats['–í–∏–Ω—Ä–µ–π—Ç'] * 100).round(1)
        
        print("\nüïê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ß–ê–°–ê–ú –î–ù–Ø:")
        print(hourly_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False))
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        daily_stats = self.df.groupby('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏').agg({
            '–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞': ['count', 'sum', 'mean'],
            'P&L ($)': ['sum', 'mean']
        }).round(3)
        
        daily_stats.columns = ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–í–∏–Ω—Ä–µ–π—Ç', '–û–±—â–∏–π P&L', '–°—Ä–µ–¥–Ω–∏–π P&L']
        daily_stats['–í–∏–Ω—Ä–µ–π—Ç %'] = (daily_stats['–í–∏–Ω—Ä–µ–π—Ç'] * 100).round(1)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
        daily_stats = daily_stats.reindex([day for day in day_order if day in daily_stats.index])
        
        print("\nüìÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–ù–Ø–ú –ù–ï–î–ï–õ–ò:")
        print(daily_stats)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        best_hours = hourly_stats[hourly_stats['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫'] >= 2].sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False).head(3)
        worst_hours = hourly_stats[hourly_stats['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫'] >= 2].sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=True).head(3)
        
        print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–†–ï–ú–ï–ù–ò –í–•–û–î–ê:")
        if len(best_hours) > 0:
            print(f"‚úÖ –õ—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è –≤—Ö–æ–¥–∞: {list(best_hours.index)} (–≤–∏–Ω—Ä–µ–π—Ç: {best_hours['–í–∏–Ω—Ä–µ–π—Ç %'].mean():.1f}%)")
        if len(worst_hours) > 0:
            print(f"‚ùå –•—É–¥—à–∏–µ —á–∞—Å—ã –¥–ª—è –≤—Ö–æ–¥–∞: {list(worst_hours.index)} (–≤–∏–Ω—Ä–µ–π—Ç: {worst_hours['–í–∏–Ω—Ä–µ–π—Ç %'].mean():.1f}%)")
        
        best_days = daily_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False).head(3)
        if len(best_days) > 0:
            print(f"‚úÖ –õ—É—á—à–∏–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏: {list(best_days.index)} (–≤–∏–Ω—Ä–µ–π—Ç: {best_days['–í–∏–Ω—Ä–µ–π—Ç %'].mean():.1f}%)")
        
        return hourly_stats, daily_stats
    
    def analyze_stop_loss_take_profit(self):
        """
        –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        """
        print("\n" + "="*60)
        print("üéØ –ê–ù–ê–õ–ò–ó –°–¢–û–ü-–õ–û–°–° / –¢–ï–ô–ö-–ü–†–û–§–ò–¢")
        print("="*60)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        profitable_trades = self.df[self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'] == 1]
        losing_trades = self.df[self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'] == 0]
        
        print(f"\nüìä –¢–ï–ö–£–©–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ SL=1%, TP=2%):")
        print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(profitable_trades)} ({len(profitable_trades)/len(self.df)*100:.1f}%)")
        print(f"–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(losing_trades)} ({len(losing_trades)/len(self.df)*100:.1f}%)")
        
        if len(profitable_trades) > 0:
            print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–µ: ${profitable_trades['P&L ($)'].mean():.2f}")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${profitable_trades['P&L ($)'].max():.2f}")
            print(f"–°—Ä–µ–¥–Ω–∏–π % –ø—Ä–∏–±—ã–ª–∏: {profitable_trades['P&L (%)'].mean():.2f}%")
        
        if len(losing_trades) > 0:
            print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ –Ω–∞ —É–±—ã—Ç–æ—á–Ω–æ–π —Å–¥–µ–ª–∫–µ: ${losing_trades['P&L ($)'].mean():.2f}")
            print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–±—ã—Ç–æ–∫: ${losing_trades['P&L ($)'].min():.2f}")
            print(f"–°—Ä–µ–¥–Ω–∏–π % —É–±—ã—Ç–∫–∞: {losing_trades['P&L (%)'].mean():.2f}%")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è P&L
        print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï P&L:")
        print(f"P&L –æ—Ç 0% –¥–æ 1%: {len(self.df[(self.df['P&L (%)'] >= 0) & (self.df['P&L (%)'] <= 1)])} —Å–¥–µ–ª–æ–∫")
        print(f"P&L –æ—Ç 1% –¥–æ 2%: {len(self.df[(self.df['P&L (%)'] > 1) & (self.df['P&L (%)'] <= 2)])} —Å–¥–µ–ª–æ–∫")
        print(f"P&L –±–æ–ª—å—à–µ 2%: {len(self.df[self.df['P&L (%)'] > 2])} —Å–¥–µ–ª–æ–∫")
        print(f"P&L –æ—Ç -1% –¥–æ 0%: {len(self.df[(self.df['P&L (%)'] >= -1) & (self.df['P&L (%)'] < 0)])} —Å–¥–µ–ª–æ–∫")
        print(f"P&L –º–µ–Ω—å—à–µ -1%: {len(self.df[self.df['P&L (%)'] < -1])} —Å–¥–µ–ª–æ–∫")
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ SL/TP
        print(f"\nüî¨ –°–ò–ú–£–õ–Ø–¶–ò–Ø –†–ê–ó–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í SL/TP:")
        
        scenarios = [
            (0.5, 1.0),   # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π
            (0.5, 1.5),   # –£–º–µ—Ä–µ–Ω–Ω–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π
            (1.0, 2.0),   # –¢–µ–∫—É—â–∏–π
            (1.5, 3.0),   # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
            (2.0, 4.0),   # –û—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
        ]
        
        for sl, tp in scenarios:
            simulated_trades = self.simulate_sl_tp(sl, tp)
            win_rate = simulated_trades['win_rate']
            total_pnl = simulated_trades['total_pnl']
            avg_pnl = simulated_trades['avg_pnl']
            
            print(f"SL={sl}%, TP={tp}%: –í–∏–Ω—Ä–µ–π—Ç={win_rate:.1f}%, –û–±—â–∏–π P&L=${total_pnl:.2f}, –°—Ä–µ–¥–Ω–∏–π P&L=${avg_pnl:.2f}")
        
        return self.get_sl_tp_recommendations()
    
    def simulate_sl_tp(self, stop_loss_pct, take_profit_pct):
        """
        –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ SL/TP
        """
        wins = 0
        total_pnl = 0
        
        for _, trade in self.df.iterrows():
            actual_pnl_pct = trade['P&L (%)']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if actual_pnl_pct >= take_profit_pct:
                # –î–æ—Å—Ç–∏–≥–ª–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
                wins += 1
                total_pnl += take_profit_pct * trade['–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏'] / 100
            elif actual_pnl_pct <= -stop_loss_pct:
                # –î–æ—Å—Ç–∏–≥–ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                total_pnl -= stop_loss_pct * trade['–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏'] / 100
            else:
                # –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if actual_pnl_pct > 0:
                    wins += 1
                total_pnl += actual_pnl_pct * trade['–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏'] / 100
        
        return {
            'win_rate': wins / len(self.df) * 100,
            'total_pnl': total_pnl,
            'avg_pnl': total_pnl / len(self.df)
        }
    
    def get_sl_tp_recommendations(self):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SL/TP"""
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò SL/TP:")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
        avg_hold_time = self.df['–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)'].mean()
        profitable_hold_time = self.df[self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'] == 1]['–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)'].mean()
        losing_hold_time = self.df[self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'] == 0]['–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)'].mean()
        
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {avg_hold_time:.1f} —á–∞—Å–æ–≤")
        print(f"üìà –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–µ—Ä–∂–∞—Ç—Å—è: {profitable_hold_time:.1f} —á–∞—Å–æ–≤")
        if not pd.isna(losing_hold_time):
            print(f"üìâ –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–µ—Ä–∂–∞—Ç—Å—è: {losing_hold_time:.1f} —á–∞—Å–æ–≤")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        current_win_rate = self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'].mean() * 100
        if current_win_rate < 60:
            recommendations.append("üî¥ –¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç –Ω–∏–∑–∫–∏–π - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ SL/TP")
        
        # –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –ø—Ä–∏–±—ã–ª–µ–π
        big_wins = len(self.df[self.df['P&L (%)'] > 3])
        if big_wins > len(self.df) * 0.1:  # –ë–æ–ª—å—à–µ 10% —Å–¥–µ–ª–æ–∫ –¥–∞—é—Ç >3%
            recommendations.append("üü¢ –ú–Ω–æ–≥–æ —Å–¥–µ–ª–æ–∫ —Å –±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å TP")
        
        # –ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö —É–±—ã—Ç–∫–æ–≤
        big_losses = len(self.df[self.df['P&L (%)'] < -2])
        if big_losses > len(self.df) * 0.1:  # –ë–æ–ª—å—à–µ 10% —Å–¥–µ–ª–æ–∫ —Ç–µ—Ä—è—é—Ç >2%
            recommendations.append("üî¥ –ú–Ω–æ–≥–æ –±–æ–ª—å—à–∏—Ö —É–±—ã—Ç–∫–æ–≤ - –Ω—É–∂–Ω–æ —É–∂–µ—Å—Ç–æ—á–∏—Ç—å SL")
        
        for rec in recommendations:
            print(rec)
        
        return recommendations
    
    def analyze_consensus_filters(self):
        """
        –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –∏ confidence —É—Ä–æ–≤–Ω–µ–π
        """
        print("\n" + "="*60)
        print("ü§ù –ê–ù–ê–õ–ò–ó –§–ò–õ–¨–¢–†–û–í –ö–û–ù–°–ï–ù–°–£–°–ê")
        print("="*60)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–ª–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_stats = None
        if '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è)' in self.df.columns and not self.df['–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è)'].isna().all():
            consensus_stats = self.df.groupby('–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ (–∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è)').agg({
                '–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞': ['count', 'sum', 'mean'],
                'P&L ($)': ['sum', 'mean'],
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)': 'mean'
            }).round(3)
            
            consensus_stats.columns = ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–í–∏–Ω—Ä–µ–π—Ç', '–û–±—â–∏–π P&L', '–°—Ä–µ–¥–Ω–∏–π P&L', '–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å']
            consensus_stats['–í–∏–Ω—Ä–µ–π—Ç %'] = (consensus_stats['–í–∏–Ω—Ä–µ–π—Ç'] * 100).round(1)
            
            print("\nü§ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–õ–ï –ö–û–ù–°–ï–ù–°–£–°–ê:")
            print(consensus_stats.sort_index())
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —É—Ä–æ–≤–Ω—è–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidence_bins = [0, 0.2, 0.3, 0.4, 0.5, 1.0]
        confidence_labels = ['0-20%', '20-30%', '30-40%', '40-50%', '50%+']
        
        self.df['–ì—Ä—É–ø–ø–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'] = pd.cut(self.df['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)'], 
                                               bins=confidence_bins, 
                                               labels=confidence_labels, 
                                               include_lowest=True)
        
        confidence_stats = self.df.groupby('–ì—Ä—É–ø–ø–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏').agg({
            '–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞': ['count', 'sum', 'mean'],
            'P&L ($)': ['sum', 'mean']
        }).round(3)
        
        confidence_stats.columns = ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–í–∏–Ω—Ä–µ–π—Ç', '–û–±—â–∏–π P&L', '–°—Ä–µ–¥–Ω–∏–π P&L']
        confidence_stats['–í–∏–Ω—Ä–µ–π—Ç %'] = (confidence_stats['–í–∏–Ω—Ä–µ–π—Ç'] * 100).round(1)
        
        print("\nüéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –£–†–û–í–ù–Ø–ú –£–í–ï–†–ï–ù–ù–û–°–¢–ò:")
        print(confidence_stats)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ AI –º–æ–¥–µ–ª—è–º
        ai_stats = self.df.groupby('AI –º–æ–¥–µ–ª—å').agg({
            '–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞': ['count', 'sum', 'mean'],
            'P&L ($)': ['sum', 'mean'],
            '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)': 'mean'
        }).round(3)
        
        ai_stats.columns = ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–í–∏–Ω—Ä–µ–π—Ç', '–û–±—â–∏–π P&L', '–°—Ä–µ–¥–Ω–∏–π P&L', '–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å']
        ai_stats['–í–∏–Ω—Ä–µ–π—Ç %'] = (ai_stats['–í–∏–Ω—Ä–µ–π—Ç'] * 100).round(1)
        
        print("\nü§ñ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û AI –ú–û–î–ï–õ–Ø–ú:")
        print(ai_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False))
        
        return self.get_consensus_recommendations(consensus_stats, confidence_stats, ai_stats)
    
    def get_consensus_recommendations(self, consensus_stats, confidence_stats, ai_stats):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –§–ò–õ–¨–¢–†–ê–ú –ö–û–ù–°–ï–ù–°–£–°–ê:")
        
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        if len(confidence_stats) > 0:
            best_confidence = confidence_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False).iloc[0]
            worst_confidence = confidence_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=True).iloc[0]
            
            print(f"üìä –õ—É—á—à–∞—è –≥—Ä—É–ø–ø–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {best_confidence.name} (–≤–∏–Ω—Ä–µ–π—Ç: {best_confidence['–í–∏–Ω—Ä–µ–π—Ç %']:.1f}%)")
            print(f"üìä –•—É–¥—à–∞—è –≥—Ä—É–ø–ø–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {worst_confidence.name} (–≤–∏–Ω—Ä–µ–π—Ç: {worst_confidence['–í–∏–Ω—Ä–µ–π—Ç %']:.1f}%)")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            current_min_confidence = self.df['–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)'].min()
            if current_min_confidence < 0.3:
                if '30-40%' in confidence_stats.index and '0-20%' in confidence_stats.index:
                    if confidence_stats.loc['30-40%', '–í–∏–Ω—Ä–µ–π—Ç %'] > confidence_stats.loc['0-20%', '–í–∏–Ω—Ä–µ–π—Ç %']:
                        recommendations.append("üî¥ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—ã—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ 30%")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        if consensus_stats is not None and len(consensus_stats) > 1:
            best_consensus = consensus_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False).iloc[0]
            print(f"üìä –õ—É—á—à–∞—è —Å–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {best_consensus.name} (–≤–∏–Ω—Ä–µ–π—Ç: {best_consensus['–í–∏–Ω—Ä–µ–π—Ç %']:.1f}%)")
            
            if best_consensus.name > 3:
                recommendations.append("üü¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å –º–∏–Ω–∏–º—É–º 4+ –º–æ–¥–µ–ª–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑ AI –º–æ–¥–µ–ª–µ–π
        if len(ai_stats) > 0:
            best_ai = ai_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False).iloc[0]
            worst_ai = ai_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=True).iloc[0]
            
            print(f"üìä –õ—É—á—à–∞—è AI –º–æ–¥–µ–ª—å: {best_ai.name} (–≤–∏–Ω—Ä–µ–π—Ç: {best_ai['–í–∏–Ω—Ä–µ–π—Ç %']:.1f}%)")
            print(f"üìä –•—É–¥—à–∞—è AI –º–æ–¥–µ–ª—å: {worst_ai.name} (–≤–∏–Ω—Ä–µ–π—Ç: {worst_ai['–í–∏–Ω—Ä–µ–π—Ç %']:.1f}%)")
            
            if worst_ai['–í–∏–Ω—Ä–µ–π—Ç %'] < 40:
                recommendations.append(f"üî¥ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å {worst_ai.name} (–Ω–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç)")
        
        for rec in recommendations:
            print(rec)
        
        return recommendations
    
    def analyze_volume_correlation(self):
        """
        –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ —Å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
        """
        print("\n" + "="*60)
        print("üìä –ê–ù–ê–õ–ò–ó –û–ë–™–ï–ú–û–í –¢–û–†–ì–û–í")
        print("="*60)
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        position_stats = self.df.groupby('–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞').agg({
            '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': ['mean', 'median', 'std'],
            'P&L ($)': ['sum', 'mean']
        }).round(3)
        
        print("\nüí∞ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ê–ó–ú–ï–†–£ –ü–û–ó–ò–¶–ò–ò:")
        if 1 in position_stats.index:
            print("–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏:")
            print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {position_stats.loc[1, ('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', 'mean')]:.2f}")
            print(f"  –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {position_stats.loc[1, ('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', 'median')]:.2f}")
        
        if 0 in position_stats.index:
            print("–£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏:")
            print(f"  –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {position_stats.loc[0, ('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', 'mean')]:.2f}")
            print(f"  –ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {position_stats.loc[0, ('–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', 'median')]:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_stats = self.df.groupby('–°–∏–º–≤–æ–ª').agg({
            '–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞': ['count', 'sum', 'mean'],
            'P&L ($)': ['sum', 'mean'],
            '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': 'mean'
        }).round(3)
        
        symbol_stats.columns = ['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫', '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö', '–í–∏–Ω—Ä–µ–π—Ç', '–û–±—â–∏–π P&L', '–°—Ä–µ–¥–Ω–∏–π P&L', '–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏']
        symbol_stats['–í–∏–Ω—Ä–µ–π—Ç %'] = (symbol_stats['–í–∏–Ω—Ä–µ–π—Ç'] * 100).round(1)
        
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        print(symbol_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False))
        
        return symbol_stats
    
    def generate_comprehensive_report(self):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        print("\n" + "="*80)
        print("üìã –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –û–¢–ß–ï–¢ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print("="*80)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = len(self.df)
        win_rate = self.df['–£—Å–ø–µ—à–Ω–∞—è —Å–¥–µ–ª–∫–∞'].mean() * 100
        total_pnl = self.df['P&L ($)'].sum()
        avg_pnl = self.df['P&L ($)'].mean()
        
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"–í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%")
        print(f"–û–±—â–∏–π P&L: ${total_pnl:.2f}")
        print(f"–°—Ä–µ–¥–Ω–∏–π P&L –Ω–∞ —Å–¥–µ–ª–∫—É: ${avg_pnl:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        hourly_stats, daily_stats = self.analyze_entry_timing()
        sl_tp_recommendations = self.analyze_stop_loss_take_profit()
        consensus_recommendations = self.analyze_consensus_filters()
        volume_stats = self.analyze_volume_correlation()
        
        # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø 75%+ –í–ò–ù–†–ï–ô–¢–ê:")
        print("="*60)
        
        recommendations = []
        
        # 1. –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        best_hours = hourly_stats[hourly_stats['–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫'] >= 2].sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False).head(3)
        if len(best_hours) > 0 and best_hours['–í–∏–Ω—Ä–µ–π—Ç %'].mean() > win_rate:
            recommendations.append(f"‚è∞ –¢–æ—Ä–≥–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Å—ã: {list(best_hours.index)} (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç: {best_hours['–í–∏–Ω—Ä–µ–π—Ç %'].mean():.1f}%)")
        
        # 2. SL/TP –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        if win_rate < 60:
            recommendations.append("üéØ –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ SL/TP (–Ω–∞–ø—Ä–∏–º–µ—Ä, SL=0.5%, TP=1.5%)")
        
        # 3. –§–∏–ª—å—Ç—Ä—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        recommendations.append("ü§ù –¢—Ä–µ–±–æ–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å 4+ –º–æ–¥–µ–ª–µ–π")
        recommendations.append("üéØ –ü–æ–≤—ã—Å–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ 30%+")
        
        # 4. –°–∏–º–≤–æ–ª—ã
        best_symbols = volume_stats.sort_values('–í–∏–Ω—Ä–µ–π—Ç %', ascending=False).head(2)
        if len(best_symbols) > 0:
            recommendations.append(f"üìà –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –ª—É—á—à–∏—Ö —Å–∏–º–≤–æ–ª–∞—Ö: {list(best_symbols.index)}")
        
        # 5. –û–±—ä–µ–º—ã
        recommendations.append("üí∞ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–∞")
        
        print("\nüöÄ –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
        for i, rec in enumerate(recommendations, 1):
            print(f"{i}. {rec}")
        
        # –ü—Ä–æ–≥–Ω–æ–∑ —É–ª—É—á—à–µ–Ω–∏–π
        print(f"\nüìà –ü–†–û–ì–ù–û–ó –£–õ–£–ß–®–ï–ù–ò–ô:")
        print("–ü—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–∂–∏–¥–∞–µ—Ç—Å—è:")
        print("‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: 70-80% (—Ç–µ–∫—É—â–∏–π: {:.1f}%)".format(win_rate))
        print("‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —É–±—ã—Ç–∫–æ–≤ –Ω–∞ 30-50%")
        print("‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Å–¥–µ–ª–∫—É –Ω–∞ 20-40%")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_path = f"reports/comprehensive_analysis_{timestamp}.txt"
        
        try:
            import os
            os.makedirs("reports", exist_ok=True)
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write("–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´\n")
                f.write("="*50 + "\n\n")
                f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {self.csv_file_path}\n")
                f.write(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}\n")
                f.write(f"–í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n")
                f.write(f"–û–±—â–∏–π P&L: ${total_pnl:.2f}\n\n")
                
                f.write("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
                for i, rec in enumerate(recommendations, 1):
                    f.write(f"{i}. {rec}\n")
            
            print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        
        return recommendations

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç—å –∫ —Å–∞–º–æ–º—É —Å–≤–µ–∂–µ–º—É —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
    csv_file = "reports/csv_reports/all_trades_20251022_125859.csv"
    
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        analyzer = ComprehensiveTradingAnalyzer(csv_file)
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        recommendations = analyzer.generate_comprehensive_report()
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìã –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤—ã–≤–µ–¥–µ–Ω—ã –≤—ã—à–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()