#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –º–æ–¥—É–ª—è Lava AI
"""

import sys
import os
import pandas as pd
import numpy as np
import asyncio
from datetime import datetime, timedelta
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'ai_modules'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def generate_test_data(days=30, symbol='BTCUSDT'):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    np.random.seed(42)
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    start_price = 50000
    periods = days * 24 * 4  # 15-–º–∏–Ω—É—Ç–Ω—ã–µ —Å–≤–µ—á–∏
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
    price_changes = np.random.normal(0, 0.002, periods)
    trend = np.linspace(0, 0.1, periods)  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    
    prices = [start_price]
    for i in range(1, periods):
        new_price = prices[-1] * (1 + price_changes[i] + trend[i]/periods)
        prices.append(max(new_price, 1000))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OHLC –¥–∞–Ω–Ω—ã—Ö
    data = []
    for i in range(periods):
        open_price = prices[i]
        close_price = prices[i] * (1 + np.random.normal(0, 0.001))
        high_price = max(open_price, close_price) * (1 + abs(np.random.normal(0, 0.002)))
        low_price = min(open_price, close_price) * (1 - abs(np.random.normal(0, 0.002)))
        volume = np.random.lognormal(15, 1)  # –õ–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤
        
        timestamp = datetime.now() - timedelta(minutes=15*(periods-i))
        
        data.append({
            'timestamp': timestamp,
            'open': open_price,
            'high': high_price,
            'low': low_price,
            'close': close_price,
            'volume': volume,
            'symbol': symbol
        })
    
    return pd.DataFrame(data)

async def test_lava_ai_improvements():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π Lava AI...")
        
        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
        from lava_ai import LavaAI
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        lava_ai = LavaAI()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        test_data = generate_test_data(days=30)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        test_scenarios = [
            {
                'name': '–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è',
                'data': test_data,
                'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é'
            },
            {
                'name': '–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
                'data': add_volatility(test_data.copy(), multiplier=3),
                'description': '–î–∞–Ω–Ω—ã–µ —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é'
            },
            {
                'name': '–ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥',
                'data': create_sideways_trend(test_data.copy()),
                'description': '–î–∞–Ω–Ω—ã–µ —Å –±–æ–∫–æ–≤—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã'
            },
            {
                'name': '–ù–∏–∑–∫–∏–π –æ–±—ä–µ–º',
                'data': reduce_volume(test_data.copy(), factor=0.3),
                'description': '–î–∞–Ω–Ω—ã–µ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–º–∞–º–∏'
            }
        ]
        
        results = []
        
        for scenario in test_scenarios:
            logger.info(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario['name']}")
            logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ: {scenario['description']}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            signals_result = await lava_ai.generate_trading_signals(scenario['data'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
            if not isinstance(signals_result, dict):
                logger.error(f"–û—à–∏–±–∫–∞: generate_trading_signals –≤–µ—Ä–Ω—É–ª {type(signals_result)}, –æ–∂–∏–¥–∞–ª—Å—è dict")
                signals_result = {}
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            analysis = analyze_signals_quality(signals_result, scenario['data'])
            
            result = {
                'scenario': scenario['name'],
                'description': scenario['description'],
                'signal': signals_result.get('signal', 'UNKNOWN'),
                'confidence': signals_result.get('confidence', 0),
                'signal_quality': signals_result.get('signal_quality', 0),
                'market_conditions': signals_result.get('market_conditions', {}),
                'adapted_thresholds': signals_result.get('adapted_thresholds', {}),
                'technical_indicators': signals_result.get('technical_indicators', {}),
                'analysis': analysis
            }
            
            results.append(result)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print_scenario_results(result)
        
        # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
        logger.info("\n" + "="*60)
        logger.info("–û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        logger.info("="*60)
        
        print_summary_analysis(results)
        
        return results
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return None

def add_volatility(data, multiplier=2):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º"""
    for i in range(1, len(data)):
        change = (data.loc[i, 'close'] - data.loc[i-1, 'close']) / data.loc[i-1, 'close']
        enhanced_change = change * multiplier
        data.loc[i, 'close'] = data.loc[i-1, 'close'] * (1 + enhanced_change)
        data.loc[i, 'high'] = max(data.loc[i, 'close'], data.loc[i, 'high']) * 1.02
        data.loc[i, 'low'] = min(data.loc[i, 'close'], data.loc[i, 'low']) * 0.98
    return data

def create_sideways_trend(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞"""
    base_price = data['close'].iloc[0]
    for i in range(len(data)):
        noise = np.random.normal(0, 0.005)
        data.loc[i, 'close'] = base_price * (1 + noise)
        data.loc[i, 'high'] = data.loc[i, 'close'] * 1.01
        data.loc[i, 'low'] = data.loc[i, 'close'] * 0.99
    return data

def reduce_volume(data, factor=0.5):
    """–°–Ω–∏–∂–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤"""
    data['volume'] = data['volume'] * factor
    return data

def analyze_signals_quality(signals_result, data):
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    analysis = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    analysis['has_technical_indicators'] = 'technical_indicators' in signals_result
    analysis['has_market_conditions'] = 'market_conditions' in signals_result
    analysis['has_adapted_thresholds'] = 'adapted_thresholds' in signals_result
    analysis['has_signal_quality'] = 'signal_quality' in signals_result
    
    # –ê–Ω–∞–ª–∏–∑ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    if 'adapted_thresholds' in signals_result:
        adapted = signals_result['adapted_thresholds']
        analysis['threshold_adaptation'] = {
            'rsi_oversold': adapted.get('rsi_oversold', 30),
            'rsi_overbought': adapted.get('rsi_overbought', 70),
            'volume_multiplier': adapted.get('volume_multiplier', 1.5)
        }
    
    # –û—Ü–µ–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    if 'technical_indicators' in signals_result:
        indicators = signals_result['technical_indicators']
        analysis['indicator_consistency'] = evaluate_indicator_consistency(indicators)
    
    return analysis

def evaluate_indicator_consistency(indicators):
    """–û—Ü–µ–Ω–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    bullish_count = 0
    bearish_count = 0
    
    # RSI
    rsi = indicators.get('rsi', 50)
    if rsi < 30:
        bullish_count += 1
    elif rsi > 70:
        bearish_count += 1
    
    # MACD
    macd_hist = indicators.get('macd_histogram', 0)
    if macd_hist > 0:
        bullish_count += 1
    elif macd_hist < 0:
        bearish_count += 1
    
    # Bollinger Bands
    bb_position = indicators.get('bb_position', 0.5)
    if bb_position < 0.2:
        bullish_count += 1
    elif bb_position > 0.8:
        bearish_count += 1
    
    total_signals = bullish_count + bearish_count
    if total_signals == 0:
        return 'neutral'
    elif bullish_count > bearish_count:
        return f'bullish_consensus_{bullish_count}/{total_signals}'
    elif bearish_count > bullish_count:
        return f'bearish_consensus_{bearish_count}/{total_signals}'
    else:
        return 'mixed_signals'

def print_scenario_results(result):
    """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    print(f"\nüìä –°—Ü–µ–Ω–∞—Ä–∏–π: {result['scenario']}")
    print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}")
    print(f"üéØ –°–∏–≥–Ω–∞–ª: {result['signal']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})")
    print(f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–∞: {result['signal_quality']:.2f}")
    
    # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    conditions = result['market_conditions']
    print(f"üåä –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:")
    print(f"   - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {conditions.get('volatility', 'unknown')}")
    print(f"   - –¢—Ä–µ–Ω–¥: {conditions.get('trend', 'unknown')}")
    print(f"   - –û–±—ä–µ–º: {conditions.get('volume', 'unknown')}")
    print(f"   - –ú–æ–º–µ–Ω—Ç—É–º: {conditions.get('momentum', 'unknown')}")
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    indicators = result['technical_indicators']
    print(f"üìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
    print(f"   - RSI: {indicators.get('rsi', 0):.1f}")
    print(f"   - MACD –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {indicators.get('macd_histogram', 0):.6f}")
    print(f"   - BB –ø–æ–∑–∏—Ü–∏—è: {indicators.get('bb_position', 0):.2f}")
    print(f"   - –û–±—ä–µ–º (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ): {indicators.get('volume_ratio', 0):.2f}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
    analysis = result['analysis']
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞:")
    print(f"   - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {analysis.get('indicator_consistency', 'unknown')}")
    print(f"   - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ—Ä–æ–≥–æ–≤: {'‚úÖ' if analysis.get('has_adapted_thresholds') else '‚ùå'}")
    print(f"   - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {'‚úÖ' if analysis.get('has_signal_quality') else '‚ùå'}")

def print_summary_analysis(results):
    """–í—ã–≤–æ–¥ –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    total_scenarios = len(results)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
    signal_stats = {}
    quality_scores = []
    confidence_scores = []
    
    for result in results:
        signal = result['signal']
        signal_stats[signal] = signal_stats.get(signal, 0) + 1
        quality_scores.append(result['signal_quality'])
        confidence_scores.append(result['confidence'])
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {total_scenarios} —Å—Ü–µ–Ω–∞—Ä–∏—è–º:")
    print(f"   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {signal_stats}")
    print(f"   - –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {np.mean(quality_scores):.2f}")
    print(f"   - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(confidence_scores):.2f}")
    print(f"   - –î–∏–∞–ø–∞–∑–æ–Ω –∫–∞—á–µ—Å—Ç–≤–∞: {min(quality_scores):.2f} - {max(quality_scores):.2f}")
    print(f"   - –î–∏–∞–ø–∞–∑–æ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {min(confidence_scores):.2f} - {max(confidence_scores):.2f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    features_check = {
        '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏': all(r['analysis'].get('has_adapted_thresholds', False) for r in results),
        '–†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è': all(r['analysis'].get('has_market_conditions', False) for r in results),
        '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã': all(r['analysis'].get('has_technical_indicators', False) for r in results),
        '–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤': all(r['analysis'].get('has_signal_quality', False) for r in results)
    }
    
    print(f"\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:")
    for feature, status in features_check.items():
        print(f"   - {feature}: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if status else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if np.mean(quality_scores) > 0.7:
        print("   - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤—ã—Å–æ–∫–æ–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ")
    elif np.mean(quality_scores) > 0.5:
        print("   - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ä–µ–¥–Ω–µ–µ, –≤–æ–∑–º–æ–∂–Ω—ã —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        print("   - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∏–∑–∫–æ–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    if max(confidence_scores) - min(confidence_scores) > 0.4:
        print("   - –•–æ—Ä–æ—à–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º")
    else:
        print("   - –°–ª–∞–±–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –≤–æ–∑–º–æ–∂–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(test_lava_ai_improvements())