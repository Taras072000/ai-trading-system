#!/usr/bin/env python3
"""
Peper Binance v4 - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç—Ä–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã:
1. –í–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã  
3. –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py --winrate          # –ó–∞–ø—É—Å–∫ –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    python main.py --check-system     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    python main.py --cleanup          # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    python main.py --interactive      # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    python main.py --help             # –°–ø—Ä–∞–≤–∫–∞
"""

import sys
import os
import subprocess
import argparse
import logging
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('main.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class PeperBinanceManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞–º–∏ —Ä–∞–±–æ—Ç—ã Peper Binance v4"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.scripts = {
            'winrate': self.project_root / 'winrate_test_with_results2.py',
            'system_check': self.project_root / 'system_checker.py',
            'cleanup': self.project_root / 'optimized_cleanup.py'
        }
        
    def validate_scripts(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        missing_scripts = []
        
        for name, script_path in self.scripts.items():
            if not script_path.exists():
                missing_scripts.append(f"{name}: {script_path}")
        
        if missing_scripts:
            logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã:")
            for script in missing_scripts:
                logger.error(f"   ‚Ä¢ {script}")
            return False
        
        logger.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True
    
    def run_script(self, script_path: Path, script_name: str, args: list = None) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {script_name}...")
            logger.info(f"üìÅ –°–∫—Ä–∏–ø—Ç: {script_path}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
            cmd = [sys.executable, str(script_path)]
            if args:
                cmd.extend(args)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
            result = subprocess.run(
                cmd,
                cwd=self.project_root,
                capture_output=False,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                text=True
            )
            
            if result.returncode == 0:
                logger.info(f"‚úÖ {script_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.error(f"‚ùå {script_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
                return False
                
        except FileNotFoundError:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Python –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç: {script_path}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {script_name}: {e}")
            return False
    
    def run_winrate_test(self, args: list = None) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üéØ –†–µ–∂–∏–º: –í–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return self.run_script(
            self.scripts['winrate'], 
            "–í–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            args
        )
    
    def run_system_check(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîç –†–µ–∂–∏–º: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        return self.run_script(
            self.scripts['system_check'], 
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        )
    
    def run_cleanup(self, args: list = None) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        logger.info("üßπ –†–µ–∂–∏–º: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n" + "="*60)
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê")
        print("="*60)
        print("–≠—Ç–æ—Ç —Ä–µ–∂–∏–º —É–¥–∞–ª–∏—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.")
        print("–ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø.")
        print("="*60)
        
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
        if response not in ['y', 'yes', '–¥–∞']:
            logger.info("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        return self.run_script(
            self.scripts['cleanup'], 
            "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞", 
            args
        )
    
    def show_interactive_menu(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
        while True:
            print("\n" + "="*60)
            print("           PEPER BINANCE V4 - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
            print("="*60)
            print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
            print()
            print("1. üéØ –í–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            print("2. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            print("3. üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞")
            print("4. ‚ùì –°–ø—Ä–∞–≤–∫–∞")
            print("0. üö™ –í—ã—Ö–æ–¥")
            print("="*60)
            
            try:
                choice = input("–í–∞—à –≤—ã–±–æ—Ä (0-4): ").strip()
                
                if choice == '0':
                    logger.info("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                    break
                elif choice == '1':
                    self.run_winrate_test()
                elif choice == '2':
                    self.run_system_check()
                elif choice == '3':
                    self.run_cleanup()
                elif choice == '4':
                    self.show_help()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    
            except KeyboardInterrupt:
                print("\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é: {e}")
    
    def show_help(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        print("\n" + "="*60)
        print("                    –°–ü–†–ê–í–ö–ê")
        print("="*60)
        print("Peper Binance v4 - AI —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
        print()
        print("–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:")
        print()
        print("üéØ –í–ò–ù–†–ï–ô–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
        print("   –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π")
        print("   –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–∏–Ω—Ä–µ–π—Ç–∞")
        print()
        print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´")
        print("   –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:")
        print("   ‚Ä¢ –û–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏")
        print("   ‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ")
        print("   ‚Ä¢ –í–µ—Ä—Å–∏—è Python")
        print("   ‚Ä¢ –ù–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
        print()
        print("üßπ –û–ß–ò–°–¢–ö–ê –ü–†–û–ï–ö–¢–ê")
        print("   –£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        print("   ‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ª–æ–≥–∏")
        print("   ‚Ä¢ –î—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã")
        print("   ‚Ä¢ –°—Ç–∞—Ä—ã–µ –æ—Ç—á–µ—Ç—ã")
        print("   ‚Ä¢ –°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:")
        print("   python main.py --winrate")
        print("   python main.py --check-system")
        print("   python main.py --cleanup")
        print("   python main.py --interactive")
        print("="*60)

def create_argument_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description='Peper Binance v4 - AI —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py --winrate              # –ó–∞–ø—É—Å–∫ –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  python main.py --check-system         # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  python main.py --cleanup              # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
  python main.py --interactive          # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
  
–î–ª—è –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:
  python main.py --winrate --symbol BTCUSDT --timeframe 1h
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∂–∏–º—ã (–≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ)
    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument(
        '--winrate', 
        action='store_true',
        help='–ó–∞–ø—É—Å–∫ –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    )
    mode_group.add_argument(
        '--check-system', 
        action='store_true',
        help='–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'
    )
    mode_group.add_argument(
        '--cleanup', 
        action='store_true',
        help='–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤'
    )
    mode_group.add_argument(
        '--interactive', 
        action='store_true',
        help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    parser.add_argument(
        '--symbol',
        type=str,
        help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT)'
    )
    parser.add_argument(
        '--timeframe',
        type=str,
        help='–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1h, 4h, 1d)'
    )
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='–†–µ–∂–∏–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–¥–ª—è cleanup)'
    )
    
    return parser

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = PeperBinanceManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤
        if not manager.validate_scripts():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–∫—Ä–∏–ø—Ç—ã")
            sys.exit(1)
        
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        parser = create_argument_parser()
        args = parser.parse_args()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        if args.winrate:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∏–Ω—Ä–µ–π—Ç —Ç–µ—Å—Ç–∞
            winrate_args = []
            if args.symbol:
                winrate_args.extend(['--symbol', args.symbol])
            if args.timeframe:
                winrate_args.extend(['--timeframe', args.timeframe])
            
            success = manager.run_winrate_test(winrate_args)
            
        elif args.check_system:
            success = manager.run_system_check()
            
        elif args.cleanup:
            cleanup_args = []
            if args.dry_run:
                cleanup_args.append('--dry-run')
            
            success = manager.run_cleanup(cleanup_args)
            
        elif args.interactive:
            manager.show_interactive_menu()
            success = True
            
        else:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
            logger.info("üéÆ –ó–∞–ø—É—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
            manager.show_interactive_menu()
            success = True
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if 'success' in locals():
            sys.exit(0 if success else 1)
        else:
            sys.exit(0)
            
    except KeyboardInterrupt:
        logger.info("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()