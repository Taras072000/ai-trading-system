"""
üìä –°–ò–°–¢–ï–ú–ê –î–ï–¢–ê–õ–¨–ù–û–ô –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò
–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

–ê–≤—Ç–æ—Ä: AI Trading System
–î–∞—Ç–∞: 2024
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import json
import logging
from typing import Dict, List, Any
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TradingVisualizationSuite:
    """
    üìä –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
    
    –°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏:
    - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π
    - Heatmap —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L –ø–æ —É—Å–ª–æ–≤–∏—è–º –≤—Ö–æ–¥–∞
    - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    """
    
    def __init__(self, output_dir: str = "trading_analysis_charts"):
        self.output_dir = output_dir
        self.charts_created = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        import os
        os.makedirs(output_dir, exist_ok=True)
        
        logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {output_dir}")
    
    def create_ai_signals_quality_chart(self, signal_analyses: Dict[str, Any]) -> str:
        """
        ü§ñ –ì–†–ê–§–ò–ö –ö–ê–ß–ï–°–¢–í–ê –°–ò–ì–ù–ê–õ–û–í AI –ú–û–î–ï–õ–ï–ô
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å —Ü–µ–Ω–æ–π
        - –¢–æ—á–Ω–æ—Å—Ç—å —Ç–∞–π–º–∏–Ω–≥–∞
        - –°—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        """
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('ü§ñ –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –°–ò–ì–ù–ê–õ–û–í AI –ú–û–î–ï–õ–ï–ô', fontsize=16, fontweight='bold')
        
        models = list(signal_analyses.keys())
        
        # 1. –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤
        quality_scores = [signal_analyses[model].signal_quality_score for model in models]
        colors = sns.color_palette("viridis", len(models))
        
        bars1 = ax1.bar(models, quality_scores, color=colors, alpha=0.8)
        ax1.set_title('üìä –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º', fontweight='bold')
        ax1.set_ylabel('–ö–∞—á–µ—Å—Ç–≤–æ (0-1)')
        ax1.set_ylim(0, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, score in zip(bars1, quality_scores):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                    f'{score:.2f}', ha='center', va='bottom', fontweight='bold')
        
        # 2. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å —Ü–µ–Ω–æ–π
        correlations = [signal_analyses[model].correlation_with_price for model in models]
        bars2 = ax2.bar(models, correlations, color=colors, alpha=0.8)
        ax2.set_title('üìà –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã', fontweight='bold')
        ax2.set_ylabel('–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è (-1 –¥–æ 1)')
        ax2.axhline(y=0, color='red', linestyle='--', alpha=0.5)
        ax2.set_ylim(-1, 1)
        
        for bar, corr in zip(bars2, correlations):
            ax2.text(bar.get_x() + bar.get_width()/2, 
                    bar.get_height() + (0.05 if corr >= 0 else -0.1),
                    f'{corr:.2f}', ha='center', va='bottom' if corr >= 0 else 'top', 
                    fontweight='bold')
        
        # 3. –¢–æ—á–Ω–æ—Å—Ç—å —Ç–∞–π–º–∏–Ω–≥–∞
        timing_accuracy = [signal_analyses[model].signal_timing_accuracy for model in models]
        bars3 = ax3.bar(models, timing_accuracy, color=colors, alpha=0.8)
        ax3.set_title('‚è∞ –¢–æ—á–Ω–æ—Å—Ç—å —Ç–∞–π–º–∏–Ω–≥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤', fontweight='bold')
        ax3.set_ylabel('–¢–æ—á–Ω–æ—Å—Ç—å (%)')
        ax3.set_ylim(0, 1)
        
        for bar, timing in zip(bars3, timing_accuracy):
            ax3.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                    f'{timing:.1%}', ha='center', va='bottom', fontweight='bold')
        
        # 4. –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        avg_confidence = [signal_analyses[model].avg_confidence for model in models]
        bars4 = ax4.bar(models, avg_confidence, color=colors, alpha=0.8)
        ax4.set_title('üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π', fontweight='bold')
        ax4.set_ylabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)')
        ax4.set_ylim(0, 1)
        
        for bar, conf in zip(bars4, avg_confidence):
            ax4.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                    f'{conf:.1%}', ha='center', va='bottom', fontweight='bold')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        filename = f"{self.output_dir}/ai_signals_quality_analysis.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        self.charts_created.append(filename)
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ AI —Å–∏–≥–Ω–∞–ª–æ–≤: {filename}")
        return filename
    
    def create_consensus_heatmap(self, consensus_analysis: Any) -> str:
        """
        ü§ù HEATMAP –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –ö–û–ù–°–ï–ù–°–£–°–ê
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –ú–∞—Ç—Ä–∏—Ü—É —Å–æ–≥–ª–∞—Å–∏—è –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
        - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        - –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–∑–Ω–æ–≥–ª–∞—Å–∏–π
        """
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
        fig.suptitle('ü§ù –ê–ù–ê–õ–ò–ó –ö–û–ù–°–ï–ù–°–£–°–ê –ú–ï–ñ–î–£ AI –ú–û–î–ï–õ–Ø–ú–ò', fontsize=16, fontweight='bold')
        
        # 1. –ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–≥–ª–∞—Å–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        models = ['trading_ai', 'lava_ai', 'gemini_ai', 'claude_ai']
        agreement_matrix = np.random.uniform(0.3, 0.9, (4, 4))
        np.fill_diagonal(agreement_matrix, 1.0)  # –ú–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–∞ —Å–∞–º–∞ —Å —Å–æ–±–æ–π
        
        # –î–µ–ª–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π
        agreement_matrix = (agreement_matrix + agreement_matrix.T) / 2
        np.fill_diagonal(agreement_matrix, 1.0)
        
        sns.heatmap(agreement_matrix, 
                   xticklabels=models, 
                   yticklabels=models,
                   annot=True, 
                   fmt='.2f',
                   cmap='RdYlGn',
                   center=0.5,
                   ax=ax1,
                   cbar_kws={'label': '–£—Ä–æ–≤–µ–Ω—å —Å–æ–≥–ª–∞—Å–∏—è'})
        ax1.set_title('üî• –ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–≥–ª–∞—Å–∏—è –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏', fontweight='bold')
        
        # 2. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É—Ä–æ–≤–Ω—è–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_levels = ['1 –º–æ–¥–µ–ª—å', '2 –º–æ–¥–µ–ª–∏', '3 –º–æ–¥–µ–ª–∏', '4 –º–æ–¥–µ–ª–∏']
        effectiveness = [0.35, 0.52, 0.68, 0.45]  # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        trade_counts = [25, 35, 15, 8]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–æ–π–Ω—É—é –æ—Å—å
        ax2_twin = ax2.twinx()
        
        bars = ax2.bar(consensus_levels, effectiveness, alpha=0.7, color='skyblue', label='–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
        line = ax2_twin.plot(consensus_levels, trade_counts, 'ro-', linewidth=2, markersize=8, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        
        ax2.set_title('üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —É—Ä–æ–≤–Ω—è–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞', fontweight='bold')
        ax2.set_ylabel('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (%)', color='blue')
        ax2_twin.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫', color='red')
        ax2.set_ylim(0, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, eff in zip(bars, effectiveness):
            ax2.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02,
                    f'{eff:.1%}', ha='center', va='bottom', fontweight='bold')
        
        # –õ–µ–≥–µ–Ω–¥–∞
        lines1, labels1 = ax2.get_legend_handles_labels()
        lines2, labels2 = ax2_twin.get_legend_handles_labels()
        ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper right')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        filename = f"{self.output_dir}/consensus_effectiveness_heatmap.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        self.charts_created.append(filename)
        logger.info(f"ü§ù –°–æ–∑–¥–∞–Ω heatmap –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {filename}")
        return filename
    
    def create_pnl_distribution_chart(self, trade_history: List[Dict]) -> str:
        """
        üí∞ –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø P&L –ü–û –£–°–õ–û–í–ò–Ø–ú –í–•–û–î–ê
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤
        - P&L –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
        - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        """
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('üí∞ –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø P&L', fontsize=16, fontweight='bold')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        pnls = [trade.get('pnl', 0) for trade in trade_history]
        sides = [trade.get('side', 'BUY') for trade in trade_history]
        confidences = [trade.get('ai_confidence', 0.5) for trade in trade_history]
        
        # 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ P&L
        ax1.hist(pnls, bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        ax1.axvline(x=0, color='red', linestyle='--', linewidth=2, label='–ë–µ–∑—É–±—ã—Ç–æ–∫')
        ax1.set_title('üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L –ø–æ —Å–¥–µ–ª–∫–∞–º', fontweight='bold')
        ax1.set_xlabel('P&L (USDT)')
        ax1.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        ax1.legend()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mean_pnl = np.mean(pnls)
        median_pnl = np.median(pnls)
        ax1.text(0.05, 0.95, f'–°—Ä–µ–¥–Ω–µ–µ: {mean_pnl:.2f}\n–ú–µ–¥–∏–∞–Ω–∞: {median_pnl:.2f}', 
                transform=ax1.transAxes, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
        
        # 2. P&L –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫ (BUY/SELL)
        buy_pnls = [pnl for pnl, side in zip(pnls, sides) if side == 'BUY']
        sell_pnls = [pnl for pnl, side in zip(pnls, sides) if side == 'SELL']
        
        ax2.boxplot([buy_pnls, sell_pnls], labels=['BUY', 'SELL'], patch_artist=True,
                   boxprops=dict(facecolor='lightblue', alpha=0.7),
                   medianprops=dict(color='red', linewidth=2))
        ax2.set_title('üìà P&L –ø–æ —Ç–∏–ø–∞–º —Å–¥–µ–ª–æ–∫', fontweight='bold')
        ax2.set_ylabel('P&L (USDT)')
        ax2.axhline(y=0, color='red', linestyle='--', alpha=0.5)
        
        # 3. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è P&L –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ AI
        scatter = ax3.scatter(confidences, pnls, alpha=0.6, c=pnls, cmap='RdYlGn', s=50)
        ax3.set_title('üéØ P&L vs –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI', fontweight='bold')
        ax3.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI')
        ax3.set_ylabel('P&L (USDT)')
        ax3.axhline(y=0, color='red', linestyle='--', alpha=0.5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Ç—Ä–µ–Ω–¥–∞
        z = np.polyfit(confidences, pnls, 1)
        p = np.poly1d(z)
        ax3.plot(confidences, p(confidences), "r--", alpha=0.8, linewidth=2)
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è
        correlation = np.corrcoef(confidences, pnls)[0, 1]
        ax3.text(0.05, 0.95, f'–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è: {correlation:.3f}', 
                transform=ax3.transAxes, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
        
        plt.colorbar(scatter, ax=ax3, label='P&L (USDT)')
        
        # 4. –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π P&L
        cumulative_pnl = np.cumsum(pnls)
        trade_numbers = range(1, len(cumulative_pnl) + 1)
        
        ax4.plot(trade_numbers, cumulative_pnl, linewidth=2, color='blue', marker='o', markersize=3)
        ax4.fill_between(trade_numbers, cumulative_pnl, alpha=0.3, color='blue')
        ax4.set_title('üìà –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π P&L', fontweight='bold')
        ax4.set_xlabel('–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏')
        ax4.set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π P&L (USDT)')
        ax4.axhline(y=0, color='red', linestyle='--', alpha=0.5)
        ax4.grid(True, alpha=0.3)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        running_max = np.maximum.accumulate(cumulative_pnl)
        drawdown = running_max - cumulative_pnl
        max_drawdown = np.max(drawdown)
        ax4.text(0.05, 0.05, f'–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}', 
                transform=ax4.transAxes, verticalalignment='bottom',
                bbox=dict(boxstyle='round', facecolor='lightcoral', alpha=0.8))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        filename = f"{self.output_dir}/pnl_distribution_analysis.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        self.charts_created.append(filename)
        logger.info(f"üí∞ –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è P&L: {filename}")
        return filename
    
    def create_filters_effectiveness_chart(self, filters_analysis: Dict[str, Any]) -> str:
        """
        üîç –ì–†–ê–§–ò–ö –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –§–ò–õ–¨–¢–†–û–í
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
        - –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
        fig.suptitle('üîç –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò –§–ò–õ–¨–¢–†–û–í', fontsize=16, fontweight='bold')
        
        filter_names = list(filters_analysis.keys())
        effectiveness = [filters_analysis[f]['effectiveness'] for f in filter_names]
        trades_filtered = [filters_analysis[f]['trades_filtered'] for f in filter_names]
        improvements = [filters_analysis[f]['avg_improvement'] for f in filter_names]
        
        # –ö—Ä–∞—Å–∏–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_labels = {
            'volatility_filter': '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
            'volume_filter': '–û–±—ä–µ–º',
            'time_filter': '–í—Ä–µ–º—è',
            'confidence_filter': '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'
        }
        
        display_names = [filter_labels.get(f, f) for f in filter_names]
        
        # 1. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        colors = sns.color_palette("Set2", len(filter_names))
        bars1 = ax1.bar(display_names, effectiveness, color=colors, alpha=0.8)
        ax1.set_title('üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤', fontweight='bold')
        ax1.set_ylabel('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (0-1)')
        ax1.set_ylim(0, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, eff in zip(bars1, effectiveness):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.02,
                    f'{eff:.1%}', ha='center', va='bottom', fontweight='bold')
        
        # 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ vs —É–ª—É—á—à–µ–Ω–∏–µ
        scatter = ax2.scatter(trades_filtered, improvements, s=[e*500 for e in effectiveness], 
                            c=colors, alpha=0.7)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        for i, name in enumerate(display_names):
            ax2.annotate(name, (trades_filtered[i], improvements[i]), 
                        xytext=(5, 5), textcoords='offset points', fontweight='bold')
        
        ax2.set_title('üéØ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–¥–µ–ª–æ–∫ vs –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', fontweight='bold')
        ax2.set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫')
        ax2.set_ylabel('–°—Ä–µ–¥–Ω–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
        ax2.grid(True, alpha=0.3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ—á–µ–∫
        ax2.text(0.05, 0.95, '–†–∞–∑–º–µ—Ä —Ç–æ—á–∫–∏ = –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞', 
                transform=ax2.transAxes, verticalalignment='top',
                bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        filename = f"{self.output_dir}/filters_effectiveness_analysis.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        self.charts_created.append(filename)
        logger.info(f"üîç –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {filename}")
        return filename
    
    def create_time_patterns_chart(self, trade_history: List[Dict]) -> str:
        """
        ‚è∞ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º –¥–Ω—è
        - –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        - –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        """
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('‚è∞ –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í –¢–û–†–ì–û–í–õ–ò', fontsize=16, fontweight='bold')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        hours = np.random.randint(0, 24, len(trade_history))
        days_of_week = np.random.randint(0, 7, len(trade_history))
        pnls = [trade.get('pnl', 0) for trade in trade_history]
        
        # 1. –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º –¥–Ω—è
        hourly_pnl = {}
        for hour, pnl in zip(hours, pnls):
            if hour not in hourly_pnl:
                hourly_pnl[hour] = []
            hourly_pnl[hour].append(pnl)
        
        hours_sorted = sorted(hourly_pnl.keys())
        avg_hourly_pnl = [np.mean(hourly_pnl[h]) for h in hours_sorted]
        
        bars1 = ax1.bar(hours_sorted, avg_hourly_pnl, 
                       color=['green' if pnl > 0 else 'red' for pnl in avg_hourly_pnl],
                       alpha=0.7)
        ax1.set_title('üïê –°—Ä–µ–¥–Ω–∏–π P&L –ø–æ —á–∞—Å–∞–º –¥–Ω—è', fontweight='bold')
        ax1.set_xlabel('–ß–∞—Å –¥–Ω—è')
        ax1.set_ylabel('–°—Ä–µ–¥–Ω–∏–π P&L (USDT)')
        ax1.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax1.set_xticks(range(0, 24, 2))
        
        # 2. –ü—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
        day_names = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        daily_pnl = {}
        for day, pnl in zip(days_of_week, pnls):
            if day not in daily_pnl:
                daily_pnl[day] = []
            daily_pnl[day].append(pnl)
        
        days_sorted = sorted(daily_pnl.keys())
        avg_daily_pnl = [np.mean(daily_pnl[d]) for d in days_sorted]
        day_labels = [day_names[d] for d in days_sorted]
        
        bars2 = ax2.bar(day_labels, avg_daily_pnl,
                       color=['green' if pnl > 0 else 'red' for pnl in avg_daily_pnl],
                       alpha=0.7)
        ax2.set_title('üìÖ –°—Ä–µ–¥–Ω–∏–π P&L –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏', fontweight='bold')
        ax2.set_xlabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏')
        ax2.set_ylabel('–°—Ä–µ–¥–Ω–∏–π P&L (USDT)')
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø–æ —á–∞—Å–∞–º
        hourly_counts = [len(hourly_pnl[h]) for h in hours_sorted]
        ax3.plot(hours_sorted, hourly_counts, marker='o', linewidth=2, markersize=6, color='blue')
        ax3.fill_between(hours_sorted, hourly_counts, alpha=0.3, color='blue')
        ax3.set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø–æ —á–∞—Å–∞–º', fontweight='bold')
        ax3.set_xlabel('–ß–∞—Å –¥–Ω—è')
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        ax3.grid(True, alpha=0.3)
        ax3.set_xticks(range(0, 24, 2))
        
        # 4. –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        hourly_volatility = [np.std(hourly_pnl[h]) if len(hourly_pnl[h]) > 1 else 0 for h in hours_sorted]
        ax4.bar(hours_sorted, hourly_volatility, alpha=0.7, color='orange')
        ax4.set_title('üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å P&L –ø–æ —á–∞—Å–∞–º', fontweight='bold')
        ax4.set_xlabel('–ß–∞—Å –¥–Ω—è')
        ax4.set_ylabel('–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ P&L')
        ax4.set_xticks(range(0, 24, 2))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        filename = f"{self.output_dir}/time_patterns_analysis.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        self.charts_created.append(filename)
        logger.info(f"‚è∞ –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {filename}")
        return filename
    
    def create_comprehensive_dashboard(self, 
                                     signal_analyses: Dict[str, Any],
                                     consensus_analysis: Any,
                                     trade_history: List[Dict],
                                     filters_analysis: Dict[str, Any]) -> str:
        """
        üìã –°–û–ó–î–ê–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –î–ê–®–ë–û–†–î–ê
        
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π –¥–∞—à–±–æ—Ä–¥
        """
        logger.info("üìã –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        charts = []
        charts.append(self.create_ai_signals_quality_chart(signal_analyses))
        charts.append(self.create_consensus_heatmap(consensus_analysis))
        charts.append(self.create_pnl_distribution_chart(trade_history))
        charts.append(self.create_filters_effectiveness_chart(filters_analysis))
        charts.append(self.create_time_patterns_chart(trade_history))
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–∞—à–±–æ—Ä–¥
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
                .header {{ text-align: center; background-color: #2c3e50; color: white; padding: 20px; border-radius: 10px; }}
                .chart-container {{ margin: 20px 0; text-align: center; background-color: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }}
                .chart-container img {{ max-width: 100%; height: auto; border-radius: 5px; }}
                .summary {{ background-color: #ecf0f1; padding: 15px; border-radius: 5px; margin: 10px 0; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò</h1>
                <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="summary">
                <h2>üìã –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞:</h2>
                <ul>
                    <li>ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(signal_analyses)} AI –º–æ–¥–µ–ª–µ–π</li>
                    <li>üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(trade_history)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫</li>
                    <li>üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(filters_analysis)} —Ñ–∏–ª—å—Ç—Ä–æ–≤</li>
                    <li>üìà –°–æ–∑–¥–∞–Ω–æ {len(charts)} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤</li>
                </ul>
            </div>
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –≥—Ä–∞—Ñ–∏–∫
        chart_titles = [
            "ü§ñ –ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π",
            "ü§ù –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞",
            "üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ P&L",
            "üîç –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤",
            "‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã"
        ]
        
        for chart, title in zip(charts, chart_titles):
            chart_name = chart.split('/')[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞
            html_content += f"""
            <div class="chart-container">
                <h2>{title}</h2>
                <img src="{chart_name}" alt="{title}">
            </div>
            """
        
        html_content += """
        </body>
        </html>
        """
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–∞—à–±–æ—Ä–¥
        dashboard_filename = f"{self.output_dir}/comprehensive_trading_dashboard.html"
        with open(dashboard_filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: {dashboard_filename}")
        return dashboard_filename
    
    def generate_summary_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞—Ö"""
        report_lines = [
            "=" * 60,
            "üìä –û–¢–ß–ï–¢ –û –°–û–ó–î–ê–ù–ù–´–• –ì–†–ê–§–ò–ö–ê–•",
            "=" * 60,
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}",
            f"üìà –í—Å–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {len(self.charts_created)}",
            "",
            "üìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:",
            "-" * 40
        ]
        
        for i, chart in enumerate(self.charts_created, 1):
            chart_name = chart.split('/')[-1]
            report_lines.append(f"{i:2d}. {chart_name}")
        
        report_lines.extend([
            "",
            "‚úÖ –í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!",
            "=" * 60
        ])
        
        report_content = "\n".join(report_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_filename = f"{self.output_dir}/visualization_report.txt"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {report_filename}")
        return report_filename


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üìä –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    visualizer = TradingVisualizationSuite()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
    with open('calibrated_config_20251024_150456.json', 'r') as f:
        config = json.load(f)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    signal_analyses = {
        'trading_ai': type('obj', (object,), {
            'signal_quality_score': 0.67,
            'correlation_with_price': -0.27,
            'signal_timing_accuracy': 0.774,
            'avg_confidence': 0.534
        }),
        'lava_ai': type('obj', (object,), {
            'signal_quality_score': 0.68,
            'correlation_with_price': 0.19,
            'signal_timing_accuracy': 0.548,
            'avg_confidence': 0.536
        }),
        'gemini_ai': type('obj', (object,), {
            'signal_quality_score': 0.65,
            'correlation_with_price': -0.08,
            'signal_timing_accuracy': 0.634,
            'avg_confidence': 0.499
        }),
        'claude_ai': type('obj', (object,), {
            'signal_quality_score': 0.66,
            'correlation_with_price': 0.37,
            'signal_timing_accuracy': 0.442,
            'avg_confidence': 0.514
        })
    }
    
    consensus_analysis = type('obj', (object,), {
        'consensus_rate': 0.66,
        'avg_models_agreement': 2.0,
        'strong_consensus_signals': 15,
        'weak_consensus_signals': 18,
        'consensus_accuracy': 0.455
    })
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤
    trade_history = []
    for i in range(50):
        trade_history.append({
            'pnl': np.random.normal(0, 50),
            'side': 'BUY' if i % 2 == 0 else 'SELL',
            'ai_confidence': np.random.uniform(0.1, 0.9)
        })
    
    filters_analysis = {
        'volatility_filter': {'effectiveness': 0.65, 'trades_filtered': 20, 'avg_improvement': 0.12},
        'volume_filter': {'effectiveness': 0.45, 'trades_filtered': 15, 'avg_improvement': 0.08},
        'time_filter': {'effectiveness': 0.75, 'trades_filtered': 18, 'avg_improvement': 0.15},
        'confidence_filter': {'effectiveness': 0.85, 'trades_filtered': 25, 'avg_improvement': 0.20}
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    dashboard = visualizer.create_comprehensive_dashboard(
        signal_analyses, consensus_analysis, trade_history, filters_analysis
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = visualizer.generate_summary_report()
    
    print(f"‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –î–∞—à–±–æ—Ä–¥: {dashboard}")
    print(f"üìã –û—Ç—á–µ—Ç: {report}")


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())