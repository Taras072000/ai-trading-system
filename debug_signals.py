#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from winrate_test_with_results2 import RealWinrateTester, TestConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def debug_signal_generation():
    """–û—Ç–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üîç –û–¢–õ–ê–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –°–ò–ì–ù–ê–õ–û–í")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º—è–≥–∫–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    config = TestConfig(
        test_period_days=7,  # 7 –¥–Ω–µ–π –¥–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        symbols=['BTCUSDT'],  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª
        min_confidence=0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å 0.1%
        min_volatility=0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å 0.1%
        min_volume_ratio=0.01,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 1%
        min_consensus_models=1,  # –¢–æ–ª—å–∫–æ 1 –º–æ–¥–µ–ª—å –Ω—É–∂–Ω–∞
        consensus_weight_threshold=0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        use_strict_filters=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        debug_mode=True  # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = RealWinrateTester(config)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞...")
        await tester.initialize()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTCUSDT
        symbol = 'BTCUSDT'
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        data = await tester.load_historical_data(symbol)
        
        if data is None or len(data) < 100:
            logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(data) if data is not None else 0}")
            return
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {data.index[0]} - {data.index[-1]}")
        
        # –ü–æ–ª—É—á–∞–µ–º AI —Å–∏–≥–Ω–∞–ª—ã
        logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ AI —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}...")
        signals = await tester.get_ai_signals(symbol, data)
        
        logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        if len(signals) == 0:
            logger.error("‚ùå –ù–ï –ü–û–õ–£–ß–ï–ù–û –ù–ò –û–î–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê!")
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
            test_data = data.tail(50)  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
            
            for model_name in ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai']:
                logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å {model_name}...")
                try:
                    decision = await tester.get_individual_ai_signal(model_name, symbol, test_data)
                    if decision:
                        logger.info(f"‚úÖ {model_name}: {decision.action} (confidence: {decision.confidence:.3f})")
                    else:
                        logger.warning(f"‚ùå {model_name}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")
                except Exception as e:
                    logger.error(f"‚ùå {model_name}: –û—à–∏–±–∫–∞ - {e}")
        else:
            logger.info("‚úÖ –°–ò–ì–ù–ê–õ–´ –ü–û–õ–£–ß–ï–ù–´!")
            for i, signal in enumerate(signals):
                logger.info(f"üìà –°–∏–≥–Ω–∞–ª {i+1}: {signal.final_action} –Ω–∞ {signal.price:.4f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence_avg:.3f})")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(debug_signal_generation())