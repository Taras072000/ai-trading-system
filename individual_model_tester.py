#!/usr/bin/env python3
"""
üéØ Individual Model Tester - –°–∏—Å—Ç–µ–º–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–π AI –º–æ–¥–µ–ª–∏

–¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
"""

import asyncio
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import json
import os

# AI –º–æ–¥—É–ª–∏
from ai_modules.ai_manager import AIManager
from ai_modules.lava_ai import LavaAI
from ai_modules.lgbm_ai import LGBMAI
from ai_modules.mistral_ai import MistralAI
from ai_modules.trading_ai import TradingAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏
from data_collector import DataManager
from utils.timezone_utils import get_utc_now

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IndividualModelTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        self.ai_manager = AIManager()
        self.data_manager = DataManager()
        self.models = {}
        self.test_symbols = ["BTCUSDT", "ETHUSDT"]
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Individual Model Tester...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Manager
            await self.ai_manager.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            await self._initialize_individual_models()
            
            logger.info("‚úÖ Individual Model Tester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def _initialize_individual_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        
        # LavaAI
        try:
            self.models['lava_ai'] = LavaAI()
            await self.models['lava_ai'].initialize()
            logger.info("‚úÖ lava_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ lava_ai: {e}")
        
        # LGBMAI
        try:
            self.models['lgbm_ai'] = LGBMAI()
            await self.models['lgbm_ai'].initialize()
            logger.info("‚úÖ lgbm_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ lgbm_ai: {e}")
        
        # MistralAI
        try:
            self.models['mistral_ai'] = MistralAI()
            await self.models['mistral_ai'].initialize()
            logger.info("‚úÖ mistral_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ mistral_ai: {e}")
    
    async def test_model_individually(self, model_name: str, symbol: str = "BTCUSDT", days: int = 7) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"""
        
        logger.info(f"\nüîç === –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {model_name.upper()} ===")
        logger.info(f"üìä –°–∏–º–≤–æ–ª: {symbol}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π")
        
        if model_name not in self.models:
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return {"error": f"–ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        model = self.models[model_name]
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
            data = await self._get_historical_data(symbol, days)
            
            if data is None or len(data) < 10:
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return {"error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}"}
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏
            results = {
                "model_name": model_name,
                "symbol": symbol,
                "data_points": len(data),
                "test_timestamp": get_utc_now().isoformat(),
                "methods_tested": {},
                "signals_generated": [],
                "errors": []
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
            await self._test_model_methods(model, model_name, data, results)
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self._analyze_model_performance(results)
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {model_name}: {e}")
            return {"error": str(e)}
    
    async def _test_model_methods(self, model: Any, model_name: str, data: pd.DataFrame, results: Dict):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –º–æ–¥–µ–ª–∏"""
        
        # –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        methods_to_test = {
            'lava_ai': ['generate_trading_signals', 'analyze_market_data'],
            'lgbm_ai': ['predict', 'get_prediction'],
            'mistral_ai': ['get_trading_signal', 'analyze_market']
        }
        
        model_methods = methods_to_test.get(model_name, [])
        
        for method_name in model_methods:
            logger.info(f"üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥: {method_name}")
            
            try:
                if hasattr(model, method_name):
                    method = getattr(model, method_name)
                    
                    # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    signal = await self._call_model_method(method, data, model_name)
                    
                    if signal:
                        results["methods_tested"][method_name] = "success"
                        results["signals_generated"].append({
                            "method": method_name,
                            "signal": signal,
                            "timestamp": get_utc_now().isoformat()
                        })
                        logger.info(f"‚úÖ {method_name}: {signal}")
                    else:
                        results["methods_tested"][method_name] = "no_signal"
                        logger.warning(f"‚ö†Ô∏è {method_name}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")
                        
                else:
                    results["methods_tested"][method_name] = "method_not_found"
                    logger.warning(f"‚ö†Ô∏è –ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {model_name}")
                    
            except Exception as e:
                results["methods_tested"][method_name] = f"error: {str(e)}"
                results["errors"].append(f"{method_name}: {str(e)}")
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method_name}: {e}")
    
    async def _call_model_method(self, method: Any, data: pd.DataFrame, model_name: str) -> Any:
        """–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        
        try:
            # –î–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if model_name == 'lava_ai':
                if method.__name__ == 'generate_trading_signals':
                    return await method(data)
                elif method.__name__ == 'analyze_market_data':
                    return await method(data)
                    
            elif model_name == 'lgbm_ai':
                if method.__name__ in ['predict', 'get_prediction']:
                    return await method(data)
                    
            elif model_name == 'mistral_ai':
                if method.__name__ in ['get_trading_signal', 'analyze_market']:
                    return await method(data)
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–æ—à–ª–æ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ã–∑–≤–∞—Ç—å
            return await method(data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–∞ {method.__name__}: {e}")
            return None
    
    def _analyze_model_performance(self, results: Dict):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        
        total_methods = len(results["methods_tested"])
        successful_methods = len([m for m in results["methods_tested"].values() if m == "success"])
        signals_count = len(results["signals_generated"])
        errors_count = len(results["errors"])
        
        results["performance_analysis"] = {
            "total_methods_tested": total_methods,
            "successful_methods": successful_methods,
            "success_rate": (successful_methods / total_methods * 100) if total_methods > 0 else 0,
            "signals_generated": signals_count,
            "errors_count": errors_count,
            "status": "working" if successful_methods > 0 else "not_working"
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if successful_methods == 0:
            recommendations.append("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –æ—à–∏–±–∫–æ–π")
        elif successful_methods < total_methods:
            recommendations.append("‚ö†Ô∏è –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        else:
            recommendations.append("‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        if signals_count == 0:
            recommendations.append("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã")
        elif signals_count > 0:
            recommendations.append(f"üìä –ú–æ–¥–µ–ª—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ {signals_count} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
        results["recommendations"] = recommendations
    
    async def _get_historical_data(self, symbol: str, days: int) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # ensure_data_available —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame
            data = await self.data_manager.ensure_data_available(symbol, "1h", days)
            
            if data is not None and len(data) > 0:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
                if 'timestamp' in data.columns and data.index.name != 'timestamp':
                    data = data.set_index('timestamp')
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                if len(data) > 0:
                    return data.tail(days * 24)  # –ü—Ä–∏–º–µ—Ä–Ω–æ days * 24 —á–∞—Å–∞
                
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return None
    
    async def test_all_models_individually(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ"""
        
        logger.info("\nüéØ === –ó–ê–ü–£–°–ö –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–°–ï–• –ú–û–î–ï–õ–ï–ô ===")
        
        all_results = {}
        
        for model_name in self.models.keys():
            logger.info(f"\n{'='*60}")
            logger.info(f"üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ò: {model_name.upper()}")
            logger.info(f"{'='*60}")
            
            model_results = {}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö
            for symbol in self.test_symbols:
                result = await self.test_model_individually(model_name, symbol, days=3)
                model_results[symbol] = result
                
                # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                await asyncio.sleep(1)
            
            all_results[model_name] = model_results
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–¥–µ–ª–∏
            self._analyze_overall_model_performance(model_name, model_results)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        await self._save_test_results(all_results)
        
        return all_results
    
    def _analyze_overall_model_performance(self, model_name: str, model_results: Dict):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        
        logger.info(f"\nüìä === –ê–ù–ê–õ–ò–ó –ú–û–î–ï–õ–ò {model_name.upper()} ===")
        
        working_symbols = 0
        total_signals = 0
        total_errors = 0
        
        for symbol, result in model_results.items():
            if "performance_analysis" in result:
                analysis = result["performance_analysis"]
                if analysis["status"] == "working":
                    working_symbols += 1
                total_signals += analysis["signals_generated"]
                total_errors += analysis["errors_count"]
        
        total_symbols = len(model_results)
        success_rate = (working_symbols / total_symbols * 100) if total_symbols > 0 else 0
        
        logger.info(f"‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–µ –ø–∞—Ä—ã: {working_symbols}/{total_symbols} ({success_rate:.1f}%)")
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
        logger.info(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
        
        if success_rate == 0:
            logger.error(f"‚ùå –ú–û–î–ï–õ–¨ {model_name.upper()} –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
        elif success_rate < 50:
            logger.warning(f"‚ö†Ô∏è –ú–û–î–ï–õ–¨ {model_name.upper()} –†–ê–ë–û–¢–ê–ï–¢ –ü–õ–û–•–û")
        else:
            logger.info(f"‚úÖ –ú–û–î–ï–õ–¨ {model_name.upper()} –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û")
    
    async def _save_test_results(self, results: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs("individual_test_results", exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"individual_test_results/individual_test_{timestamp}.json"
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    tester = IndividualModelTester()
    
    if not await tester.initialize():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    # –ó–∞–ø—É—Å–∫ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    results = await tester.test_all_models_individually()
    
    logger.info("\nüéâ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===")

if __name__ == "__main__":
    asyncio.run(main())