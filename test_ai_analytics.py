#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ AI –º–æ–¥–µ–ª–µ–π
"""

import asyncio
from datetime import datetime, timedelta
from winrate_test_with_results2 import (
    TestConfig, RealWinrateTester, TradeResult, AIModelDecision, 
    ConsensusSignal, AIModelPerformance, WinrateTestResult
)

def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π
    model_decisions = [
        AIModelDecision(
            model_name="TradingAI",
            action="BUY",
            confidence=0.75,
            reasoning="Strong bullish signal",
            timestamp=datetime.now()
        ),
        AIModelDecision(
            model_name="LavaAI", 
            action="BUY",
            confidence=0.68,
            reasoning="Momentum indicator positive",
            timestamp=datetime.now()
        ),
        AIModelDecision(
            model_name="LGBMAI",
            action="SELL",
            confidence=0.55,
            reasoning="Weak signal",
            timestamp=datetime.now()
        ),
        AIModelDecision(
            model_name="MistralAI",
            action="BUY", 
            confidence=0.82,
            reasoning="Technical analysis positive",
            timestamp=datetime.now()
        )
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    consensus_signal = ConsensusSignal(
        symbol="BTCUSDT",
        timestamp=datetime.now(),
        price=50000.0,
        final_action="BUY",
        consensus_strength=3,  # 3 –∏–∑ 4 –º–æ–¥–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å
        participating_models=model_decisions,
        confidence_avg=0.71
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏
    trades = [
        TradeResult(
            symbol="BTCUSDT",
            entry_time=datetime.now() - timedelta(hours=2),
            entry_price=50000.0,
            exit_time=datetime.now(),
            exit_price=51000.0,
            direction="LONG",
            pnl=100.0,
            pnl_percent=2.0,
            confidence=0.71,
            ai_model="Consensus_3",
            consensus_strength=3,
            participating_models=model_decisions,
            consensus_signal=consensus_signal
        ),
        TradeResult(
            symbol="BTCUSDT",
            entry_time=datetime.now() - timedelta(hours=4),
            entry_price=49000.0,
            exit_time=datetime.now() - timedelta(hours=2),
            exit_price=48500.0,
            direction="LONG",
            pnl=-50.0,
            pnl_percent=-1.0,
            confidence=0.65,
            ai_model="Consensus_2",
            consensus_strength=2,
            participating_models=model_decisions[:2],
            consensus_signal=None
        )
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å AI –º–æ–¥–µ–ª–µ–π
    ai_models_performance = {
        "TradingAI": AIModelPerformance(
            model_name="TradingAI",
            total_signals=10,
            signals_used_in_trades=5,
            winning_signals=3,
            losing_signals=2,
            signal_accuracy=60.0,
            avg_confidence=0.72,
            contribution_to_pnl=75.0,
            consensus_participation_rate=0.8
        ),
        "LavaAI": AIModelPerformance(
            model_name="LavaAI",
            total_signals=8,
            signals_used_in_trades=4,
            winning_signals=2,
            losing_signals=2,
            signal_accuracy=50.0,
            avg_confidence=0.65,
            contribution_to_pnl=25.0,
            consensus_participation_rate=0.7
        ),
        "LGBMAI": AIModelPerformance(
            model_name="LGBMAI",
            total_signals=12,
            signals_used_in_trades=6,
            winning_signals=4,
            losing_signals=2,
            signal_accuracy=66.7,
            avg_confidence=0.68,
            contribution_to_pnl=50.0,
            consensus_participation_rate=0.6
        ),
        "MistralAI": AIModelPerformance(
            model_name="MistralAI",
            total_signals=9,
            signals_used_in_trades=4,
            winning_signals=3,
            losing_signals=1,
            signal_accuracy=75.0,
            avg_confidence=0.78,
            contribution_to_pnl=80.0,
            consensus_participation_rate=0.9
        )
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    consensus_stats = {
        'total_consensus_signals': 15,
        'avg_consensus_strength': 2.8,
        'trades_with_2_models': 5,
        'trades_with_3_models': 8,
        'trades_with_4_models': 2
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_result = WinrateTestResult(
        symbol="BTCUSDT",
        total_trades=2,
        winning_trades=1,
        losing_trades=1,
        win_rate=50.0,
        total_pnl=50.0,
        total_pnl_percent=0.5,
        avg_trade_pnl=25.0,
        max_drawdown=-50.0,
        sharpe_ratio=0.5,
        trades=trades,
        ai_models_performance=ai_models_performance,
        consensus_stats=consensus_stats
    )
    
    return {"BTCUSDT": test_result}

def test_analytics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ AI –º–æ–¥–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TestConfig(
        test_period_days=7,
        symbols=["BTCUSDT"],
        min_consensus_models=2
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = RealWinrateTester(config)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_results = create_test_data()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = tester.generate_report(test_results)
    
    print("\n" + "="*80)
    print("üìä –¢–ï–°–¢–û–í–´–ô –û–¢–ß–ï–¢ –° –ù–û–í–û–ô –ê–ù–ê–õ–ò–¢–ò–ö–û–ô:")
    print("="*80)
    print(report)
    print("="*80)
    
    print("\n‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ—Ç—á–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:")
    print("   - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–µ–π")
    print("   - –†–µ–π—Ç–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –ø–æ –ø—Ä–∏–±—ã–ª–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏")
    print("   - –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞")
    print("   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")

if __name__ == "__main__":
    test_analytics()