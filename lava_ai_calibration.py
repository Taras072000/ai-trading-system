#!/usr/bin/env python3
"""
üîß –ö–ê–õ–ò–ë–†–û–í–ö–ê LAVA AI –ú–û–î–ï–õ–ò
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ lava_ai –º–æ–¥–µ–ª–∏
"""

import os
import sys
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_modules.lava_ai import LavaAI
from data_collector import DataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LavaAICalibrator:
    """–ö–∞–ª–∏–±—Ä–∞—Ç–æ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ lava_ai –º–æ–¥–µ–ª–∏"""
    
    def __init__(self):
        self.data_manager = DataManager()
        self.lava_ai = None
        self.test_symbols = ['TAOUSDT', 'CRVUSDT', 'ZRXUSDT', 'APTUSDT', 'SANDUSDT']
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lava AI –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
        self.lava_ai = LavaAI()
        logger.info("‚úÖ Lava AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def test_confidence_thresholds(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è Lava AI...")
        
        thresholds = [0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5]
        results = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_data = {}
        for symbol in self.test_symbols:
            try:
                df = await self.data_manager.ensure_data_available(
                    symbol=symbol,
                    interval='1h',
                    days=7
                )
                if df is not None and len(df) > 50:
                    test_data[symbol] = df
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}: {len(df)} —Å–≤–µ—á–µ–π")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        
        if not test_data:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ—Ä–æ–≥
        for threshold in thresholds:
            logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {threshold:.1%}")
            
            total_signals = 0
            valid_signals = 0
            confidences = []
            
            for symbol, df in test_data.items():
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 20 —Ç–æ—á–∫–∞—Ö –¥–∞–Ω–Ω—ã—Ö
                    for i in range(len(df) - 20, len(df), 2):
                        if i < 50:
                            continue
                            
                        current_data = df.iloc[:i+1].copy()
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç lava_ai
                        try:
                            signal = self.lava_ai.get_signal(current_data, symbol)
                            
                            if signal and isinstance(signal, dict) and 'confidence' in signal:
                                total_signals += 1
                                confidence = signal['confidence']
                                confidences.append(confidence)
                                
                                if confidence >= threshold:
                                    valid_signals += 1
                                    
                        except Exception as e:
                            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {e}")
                            continue
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_rate = (valid_signals / total_signals * 100) if total_signals > 0 else 0
            avg_confidence = np.mean(confidences) if confidences else 0
            
            results[threshold] = {
                'total_signals': total_signals,
                'valid_signals': valid_signals,
                'success_rate': success_rate,
                'avg_confidence': avg_confidence
            }
            
            logger.info(f"   üìä –ü–æ—Ä–æ–≥ {threshold:.1%}: {valid_signals}/{total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ ({success_rate:.1f}%)")
        
        return results
    
    async def analyze_signal_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ lava_ai"""
        logger.info("üìà –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ Lava AI...")
        
        signal_types = {'BUY': 0, 'SELL': 0, 'HOLD': 0}
        confidence_ranges = {
            '0-10%': 0, '10-20%': 0, '20-30%': 0, '30-40%': 0, 
            '40-50%': 0, '50-60%': 0, '60-70%': 0, '70-80%': 0,
            '80-90%': 0, '90-100%': 0
        }
        
        all_confidences = []
        all_signals = []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for symbol in self.test_symbols:
            try:
                df = await self.data_manager.ensure_data_available(
                    symbol=symbol,
                    interval='1h',
                    days=7
                )
                
                if df is None or len(df) < 50:
                    continue
                
                logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è {symbol}...")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
                for i in range(50, len(df), 3):
                    try:
                        current_data = df.iloc[:i+1].copy()
                        signal = self.lava_ai.get_signal(current_data, symbol)
                        
                        if signal and isinstance(signal, dict):
                            confidence = signal.get('confidence', 0)
                            direction = signal.get('direction', 'HOLD')
                            
                            all_confidences.append(confidence)
                            all_signals.append(signal)
                            
                            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞
                            if direction == 1 or direction == 'BUY':
                                signal_types['BUY'] += 1
                            elif direction == -1 or direction == 'SELL':
                                signal_types['SELL'] += 1
                            else:
                                signal_types['HOLD'] += 1
                            
                            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            conf_percent = confidence * 100
                            if conf_percent < 10:
                                confidence_ranges['0-10%'] += 1
                            elif conf_percent < 20:
                                confidence_ranges['10-20%'] += 1
                            elif conf_percent < 30:
                                confidence_ranges['20-30%'] += 1
                            elif conf_percent < 40:
                                confidence_ranges['30-40%'] += 1
                            elif conf_percent < 50:
                                confidence_ranges['40-50%'] += 1
                            elif conf_percent < 60:
                                confidence_ranges['50-60%'] += 1
                            elif conf_percent < 70:
                                confidence_ranges['60-70%'] += 1
                            elif conf_percent < 80:
                                confidence_ranges['70-80%'] += 1
                            elif conf_percent < 90:
                                confidence_ranges['80-90%'] += 1
                            else:
                                confidence_ranges['90-100%'] += 1
                                
                    except Exception as e:
                        logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞: {e}")
                        continue
                        
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue
        
        return {
            'signal_types': signal_types,
            'confidence_ranges': confidence_ranges,
            'all_confidences': all_confidences,
            'total_signals': len(all_signals),
            'avg_confidence': np.mean(all_confidences) if all_confidences else 0,
            'median_confidence': np.median(all_confidences) if all_confidences else 0,
            'std_confidence': np.std(all_confidences) if all_confidences else 0
        }
    
    def generate_calibration_report(self, threshold_results, pattern_analysis):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ"""
        print("\n" + "="*80)
        print("üîß –ö–ê–õ–ò–ë–†–û–í–ö–ê LAVA AI - –û–¢–ß–ï–¢")
        print("="*80)
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –°–ò–ì–ù–ê–õ–û–í:")
        print(f"   üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {pattern_analysis['total_signals']}")
        print(f"   üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pattern_analysis['avg_confidence']:.1%}")
        print(f"   üìä –ú–µ–¥–∏–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pattern_analysis['median_confidence']:.1%}")
        print(f"   üìè –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {pattern_analysis['std_confidence']:.1%}")
        
        print(f"\nüéØ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –°–ò–ì–ù–ê–õ–û–í:")
        total_signals = pattern_analysis['total_signals']
        for signal_type, count in pattern_analysis['signal_types'].items():
            percentage = (count / total_signals * 100) if total_signals > 0 else 0
            print(f"   {signal_type}: {count} ({percentage:.1f}%)")
        
        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –£–í–ï–†–ï–ù–ù–û–°–¢–ò:")
        for range_name, count in pattern_analysis['confidence_ranges'].items():
            percentage = (count / total_signals * 100) if total_signals > 0 else 0
            print(f"   {range_name}: {count} ({percentage:.1f}%)")
        
        print(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–†–û–ì–û–í –£–í–ï–†–ï–ù–ù–û–°–¢–ò:")
        print("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        print("‚îÇ  –ü–û–†–û–ì  ‚îÇ –°–ò–ì–ù–ê–õ–´ ‚îÇ –í–ê–õ–ò–î–ù–´–ï‚îÇ –£–°–ü–ï–• % ‚îÇ –°–†.–£–í–ï–†–ï–ù.  ‚îÇ")
        print("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        best_threshold = None
        best_score = 0
        
        for threshold, result in threshold_results.items():
            success_rate = result['success_rate']
            avg_conf = result['avg_confidence']
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–æ–º
            score = success_rate * (avg_conf * 100) / 100
            if score > best_score:
                best_score = score
                best_threshold = threshold
            
            print(f"‚îÇ {threshold:6.1%} ‚îÇ {result['total_signals']:7} ‚îÇ {result['valid_signals']:7} ‚îÇ {success_rate:6.1f}% ‚îÇ {avg_conf:10.1%} ‚îÇ")
        
        print("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ö–ê–õ–ò–ë–†–û–í–ö–ï:")
        
        if best_threshold:
            print(f"   üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {best_threshold:.1%}")
            print(f"   üìä –û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {threshold_results[best_threshold]['success_rate']:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
        low_confidence_signals = sum([
            pattern_analysis['confidence_ranges']['0-10%'],
            pattern_analysis['confidence_ranges']['10-20%']
        ])
        
        if low_confidence_signals > total_signals * 0.5:
            print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: {low_confidence_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (<20%)")
            print(f"      - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        
        if pattern_analysis['avg_confidence'] < 0.3:
            print(f"   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è ({pattern_analysis['avg_confidence']:.1%})")
            print(f"      - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
        if best_threshold:
            print(f"   min_confidence = {best_threshold:.2f}")
        
        if pattern_analysis['signal_types']['HOLD'] > total_signals * 0.8:
            print(f"   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ HOLD —Å–∏–≥–Ω–∞–ª–æ–≤ - —É–≤–µ–ª–∏—á–∏—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif pattern_analysis['signal_types']['HOLD'] < total_signals * 0.3:
            print(f"   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ HOLD —Å–∏–≥–Ω–∞–ª–æ–≤ - —É–º–µ–Ω—å—à–∏—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    try:
        calibrator = LavaAICalibrator()
        await calibrator.initialize()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        threshold_results = await calibrator.test_confidence_thresholds()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å–∏–≥–Ω–∞–ª–æ–≤
        pattern_analysis = await calibrator.analyze_signal_patterns()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        calibrator.generate_calibration_report(threshold_results, pattern_analysis)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())