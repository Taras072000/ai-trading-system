#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Mistral —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Peper Binance v4
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Mistral —Å–µ—Ä–≤–µ—Ä–∞
"""

import asyncio
import logging
import subprocess
import time
import requests
import psutil
import signal
import os
from typing import Optional, Dict, Any
from dataclasses import dataclass
from datetime import datetime

logger = logging.getLogger(__name__)

@dataclass
class MistralServerConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Mistral —Å–µ—Ä–≤–µ—Ä–∞"""
    host: str = "localhost"
    port: int = 11434
    model_name: str = "mistral"
    startup_timeout: int = 120  # —Å–µ–∫—É–Ω–¥—ã
    health_check_interval: int = 10  # —Å–µ–∫—É–Ω–¥—ã
    max_startup_attempts: int = 3
    server_command: str = "ollama serve"
    model_pull_command: str = "ollama pull mistral"

class MistralServerManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Mistral —Å–µ—Ä–≤–µ—Ä–æ–º
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
    """
    
    def __init__(self, config: MistralServerConfig = None):
        self.config = config or MistralServerConfig()
        self.server_process: Optional[subprocess.Popen] = None
        self.is_running = False
        self.startup_time: Optional[datetime] = None
        self.last_health_check: Optional[datetime] = None
        
        logger.info("ü§ñ MistralServerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config.host}:{self.config.port}")
    
    async def start_server(self, force_restart: bool = False) -> bool:
        """
        –ó–∞–ø—É—Å–∫ Mistral —Å–µ—Ä–≤–µ—Ä–∞
        
        Args:
            force_restart: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–µ—Ä–≤–µ—Ä
            if await self.is_server_running() and not force_restart:
                logger.info("‚úÖ Mistral —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            if force_restart:
                await self.stop_server()
                await asyncio.sleep(2)
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Mistral —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ollama
            if not await self._check_ollama_available():
                logger.error("‚ùå Ollama –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ Mistral
            if not await self._check_model_available():
                logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Mistral...")
                if not await self._pull_model():
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Mistral")
                    return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            for attempt in range(self.config.max_startup_attempts):
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ {attempt + 1}/{self.config.max_startup_attempts}")
                
                if await self._start_server_process():
                    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
                    if await self._wait_for_server_ready():
                        self.is_running = True
                        self.startup_time = datetime.now()
                        logger.info("‚úÖ Mistral —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ {attempt + 1}")
                        await self._cleanup_failed_start()
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}")
                
                if attempt < self.config.max_startup_attempts - 1:
                    await asyncio.sleep(5)
            
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Mistral —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Mistral —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def stop_server(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mistral —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Mistral —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—à –ø—Ä–æ—Ü–µ—Å—Å
            if self.server_process:
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –º—è–≥–∫–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å
                    self.server_process.terminate()
                    
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    try:
                        await asyncio.wait_for(
                            asyncio.create_task(self._wait_process_termination()),
                            timeout=10
                        )
                    except asyncio.TimeoutError:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        logger.warning("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                        self.server_process.kill()
                        await asyncio.sleep(2)
                    
                    self.server_process = None
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã ollama
            await self._kill_ollama_processes()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            for _ in range(10):
                if not await self.is_server_running():
                    break
                await asyncio.sleep(1)
            
            self.is_running = False
            self.startup_time = None
            self.last_health_check = None
            
            if await self.is_server_running():
                logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—Å–µ –µ—â–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                return False
            else:
                logger.info("‚úÖ Mistral —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Mistral —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def is_server_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ Mistral —Å–µ—Ä–≤–µ—Ä
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            url = f"http://{self.config.host}:{self.config.port}/api/tags"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                self.last_health_check = datetime.now()
                return True
            else:
                return False
                
        except Exception:
            return False
    
    async def health_check(self) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Mistral —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        """
        health_info = {
            'is_running': False,
            'response_time': None,
            'model_available': False,
            'last_check': datetime.now(),
            'uptime': None,
            'error': None
        }
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
            start_time = time.time()
            
            url = f"http://{self.config.host}:{self.config.port}/api/tags"
            response = requests.get(url, timeout=10)
            
            response_time = time.time() - start_time
            health_info['response_time'] = response_time
            
            if response.status_code == 200:
                health_info['is_running'] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                models_data = response.json()
                model_names = [model.get('name', '') for model in models_data.get('models', [])]
                health_info['model_available'] = any(self.config.model_name in name for name in model_names)
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º uptime
                if self.startup_time:
                    uptime = datetime.now() - self.startup_time
                    health_info['uptime'] = uptime.total_seconds()
                
                self.last_health_check = datetime.now()
            
        except Exception as e:
            health_info['error'] = str(e)
            logger.debug(f"Health check error: {e}")
        
        return health_info
    
    async def test_model_inference(self, test_prompt: str = "Hello, how are you?") -> Dict[str, Any]:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –º–æ–¥–µ–ª–∏
        
        Args:
            test_prompt: –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞
        """
        test_result = {
            'success': False,
            'response_time': None,
            'response_text': None,
            'error': None,
            'timestamp': datetime.now()
        }
        
        try:
            if not await self.is_server_running():
                test_result['error'] = "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
                return test_result
            
            start_time = time.time()
            
            url = f"http://{self.config.host}:{self.config.port}/api/generate"
            payload = {
                "model": self.config.model_name,
                "prompt": test_prompt,
                "stream": False
            }
            
            response = requests.post(url, json=payload, timeout=30)
            response_time = time.time() - start_time
            
            test_result['response_time'] = response_time
            
            if response.status_code == 200:
                response_data = response.json()
                test_result['response_text'] = response_data.get('response', '')
                test_result['success'] = True
                logger.info(f"‚úÖ –¢–µ—Å—Ç –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ —É—Å–ø–µ—à–µ–Ω (–≤—Ä–µ–º—è: {response_time:.2f}—Å)")
            else:
                test_result['error'] = f"HTTP {response.status_code}: {response.text}"
                
        except Exception as e:
            test_result['error'] = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")
        
        return test_result
    
    async def get_server_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        info = {
            'config': {
                'host': self.config.host,
                'port': self.config.port,
                'model_name': self.config.model_name
            },
            'status': {
                'is_running': self.is_running,
                'startup_time': self.startup_time,
                'last_health_check': self.last_health_check,
                'process_id': self.server_process.pid if self.server_process else None
            },
            'health': await self.health_check()
        }
        
        return info
    
    def get_server_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —Å–µ—Ä–≤–µ—Ä–∞
        """
        try:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            is_running = False
            try:
                url = f"http://{self.config.host}:{self.config.port}/api/tags"
                response = requests.get(url, timeout=5)
                is_running = response.status_code == 200
            except:
                is_running = False
            
            return {
                'is_running': is_running,
                'host': self.config.host,
                'port': self.config.port,
                'model_name': self.config.model_name,
                'startup_time': self.startup_time,
                'last_health_check': self.last_health_check,
                'process_id': self.server_process.pid if self.server_process else None
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return {
                'is_running': False,
                'error': str(e)
            }
    
    async def _check_ollama_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ollama –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            result = subprocess.run(['which', 'ollama'], capture_output=True, text=True)
            return result.returncode == 0
        except Exception:
            return False
    
    async def _check_model_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ Mistral"""
        try:
            result = subprocess.run(['ollama', 'list'], capture_output=True, text=True)
            if result.returncode == 0:
                return self.config.model_name in result.stdout
            return False
        except Exception:
            return False
    
    async def _pull_model(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Mistral"""
        try:
            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {self.config.model_name}...")
            
            process = subprocess.Popen(
                self.config.model_pull_command.split(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
            stdout, stderr = process.communicate(timeout=600)  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            
            if process.returncode == 0:
                logger.info("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")
            process.kill()
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False
    
    async def _start_server_process(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env['OLLAMA_HOST'] = f"{self.config.host}:{self.config.port}"
            
            self.server_process = subprocess.Popen(
                self.config.server_command.split(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                env=env,
                preexec_fn=os.setsid  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            )
            
            # –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            await asyncio.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ä–∞–∑—É
            if self.server_process.poll() is not None:
                logger.error("‚ùå –ü—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def _wait_for_server_ready(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        start_time = time.time()
        
        while time.time() - start_time < self.config.startup_timeout:
            try:
                if await self.is_server_running():
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞
                    health = await self.health_check()
                    if health['model_available']:
                        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                        return True
                    else:
                        logger.debug("‚è≥ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–æ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞")
                
                await asyncio.sleep(self.config.health_check_interval)
                
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
                await asyncio.sleep(2)
        
        logger.error(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ {self.config.startup_timeout} —Å–µ–∫—É–Ω–¥")
        return False
    
    async def _wait_process_termination(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        while self.server_process and self.server_process.poll() is None:
            await asyncio.sleep(0.1)
    
    async def _cleanup_failed_start(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        if self.server_process:
            try:
                self.server_process.kill()
                await asyncio.sleep(1)
            except:
                pass
            self.server_process = None
    
    async def _kill_ollama_processes(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ollama"""
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if 'ollama' in proc.info['name'].lower():
                        logger.debug(f"–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å ollama: {proc.info['pid']}")
                        proc.terminate()
                        
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        try:
                            proc.wait(timeout=5)
                        except psutil.TimeoutExpired:
                            proc.kill()
                            
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ ollama: {e}")
    
    async def __aenter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        await self.start_server()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        await self.stop_server()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_global_manager: Optional[MistralServerManager] = None

def get_global_manager() -> MistralServerManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    global _global_manager
    if _global_manager is None:
        _global_manager = MistralServerManager()
    return _global_manager

async def ensure_mistral_server_running() -> bool:
    """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ Mistral —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"""
    manager = get_global_manager()
    return await manager.start_server()

async def stop_mistral_server() -> bool:
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Mistral —Å–µ—Ä–≤–µ—Ä"""
    manager = get_global_manager()
    return await manager.stop_server()