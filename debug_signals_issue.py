#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import pandas as pd
import logging
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import List, Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from ai_modules.lava_ai import LavaAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine
from historical_data_manager import HistoricalDataManager

@dataclass
class TestConfig:
    min_consensus_models: int = 2
    enabled_ai_models: List[str] = None
    min_confidence: float = 0.25
    test_period_days: int = 3
    symbols: List[str] = None
    
    def __post_init__(self):
        if self.symbols is None:
            self.symbols = ['ETHUSDT', 'BTCUSDT']
        if self.enabled_ai_models is None:
            self.enabled_ai_models = ['lava_ai', 'reinforcement_learning_engine']

class SignalDiagnostic:
    def __init__(self):
        self.config = TestConfig()
        self.ai_models = {}
        self.historical_manager = HistoricalDataManager()
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lava AI
        try:
            self.ai_models['lava_ai'] = LavaAI()
            logger.info("‚úÖ lava_ai –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ lava_ai: {e}")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reinforcement Learning Engine
        try:
            self.ai_models['reinforcement_learning_engine'] = ReinforcementLearningEngine()
            logger.info("‚úÖ reinforcement_learning_engine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ reinforcement_learning_engine: {e}")
            
        logger.info(f"üéØ –í—Å–µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(self.ai_models)}")
        
    async def load_test_data(self, symbol: str) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            end_time = datetime.utcnow()
            start_time = end_time - timedelta(days=self.config.test_period_days)
            
            data = await self.historical_manager.load_data(
                symbol=symbol,
                interval='1h',
                start_date=start_time,
                end_date=end_time
            )
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
            if len(data) > 0:
                logger.info(f"üìà –ü–µ—Ä–∏–æ–¥: {data.index[0]} - {data.index[-1]}")
                logger.info(f"üí∞ –¶–µ–Ω–∞: {data['close'].iloc[-1]:.2f}")
            
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()
    
    async def test_individual_model(self, model_name: str, symbol: str, data: pd.DataFrame):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {model_name} –¥–ª—è {symbol}...")
        
        if model_name not in self.ai_models:
            logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
            
        model = self.ai_models[model_name]
        
        try:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            test_data = data.tail(50) if len(data) > 50 else data
            
            if model_name == 'lava_ai':
                result = await model.generate_trading_signals(test_data)
                logger.info(f"‚úÖ {model_name} —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                return result
                
            elif model_name == 'reinforcement_learning_engine':
                # –î–ª—è RL engine –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
                logger.info(f"üß† {model_name} –∞–∫—Ç–∏–≤–µ–Ω (RL engine)")
                return {'signal': 'ACTIVE', 'confidence': 0.5}
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {model_name}: {e}")
            return None
    
    async def run_diagnostic(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        await self.initialize()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in self.config.symbols:
            logger.info(f"\n{'='*60}")
            logger.info(f"üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê {symbol}")
            logger.info(f"{'='*60}")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            data = await self.load_test_data(symbol)
            if data.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            for model_name in self.config.enabled_ai_models:
                result = await self.test_individual_model(model_name, symbol, data)
                
                if result:
                    logger.info(f"‚úÖ {model_name}: –°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è {model_name}: –°–∏–≥–Ω–∞–ª –ù–ï –ø–æ–ª—É—á–µ–Ω")
        
        logger.info("\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def main():
    diagnostic = SignalDiagnostic()
    await diagnostic.run_diagnostic()

if __name__ == "__main__":
    asyncio.run(main())