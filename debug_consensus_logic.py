#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ AI –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import pandas as pd
from datetime import datetime
from historical_data_manager import HistoricalDataManager
from ai_modules.lava_ai import LavaAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine

async def test_consensus_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–°–ï–ù–°–£–°–ê AI –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data_manager = HistoricalDataManager()
    symbol = "BTCUSDT"
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
    data = await data_manager.load_data(symbol, "1h")
    
    if data is None or len(data) < 50:
        print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –º–æ–¥–µ–ª–∏
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –º–æ–¥–µ–ª–∏...")
    lava_ai = LavaAI()
    rl_engine = ReinforcementLearningEngine()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    print("\nüì° –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç AI –º–æ–¥–µ–ª–µ–π...")
    
    try:
        lava_result = await lava_ai.get_signal(symbol, data)
        print(f"üî• LavaAI: {lava_result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LavaAI: {e}")
        lava_result = None
    
    try:
        rl_result = await rl_engine.get_signal(symbol, data)
        print(f"üß† RL Engine: {rl_result}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ RL Engine: {e}")
        rl_result = None
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –ê–ù–ê–õ–ò–ó –ö–û–ù–°–ï–ù–°–£–°–ê:")
    print("-" * 30)
    
    if lava_result and rl_result:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
        lava_action = "HOLD"
        rl_action = "HOLD"
        
        if hasattr(lava_result, 'action'):
            lava_action = lava_result.action
        elif hasattr(lava_result, 'signal'):
            if lava_result.signal > 0.5:
                lava_action = "BUY"
            elif lava_result.signal < -0.5:
                lava_action = "SELL"
        
        if hasattr(rl_result, 'action'):
            rl_action = rl_result.action
        elif hasattr(rl_result, 'signal'):
            if rl_result.signal > 0.5:
                rl_action = "BUY"
            elif rl_result.signal < -0.5:
                rl_action = "SELL"
        
        print(f"üî• LavaAI –¥–µ–π—Å—Ç–≤–∏–µ: {lava_action}")
        print(f"üß† RL Engine –¥–µ–π—Å—Ç–≤–∏–µ: {rl_action}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
        if lava_action == rl_action and lava_action != "HOLD":
            print(f"‚úÖ –ö–û–ù–°–ï–ù–°–£–° –î–û–°–¢–ò–ì–ù–£–¢: {lava_action}")
            print("   –û–±–µ –º–æ–¥–µ–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã - —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω")
        elif lava_action != rl_action:
            print(f"‚ùå –ö–û–ù–°–ï–ù–°–£–° –ù–ï –î–û–°–¢–ò–ì–ù–£–¢: {lava_action} vs {rl_action}")
            print("   –ú–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã - —Å–∏–≥–Ω–∞–ª –ù–ï –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω")
            print("   ‚ö†Ô∏è  –≠–¢–û –û–°–ù–û–í–ù–ê–Ø –ü–†–ò–ß–ò–ù–ê –û–¢–°–£–¢–°–¢–í–ò–Ø –°–î–ï–õ–û–ö!")
        else:
            print(f"‚ö™ –û–±–µ –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç HOLD")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    print("\nüîß –°–ò–ú–£–õ–Ø–¶–ò–Ø –õ–û–ì–ò–ö–ò –ö–û–ù–°–ï–ù–°–£–°–ê:")
    print("-" * 40)
    
    min_consensus_models = 3
    consensus_weight_threshold = 0.3
    
    print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   min_consensus_models = {min_consensus_models}")
    print(f"   consensus_weight_threshold = {consensus_weight_threshold}")
    print(f"   enabled_models = ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai', 'reinforcement_learning_engine']")
    
    print(f"\nüí° –ü–†–û–ë–õ–ï–ú–ê:")
    print(f"   –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (BUY vs SELL),")
    print(f"   —Ç–æ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ 1 –≥–æ–ª–æ—Å,")
    print(f"   —á—Ç–æ –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö {min_consensus_models} –≥–æ–ª–æ—Å–æ–≤.")
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: –ù–ò –û–î–ò–ù —Å–∏–≥–Ω–∞–ª –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å!")
    
    print(f"\nüîß –†–ï–®–ï–ù–ò–ï:")
    print(f"   1. –ò–∑–º–µ–Ω–∏—Ç—å min_consensus_models —Å 2 –Ω–∞ 1")
    print(f"   2. –ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ AI –º–æ–¥–µ–ª–µ–π")
    print(f"   3. –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞")

if __name__ == "__main__":
    asyncio.run(test_consensus_logic())