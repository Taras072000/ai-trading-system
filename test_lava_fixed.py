#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ LavaAI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_modules.lava_ai import LavaAI

async def test_lava_ai_fixed():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ LavaAI"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ LavaAI...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LavaAI
    lava_ai = LavaAI()
    await lava_ai.initialize()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–∏–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–¥–æ–º
    dates = pd.date_range(start='2024-01-01', periods=100, freq='1H')
    
    # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    base_price = 50000
    prices = []
    volumes = []
    
    for i in range(100):
        # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
        trend_component = i * 50  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
        noise = np.random.normal(0, 100)  # –ù–µ–±–æ–ª—å—à–æ–π —à—É–º
        price = base_price + trend_component + noise
        prices.append(price)
        
        # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        volume = np.random.uniform(1000000, 2000000)
        volumes.append(volume)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    test_data = pd.DataFrame({
        'timestamp': dates,
        'open': prices,
        'high': [p * 1.01 for p in prices],
        'low': [p * 0.99 for p in prices],
        'close': prices,
        'volume': volumes
    })
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data)} —Å–≤–µ—á–µ–π")
    print(f"üí∞ –¶–µ–Ω–∞: {test_data['close'].iloc[0]:.2f} ‚Üí {test_data['close'].iloc[-1]:.2f}")
    print(f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {((test_data['close'].iloc[-1] / test_data['close'].iloc[0]) - 1) * 100:.2f}%")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    try:
        signals = await lava_ai.generate_trading_signals(test_data)
        
        print("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        print(f"   –°–∏–≥–Ω–∞–ª: {signals.get('signal', 'UNKNOWN')}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signals.get('confidence', 0)*100:.1f}%")
        print(f"   Signal Score: {signals.get('signal_score', 0):.3f}")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {signals.get('signal_quality', 0)*100:.1f}%")
        print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signals.get('reasoning', '–ù–µ—Ç')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        market_conditions = signals.get('market_conditions', {})
        print(f"\nüìä –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:")
        for key, value in market_conditions.items():
            print(f"   {key}: {value}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        tech_indicators = signals.get('technical_indicators', {})
        print(f"\nüìà –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã:")
        for key, value in tech_indicators.items():
            if isinstance(value, (int, float)):
                print(f"   {key}: {value:.3f}")
            else:
                print(f"   {key}: {value}")
        
        return signals
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return None

if __name__ == "__main__":
    asyncio.run(test_lava_ai_fixed())