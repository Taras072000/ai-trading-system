#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging
from dataclasses import dataclass
import json
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from winrate_test_with_results2 import (
    TestConfig, TradeResult, WinrateTestResult, RealWinrateTester,
    AIModelDecision, ConsensusSignal, AIModelPerformance
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_trades() -> List[TradeResult]:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏"""
    trades = []
    base_time = datetime.now() - timedelta(days=30)
    
    # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    profitable_trades_data = [
        {"symbol": "BTCUSDT", "pnl": 150.0, "pnl_percent": 15.0, "confidence": 85.0, "ai_model": "TradingAI", "consensus": 3},
        {"symbol": "ETHUSDT", "pnl": 120.0, "pnl_percent": 12.0, "confidence": 78.0, "ai_model": "MistralAI", "consensus": 4},
        {"symbol": "ADAUSDT", "pnl": 80.0, "pnl_percent": 8.0, "confidence": 72.0, "ai_model": "LGBMAI", "consensus": 2},
        {"symbol": "BTCUSDT", "pnl": 95.0, "pnl_percent": 9.5, "confidence": 81.0, "ai_model": "LavaAI", "consensus": 3},
        {"symbol": "ETHUSDT", "pnl": 110.0, "pnl_percent": 11.0, "confidence": 76.0, "ai_model": "TradingAI", "consensus": 2},
        {"symbol": "DOGEUSDT", "pnl": 65.0, "pnl_percent": 6.5, "confidence": 69.0, "ai_model": "MistralAI", "consensus": 3},
        {"symbol": "XRPUSDT", "pnl": 75.0, "pnl_percent": 7.5, "confidence": 74.0, "ai_model": "LGBMAI", "consensus": 2},
        {"symbol": "BTCUSDT", "pnl": 200.0, "pnl_percent": 20.0, "confidence": 92.0, "ai_model": "MistralAI", "consensus": 4},
    ]
    
    # –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    losing_trades_data = [
        {"symbol": "SOLUSDT", "pnl": -45.0, "pnl_percent": -4.5, "confidence": 65.0, "ai_model": "LavaAI", "consensus": 2},
        {"symbol": "ADAUSDT", "pnl": -30.0, "pnl_percent": -3.0, "confidence": 62.0, "ai_model": "TradingAI", "consensus": 2},
        {"symbol": "DOGEUSDT", "pnl": -25.0, "pnl_percent": -2.5, "confidence": 68.0, "ai_model": "LGBMAI", "consensus": 2},
        {"symbol": "XRPUSDT", "pnl": -35.0, "pnl_percent": -3.5, "confidence": 71.0, "ai_model": "LavaAI", "consensus": 3},
        {"symbol": "SOLUSDT", "pnl": -50.0, "pnl_percent": -5.0, "confidence": 66.0, "ai_model": "TradingAI", "consensus": 2},
    ]
    
    all_trades_data = profitable_trades_data + losing_trades_data
    
    for i, trade_data in enumerate(all_trades_data):
        entry_time = base_time + timedelta(hours=i * 6)
        exit_time = entry_time + timedelta(hours=np.random.randint(2, 12))
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ AI —Ä–µ—à–µ–Ω–∏—è
        participating_models = []
        for j in range(trade_data["consensus"]):
            model_names = ["TradingAI", "LavaAI", "LGBMAI", "MistralAI"]
            participating_models.append(AIModelDecision(
                model_name=model_names[j % len(model_names)],
                action="BUY" if trade_data["pnl"] > 0 else "SELL",
                confidence=trade_data["confidence"] + np.random.uniform(-5, 5),
                reasoning=f"Test reasoning for {trade_data['symbol']}",
                timestamp=entry_time
            ))
        
        entry_price = 50000.0 if "BTC" in trade_data["symbol"] else 2000.0
        exit_price = entry_price * (1 + trade_data["pnl_percent"] / 100)
        
        trade = TradeResult(
            symbol=trade_data["symbol"],
            entry_time=entry_time,
            entry_price=entry_price,
            exit_time=exit_time,
            exit_price=exit_price,
            direction="LONG" if trade_data["pnl"] > 0 else "SHORT",
            pnl=trade_data["pnl"],
            pnl_percent=trade_data["pnl_percent"],
            confidence=trade_data["confidence"],
            ai_model=trade_data["ai_model"],
            consensus_strength=trade_data["consensus"],
            participating_models=participating_models,
            position_size=1000.0,
            commission=1.0
        )
        trades.append(trade)
    
    return trades

def create_test_results() -> Dict[str, WinrateTestResult]:
    """–°–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    trades = create_test_trades()
    results = {}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    symbols_trades = {}
    for trade in trades:
        if trade.symbol not in symbols_trades:
            symbols_trades[trade.symbol] = []
        symbols_trades[trade.symbol].append(trade)
    
    # –°–æ–∑–¥–∞—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    for symbol, symbol_trades in symbols_trades.items():
        winning_trades = len([t for t in symbol_trades if t.pnl > 0])
        total_trades = len(symbol_trades)
        total_pnl = sum(t.pnl for t in symbol_trades)
        
        results[symbol] = WinrateTestResult(
            symbol=symbol,
            total_trades=total_trades,
            winning_trades=winning_trades,
            losing_trades=total_trades - winning_trades,
            win_rate=(winning_trades / total_trades * 100) if total_trades > 0 else 0,
            total_pnl=total_pnl,
            total_pnl_percent=total_pnl,  # –£–ø—Ä–æ—â—ë–Ω–Ω–æ
            avg_trade_pnl=total_pnl / total_trades if total_trades > 0 else 0,
            max_drawdown=0.0,  # –£–ø—Ä–æ—â—ë–Ω–Ω–æ
            sharpe_ratio=1.5,  # –§–∏–∫—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            trades=symbol_trades
        )
    
    return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤"""
    print("üß™ " + "=" * 70 + " üß™")
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô –î–ï–¢–ê–õ–¨–ù–û–ô –û–¢–ß–Å–¢–ù–û–°–¢–ò")
    print("üß™ " + "=" * 70 + " üß™")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TestConfig()
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–µ—Ä
    tester = RealWinrateTester(config)
    
    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    results = create_test_results()
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {sum(len(r.trades) for r in results.values())} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")
    print(f"üìà –°–∏–º–≤–æ–ª—ã: {', '.join(results.keys())}")
    print()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    report = tester.generate_report(results)
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á—ë—Ç
    print(report)
    
    print("\n" + "üéâ " * 20)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É reports/csv_reports/ –¥–ª—è CSV —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    asyncio.run(main())