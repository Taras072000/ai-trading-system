#!/usr/bin/env python3
"""
Mass Training Script - –ú–∞—Å—Å–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π
–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç —Å 3-–ª–µ—Ç–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python mass_training_script.py
"""

import asyncio
import logging
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from trading_ai_trainer import TradingAITrainer
from data_collector import DataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('mass_training.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MassTrainingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self):
        # –°–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.symbols = ['BNBUSDT', 'ADAUSDT', 'SOLUSDT', 'AVAXUSDT', 'DOTUSDT']
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        self.training_config = {
            'days': 1095,  # 3 –≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (365 * 3)
            'target_winrate': 0.75,  # –¶–µ–ª–µ–≤–æ–π –≤–∏–Ω—Ä–µ–π—Ç 75%
            'lookback_period': 50,
            'prediction_horizon': 1,
            'min_confidence': 0.6,
            'risk_reward_ratio': 2.0,
            'stop_loss_pct': 0.02,
            'take_profit_pct': 0.04
        }
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        self.training_results = {}
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_dir = Path("training_results")
        self.results_dir.mkdir(exist_ok=True)
    
    async def train_single_symbol(self, symbol: str) -> Dict[str, Any]:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            trainer = TradingAITrainer(symbol)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–Ω–µ—Ä–∞
            trainer.config.update(self.training_config)
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º {self.training_config['days']} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 3 –≥–æ–¥–∞
            data = await trainer.load_market_data(self.training_config['days'])
            
            if data is None or len(data) < 1000:
                logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(data) if data is not None else 0} –∑–∞–ø–∏—Å–µ–π")
                return {
                    'symbol': symbol,
                    'status': 'failed',
                    'error': 'Insufficient data',
                    'data_points': len(data) if data is not None else 0
                }
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            logger.info(f"üîß –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è {symbol}")
            features_df = trainer.prepare_features(data)
            
            if features_df is None or len(features_df) == 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
                return {
                    'symbol': symbol,
                    'status': 'failed',
                    'error': 'Feature preparation failed'
                }
            
            logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(features_df)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏
            logger.info(f"üè∑Ô∏è –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–ª—è {symbol}")
            labels, features_df = trainer.create_labels(data, features_df)
            
            if labels is None or len(labels) == 0:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ç–æ–∫ –¥–ª—è {symbol}")
                return {
                    'symbol': symbol,
                    'status': 'failed',
                    'error': 'Label creation failed'
                }
            
            # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
            logger.info(f"ü§ñ –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
            training_results = trainer.train_models(features_df, labels)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏
            logger.info(f"üìà –û—Ü–µ–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
            evaluation = trainer.evaluate_model(training_results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –¥–ª—è {symbol}")
            trainer.save_model()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'symbol': symbol,
                'status': 'success',
                'data_points': len(data),
                'features_count': len(features_df.columns),
                'labels_count': len(labels),
                'best_model': evaluation.get('best_model', 'unknown'),
                'best_score': evaluation.get('best_score', 0),
                'training_time': datetime.now().isoformat(),
                'model_path': f"models/trading_ai/{symbol}_trading_model.joblib",
                'evaluation': evaluation
            }
            
            logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìä –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {result['best_model']}")
            logger.info(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {result['best_score']:.4f}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol}: {str(e)}", exc_info=True)
            return {
                'symbol': symbol,
                'status': 'failed',
                'error': str(e),
                'training_time': datetime.now().isoformat()
            }
    
    async def train_all_symbols(self) -> Dict[str, Any]:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π")
        logger.info(f"üìã –°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: {', '.join(self.symbols)}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {self.training_config['days']} –¥–Ω–µ–π (3 –≥–æ–¥–∞)")
        
        start_time = datetime.now()
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–∏—Å—Ç–µ–º—É)
        for symbol in self.symbols:
            result = await self.train_single_symbol(symbol)
            self.training_results[symbol] = result
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.save_intermediate_results()
        
        end_time = datetime.now()
        training_duration = end_time - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        summary = self.generate_summary(training_duration)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self.save_final_results(summary)
        
        logger.info("üéâ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        self.print_summary(summary)
        
        return {
            'summary': summary,
            'results': self.training_results
        }
    
    def generate_summary(self, training_duration) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        successful = [r for r in self.training_results.values() if r['status'] == 'success']
        failed = [r for r in self.training_results.values() if r['status'] == 'failed']
        
        summary = {
            'total_symbols': len(self.symbols),
            'successful_trainings': len(successful),
            'failed_trainings': len(failed),
            'success_rate': len(successful) / len(self.symbols) * 100,
            'training_duration': str(training_duration),
            'training_config': self.training_config,
            'timestamp': datetime.now().isoformat()
        }
        
        if successful:
            summary['best_models'] = {
                r['symbol']: {
                    'model': r['best_model'],
                    'score': r['best_score'],
                    'data_points': r['data_points']
                }
                for r in successful
            }
            
            summary['average_score'] = sum(r['best_score'] for r in successful) / len(successful)
            summary['total_data_points'] = sum(r['data_points'] for r in successful)
        
        if failed:
            summary['failed_symbols'] = {
                r['symbol']: r['error']
                for r in failed
            }
        
        return summary
    
    def print_summary(self, summary: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª—å"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ê–°–°–û–í–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
        print("="*60)
        print(f"üìã –í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {summary['total_symbols']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–æ: {summary['successful_trainings']}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary['failed_trainings']}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {summary['training_duration']}")
        
        if 'average_score' in summary:
            print(f"üéØ –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {summary['average_score']:.4f}")
            print(f"üìä –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {summary['total_data_points']:,}")
        
        if 'best_models' in summary:
            print("\nüèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò:")
            for symbol, info in summary['best_models'].items():
                print(f"  {symbol}: {info['model']} (—Ç–æ—á–Ω–æ—Å—Ç—å: {info['score']:.4f})")
        
        if 'failed_symbols' in summary:
            print("\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –û–ë–£–ß–ï–ù–ò–Ø:")
            for symbol, error in summary['failed_symbols'].items():
                print(f"  {symbol}: {error}")
        
        print("="*60)
    
    async def save_intermediate_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = self.results_dir / f"intermediate_results_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.training_results, f, indent=2, ensure_ascii=False)
    
    async def save_final_results(self, summary: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_filename = self.results_dir / f"mass_training_results_{timestamp}.json"
        with open(results_filename, 'w', encoding='utf-8') as f:
            json.dump({
                'summary': summary,
                'detailed_results': self.training_results
            }, f, indent=2, ensure_ascii=False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        summary_filename = self.results_dir / f"training_summary_{timestamp}.txt"
        with open(summary_filename, 'w', encoding='utf-8') as f:
            f.write("–°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ú–ê–°–°–û–í–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø AI –ú–û–î–ï–õ–ï–ô\n")
            f.write("="*60 + "\n\n")
            f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {summary['timestamp']}\n")
            f.write(f"–í—Å–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤: {summary['total_symbols']}\n")
            f.write(f"–£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–æ: {summary['successful_trainings']}\n")
            f.write(f"–ù–µ—É–¥–∞—á–Ω—ã—Ö: {summary['failed_trainings']}\n")
            f.write(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%\n")
            f.write(f"–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {summary['training_duration']}\n")
            
            if 'average_score' in summary:
                f.write(f"–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {summary['average_score']:.4f}\n")
                f.write(f"–í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {summary['total_data_points']:,}\n")
            
            f.write("\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è:\n")
            for key, value in summary['training_config'].items():
                f.write(f"  {key}: {value}\n")
            
            if 'best_models' in summary:
                f.write("\n–õ—É—á—à–∏–µ –º–æ–¥–µ–ª–∏:\n")
                for symbol, info in summary['best_models'].items():
                    f.write(f"  {symbol}: {info['model']} (—Ç–æ—á–Ω–æ—Å—Ç—å: {info['score']:.4f}, –¥–∞–Ω–Ω—ã—Ö: {info['data_points']:,})\n")
            
            if 'failed_symbols' in summary:
                f.write("\n–ù–µ—É–¥–∞—á–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è:\n")
                for symbol, error in summary['failed_symbols'].items():
                    f.write(f"  {symbol}: {error}\n")
        
        logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_filename}")
        logger.info(f"üìÑ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {summary_filename}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π")
    print("üìã –ú–æ–Ω–µ—Ç—ã: BNBUSDT, ADAUSDT, SOLUSDT, AVAXUSDT, DOTUSDT")
    print("üìÖ –ü–µ—Ä–∏–æ–¥: 3 –≥–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("üéØ –¶–µ–ª—å: –≤–∏–Ω—Ä–µ–π—Ç 75%+")
    print("\n" + "="*60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—É—á–µ–Ω–∏—è
    manager = MassTrainingManager()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        results = await manager.train_all_symbols()
        
        print("\nüéâ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return results
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("\n‚èπÔ∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    results = asyncio.run(main())