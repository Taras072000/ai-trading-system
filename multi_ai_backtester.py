#!/usr/bin/env python3
"""
Multi-AI Backtester
–ë—ç–∫—Ç–µ—Å—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MultiAIOrchestrator –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import logging
from dataclasses import dataclass
import os

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
from ai_modules.multi_ai_orchestrator import MultiAIOrchestrator
from data_collector import BinanceDataCollector, DataManager
from historical_data_manager import HistoricalDataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class BacktestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    initial_balance: float = 100.0  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ USD
    take_profit_levels: int = 5     # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    stop_loss_enabled: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å
    position_size_percent: float = 0.1  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ % –æ—Ç –±–∞–ª–∞–Ω—Å–∞
    commission_rate: float = 0.001  # –ö–æ–º–∏—Å—Å–∏—è 0.1%
    
@dataclass
class Trade:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–¥–µ–ª–∫–∏"""
    symbol: str
    entry_time: datetime
    entry_price: float
    direction: str  # 'LONG' –∏–ª–∏ 'SHORT'
    size: float
    stop_loss: float
    take_profits: List[float]
    exit_time: Optional[datetime] = None
    exit_price: Optional[float] = None
    exit_reason: Optional[str] = None
    pnl: Optional[float] = None
    
@dataclass
class BacktestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
    symbol: str
    total_trades: int
    winning_trades: int
    losing_trades: int
    win_rate: float
    total_pnl: float
    max_drawdown: float
    sharpe_ratio: float
    final_balance: float
    trades: List[Trade]

class MultiAIBacktester:
    """–ë—ç–∫—Ç–µ—Å—Ç–µ—Ä –¥–ª—è MultiAIOrchestrator"""
    
    def __init__(self, config: BacktestConfig):
        self.config = config
        self.orchestrator = None
        self.data_collector = BinanceDataCollector()
        self.data_manager = DataManager()
        self.historical_manager = HistoricalDataManager()
        
        # –¢–æ–ø-5 –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'ADAUSDT', 'SOLUSDT']
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å —Ä–µ–∂–∏–º–æ–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
            self.orchestrator = MultiAIOrchestrator(backtest_mode=True)
            await self.orchestrator.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            self.data_manager = DataManager()
            
            logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞: {e}")
            raise
        
    async def load_historical_data(self, symbol: str, days: int = 7) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –∑–∞ {days} –¥–Ω–µ–π...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataManager
            async with self.data_collector:
                data = await self.data_collector.get_historical_data(
                    symbol=symbol,
                    interval='1h',
                    days=days
                )
            
            if data is None or len(data) == 0:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
                return pd.DataFrame()
                
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()
    
    def calculate_position_size(self, balance: float, price: float) -> float:
        """–†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        position_value = balance * self.config.position_size_percent
        return position_value / price
    
    def calculate_take_profits(self, entry_price: float, direction: str) -> List[float]:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤"""
        take_profits = []
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        tp_percentages = [0.8, 1.2, 2.0, 3.0, 5.0]  # 5 —É—Ä–æ–≤–Ω–µ–π
        
        for i, tp_pct in enumerate(tp_percentages[:self.config.take_profit_levels]):
            if direction == 'LONG':
                tp_price = entry_price * (1 + tp_pct / 100)
            else:  # SHORT
                tp_price = entry_price * (1 - tp_pct / 100)
            take_profits.append(tp_price)
            
        return take_profits
    
    def calculate_stop_loss(self, entry_price: float, direction: str) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞"""
        sl_percentage = 1.5  # –£–º–µ–Ω—å—à–µ–Ω –¥–æ 1.5% –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
        
        if direction == 'LONG':
            return entry_price * (1 - sl_percentage / 100)
        else:  # SHORT
            return entry_price * (1 + sl_percentage / 100)
    
    async def simulate_trade(self, trade: Trade, data: pd.DataFrame, start_idx: int) -> Trade:
        """–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        
        # –ü–æ–∏—Å–∫ —Ç–æ—á–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏
        for i in range(start_idx + 1, len(data)):
            current_candle = data.iloc[i]
            high = current_candle['high']
            low = current_candle['low']
            close = current_candle['close']
            timestamp = current_candle['timestamp']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
            if self.config.stop_loss_enabled:
                if trade.direction == 'LONG' and low <= trade.stop_loss:
                    trade.exit_time = timestamp
                    trade.exit_price = trade.stop_loss
                    trade.exit_reason = 'Stop Loss'
                    break
                elif trade.direction == 'SHORT' and high >= trade.stop_loss:
                    trade.exit_time = timestamp
                    trade.exit_price = trade.stop_loss
                    trade.exit_reason = 'Stop Loss'
                    break
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
            for j, tp_price in enumerate(trade.take_profits):
                if trade.direction == 'LONG' and high >= tp_price:
                    trade.exit_time = timestamp
                    trade.exit_price = tp_price
                    trade.exit_reason = f'Take Profit {j+1}'
                    break
                elif trade.direction == 'SHORT' and low <= tp_price:
                    trade.exit_time = timestamp
                    trade.exit_price = tp_price
                    trade.exit_reason = f'Take Profit {j+1}'
                    break
            
            if trade.exit_time:
                break
        
        # –ï—Å–ª–∏ —Å–¥–µ–ª–∫–∞ –Ω–µ –∑–∞–∫—Ä—ã–ª–∞—Å—å, –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω–µ
        if not trade.exit_time:
            last_candle = data.iloc[-1]
            trade.exit_time = last_candle['timestamp']
            trade.exit_price = last_candle['close']
            trade.exit_reason = 'End of Data'
        
        # –†–∞—Å—á–µ—Ç PnL
        if trade.direction == 'LONG':
            trade.pnl = (trade.exit_price - trade.entry_price) * trade.size
        else:  # SHORT
            trade.pnl = (trade.entry_price - trade.exit_price) * trade.size
        
        # –£—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
        commission = (trade.entry_price + trade.exit_price) * trade.size * self.config.commission_rate
        trade.pnl -= commission
        
        return trade
    
    async def backtest_symbol(self, symbol: str) -> BacktestResult:
        """–ë—ç–∫—Ç–µ—Å—Ç –¥–ª—è –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã"""
        logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞—é –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è {symbol}...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = await self.load_historical_data(symbol, days=30)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –º–µ—Å—è—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        if data.empty:
            return BacktestResult(
                symbol=symbol, total_trades=0, winning_trades=0, losing_trades=0,
                win_rate=0, total_pnl=0, max_drawdown=0, sharpe_ratio=0,
                final_balance=self.config.initial_balance, trades=[]
            )
        
        trades = []
        balance = self.config.initial_balance
        peak_balance = balance
        max_drawdown = 0
        
        # –ü—Ä–æ—Ö–æ–¥ –ø–æ –¥–∞–Ω–Ω—ã–º —Å —à–∞–≥–æ–º –≤ 4 —á–∞—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        step = 4  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
        
        for i in range(100, len(data) - 24, step):  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                current_data = data.iloc[:i+1].copy()
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç AI —Å–∏—Å—Ç–µ–º—ã
                decision = await self.orchestrator.analyze_and_decide(symbol, current_data)
                
                if not decision or decision.action in ['HOLD', 'WAIT']:
                    continue
                
                action = decision.action
                confidence = decision.confidence
                
                # –§–∏–ª—å—Ç—Ä –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (–º–∏–Ω–∏–º—É–º 45%)
                if confidence < 0.45:
                    continue
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                current_candle = data.iloc[i]
                entry_price = current_candle['close']
                
                # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
                position_size = self.calculate_position_size(balance, entry_price)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–¥–µ–ª–∫–∏
                trade = Trade(
                    symbol=symbol,
                    entry_time=current_candle['timestamp'],
                    entry_price=entry_price,
                    direction=action,
                    size=position_size,
                    stop_loss=self.calculate_stop_loss(entry_price, action),
                    take_profits=self.calculate_take_profits(entry_price, action)
                )
                
                # –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
                completed_trade = await self.simulate_trade(trade, data, i)
                trades.append(completed_trade)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                balance += completed_trade.pnl
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
                if balance > peak_balance:
                    peak_balance = balance
                
                current_drawdown = (peak_balance - balance) / peak_balance
                if current_drawdown > max_drawdown:
                    max_drawdown = current_drawdown
                
                logger.info(f"üí∞ {symbol}: –°–¥–µ–ª–∫–∞ {len(trades)} - {completed_trade.exit_reason}, PnL: ${completed_trade.pnl:.2f}, –ë–∞–ª–∞–Ω—Å: ${balance:.2f}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {symbol} –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ {i}: {e}")
                continue
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        winning_trades = len([t for t in trades if t.pnl > 0])
        losing_trades = len([t for t in trades if t.pnl <= 0])
        win_rate = winning_trades / len(trades) if trades else 0
        total_pnl = sum(t.pnl for t in trades)
        
        # –†–∞—Å—á–µ—Ç Sharpe ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        if trades:
            returns = [t.pnl / self.config.initial_balance for t in trades]
            sharpe_ratio = np.mean(returns) / np.std(returns) if np.std(returns) > 0 else 0
        else:
            sharpe_ratio = 0
        
        result = BacktestResult(
            symbol=symbol,
            total_trades=len(trades),
            winning_trades=winning_trades,
            losing_trades=losing_trades,
            win_rate=win_rate,
            total_pnl=total_pnl,
            max_drawdown=max_drawdown,
            sharpe_ratio=sharpe_ratio,
            final_balance=balance,
            trades=trades
        )
        
        logger.info(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω: {len(trades)} —Å–¥–µ–ª–æ–∫, Win Rate: {win_rate:.1%}, PnL: ${total_pnl:.2f}")
        
        return result
    
    async def run_full_backtest(self) -> Dict[str, BacktestResult]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ Multi-AI —Å–∏—Å—Ç–µ–º—ã...")
        
        await self.initialize()
        
        results = {}
        
        for symbol in self.symbols:
            try:
                result = await self.backtest_symbol(symbol)
                results[symbol] = result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {symbol}: {e}")
                continue
        
        return results
    
    def generate_report(self, results: Dict[str, BacktestResult]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        report = []
        report.append("=" * 80)
        report.append("üìä –û–¢–ß–ï–¢ –ü–û –ë–≠–ö–¢–ï–°–¢–£ MULTI-AI –°–ò–°–¢–ï–ú–´")
        report.append("=" * 80)
        report.append(f"–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 7 –¥–Ω–µ–π")
        report.append(f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.config.initial_balance}")
        report.append(f"–í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã: {', '.join(self.symbols)}")
        report.append("")
        
        total_pnl = 0
        total_trades = 0
        total_winning = 0
        
        for symbol, result in results.items():
            if result.total_trades == 0:
                continue
                
            report.append(f"üî∏ {symbol}:")
            report.append(f"   –°–¥–µ–ª–æ–∫: {result.total_trades}")
            report.append(f"   Win Rate: {result.win_rate:.1%}")
            report.append(f"   PnL: ${result.total_pnl:.2f}")
            report.append(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${result.final_balance:.2f}")
            report.append(f"   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {result.max_drawdown:.1%}")
            report.append(f"   Sharpe Ratio: {result.sharpe_ratio:.2f}")
            report.append("")
            
            total_pnl += result.total_pnl
            total_trades += result.total_trades
            total_winning += result.winning_trades
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        overall_win_rate = total_winning / total_trades if total_trades > 0 else 0
        
        report.append("=" * 50)
        report.append("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        report.append(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        report.append(f"–û–±—â–∏–π Win Rate: {overall_win_rate:.1%}")
        report.append(f"–û–±—â–∏–π PnL: ${total_pnl:.2f}")
        report.append(f"ROI: {(total_pnl / self.config.initial_balance) * 100:.1f}%")
        report.append("=" * 50)
        
        return "\n".join(report)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞
    config = BacktestConfig(
        initial_balance=100.0,
        take_profit_levels=5,
        stop_loss_enabled=True,
        position_size_percent=0.1,
        commission_rate=0.001
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞
    backtester = MultiAIBacktester(config)
    
    try:
        # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
        results = await backtester.run_full_backtest()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = backtester.generate_report(results)
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        with open(f"backtest_results_{timestamp}.txt", "w", encoding="utf-8") as f:
            f.write(report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
        json_results = {}
        for symbol, result in results.items():
            json_results[symbol] = {
                'total_trades': result.total_trades,
                'winning_trades': result.winning_trades,
                'losing_trades': result.losing_trades,
                'win_rate': result.win_rate,
                'total_pnl': result.total_pnl,
                'max_drawdown': result.max_drawdown,
                'sharpe_ratio': result.sharpe_ratio,
                'final_balance': result.final_balance,
                'trades': [
                    {
                        'entry_time': trade.entry_time.isoformat(),
                        'entry_price': trade.entry_price,
                        'direction': trade.direction,
                        'exit_time': trade.exit_time.isoformat() if trade.exit_time else None,
                        'exit_price': trade.exit_price,
                        'exit_reason': trade.exit_reason,
                        'pnl': trade.pnl
                    }
                    for trade in result.trades
                ]
            }
        
        with open(f"backtest_data_{timestamp}.json", "w", encoding="utf-8") as f:
            json.dump(json_results, f, indent=2, ensure_ascii=False)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backtest_results_{timestamp}.txt –∏ backtest_data_{timestamp}.json")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())