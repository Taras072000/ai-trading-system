#!/usr/bin/env python3
"""
üéØ –¢–ï–°–¢ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö
================================

–¢–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
- min_confidence —Å–Ω–∏–∂–µ–Ω –¥–æ 25% (–±—ã–ª–æ 30%)
- –í–∫–ª—é—á–µ–Ω—ã 2 –ª—É—á—à–∏–µ AI –º–æ–¥–µ–ª–∏: trading_ai + lava_ai
- –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
- –¶–µ–ª—å: —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_balanced_settings.py
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from winrate_test_with_results2 import RealWinrateTester, TestConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_balanced_settings():
    """
    üéØ –¢–ï–°–¢ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö
    
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    print("üéØ –¢–ï–°–¢ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 65)
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    config = TestConfig(
        test_period_days=3,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç –Ω–∞ 3 –¥–Ω—è
        start_balance=100.0,
        symbols=['BTCUSDT', 'ETHUSDT'],  # –¢–æ–ª—å–∫–æ 2 —Ç–æ–ø –ø–∞—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        # –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
        position_size_percent=0.02,  # 2% (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)
        leverage_multiplier=3.0,     # 3x (—É–º–µ—Ä–µ–Ω–Ω–æ)
        stop_loss_percent=0.015,     # 1.5% (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        take_profit_percent=0.045,   # 4.5% (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:3)
        min_confidence=0.25,         # 25% (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–∞:
        max_portfolio_drawdown=10.0,
        max_consecutive_losses=3,
        confidence_correlation_check=True,
        min_correlation_threshold=0.1,
        
        # –ö–æ–Ω—Å–µ–Ω—Å—É—Å (2 –º–æ–¥–µ–ª–∏):
        min_consensus_models=2,
        enabled_ai_models=['trading_ai', 'lava_ai'],
        
        # –û—Ç–ª–∞–¥–∫–∞
        debug_mode=True
    )
    
    print("üìä –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    print(f"   üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {config.position_size_percent*100}%")
    print(f"   üìà –ü–ª–µ—á–æ: {config.leverage_multiplier}x")
    print(f"   üõë –°—Ç–æ–ø-–ª–æ—Å—Å: {config.stop_loss_percent*100}%")
    print(f"   üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {config.take_profit_percent*100}%")
    print(f"   üé≤ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {config.min_confidence*100}% (—Å–Ω–∏–∂–µ–Ω–æ —Å 30%)")
    print(f"   ü§ñ AI –º–æ–¥–µ–ª–∏: {', '.join(config.enabled_ai_models)}")
    print(f"   üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {config.max_portfolio_drawdown}%")
    print()
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
        
        tester = RealWinrateTester(config)
        results_dict = await tester.run_full_test()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        all_trades = []
        total_pnl = 0.0
        for symbol, result in results_dict.items():
            all_trades.extend(result.trades)
            total_pnl += result.total_pnl
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if all_trades:
            from types import SimpleNamespace
            results = SimpleNamespace()
            results.trades = all_trades
            results.total_pnl = total_pnl
        else:
            results = None
        
        if results:
            print("‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print("=" * 40)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_trades = len(results.trades)
            profitable_trades = len([t for t in results.trades if t.pnl > 0])
            win_rate = (profitable_trades / total_trades * 100) if total_trades > 0 else 0
            total_pnl = sum(t.pnl for t in results.trades)
            
            print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            print(f"üí∞ –û–±—â–∏–π P&L: {total_pnl:.2f} USDT")
            print(f"üéØ Win Rate: {win_rate:.1f}%")
            print(f"üìà –°—Ä–µ–¥–Ω–∏–π P&L –Ω–∞ —Å–¥–µ–ª–∫—É: {total_pnl/total_trades:.2f} USDT" if total_trades > 0 else "N/A")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            print("\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –¢–ï–°–¢–ê–ú–ò:")
            print("=" * 50)
            print("–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø (30% confidence, 1 –º–æ–¥–µ–ª—å):")
            print(f"   –°–¥–µ–ª–æ–∫: {total_trades} (–±—ã–ª–æ 5) - {'üü¢ –£–õ–£–ß–®–ï–ù–ò–ï' if total_trades > 5 else 'üî¥ –£–•–£–î–®–ï–ù–ò–ï'}")
            print(f"   Win Rate: {win_rate:.1f}% (–±—ã–ª–æ 20%) - {'üü¢ –£–õ–£–ß–®–ï–ù–ò–ï' if win_rate > 20 else 'üî¥ –£–•–£–î–®–ï–ù–ò–ï'}")
            
            print("\n–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏):")
            print(f"   Win Rate: {win_rate:.1f}% (–±—ã–ª–æ 41.2%) - {'üü¢ –£–õ–£–ß–®–ï–ù–ò–ï' if win_rate > 41.2 else 'üî¥ –£–•–£–î–®–ï–ù–ò–ï'}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞
            if total_trades > 0:
                max_loss = min(t.pnl for t in results.trades)
                max_profit = max(t.pnl for t in results.trades)
                print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ò–°–ö–ê:")
                print(f"   –ú–∞–∫—Å. —É–±—ã—Ç–æ–∫: {max_loss:.2f} USDT")
                print(f"   –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: {max_profit:.2f} USDT")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏
                running_pnl = 0
                max_drawdown = 0
                peak = 0
                for trade in results.trades:
                    running_pnl += trade.pnl
                    if running_pnl > peak:
                        peak = running_pnl
                    drawdown = (peak - running_pnl) / config.start_balance * 100
                    if drawdown > max_drawdown:
                        max_drawdown = drawdown
                
                print(f"   –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.1f}%")
                
                # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                avg_confidence = sum(t.confidence for t in results.trades) / len(results.trades)
                print(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence*100:.1f}%")
                
                # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
                consensus_strengths = [t.consensus_strength for t in results.trades if hasattr(t, 'consensus_strength')]
                if consensus_strengths:
                    avg_consensus = sum(consensus_strengths) / len(consensus_strengths)
                    print(f"   –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {avg_consensus:.1f} –º–æ–¥–µ–ª–µ–π")
            
            print("\nüéØ –í–´–í–û–î–´:")
            if win_rate > 50 and total_pnl > 0 and total_trades >= 10:
                print("‚úÖ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
                print("   –°–∏—Å—Ç–µ–º–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
            elif win_rate > 40 and total_trades >= 8:
                print("üü° –•–û–†–û–®–ò–ô –ü–†–û–ì–†–ï–°–°")
                print("   –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–∞–µ—Ç—Å—è, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            elif total_trades > 5:
                print("üü° –ß–ê–°–¢–ò–ß–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï")
                print("   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–±–æ—Ç—ã")
            else:
                print("üî¥ –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê")
                print("   –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞–ª—å–Ω–µ–π—à–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        else:
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    exit_code = await test_balanced_settings()
    return exit_code

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    exit_code = asyncio.run(main())
    sys.exit(exit_code)