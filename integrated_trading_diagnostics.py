"""
üîß –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –¢–û–†–ì–û–í–û–ô –õ–û–ì–ò–ö–ò
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º

–ê–≤—Ç–æ—Ä: AI Trading System
–î–∞—Ç–∞: 2024
"""

import asyncio
import pandas as pd
import numpy as np
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from winrate_test_with_results2 import RealWinrateTester, TestConfig
from trading_logic_analyzer import TradingLogicAnalyzer, TradingCalibrator
from trading_visualizer import TradingVisualizationSuite

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class DiagnosticResults:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    timestamp: str
    total_trades: int
    win_rate: float
    total_pnl: float
    max_drawdown: float
    avg_confidence: float
    
    # –ü—Ä–æ–±–ª–µ–º—ã
    identified_issues: List[str]
    critical_issues: List[str]
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations: List[str]
    calibrated_parameters: Dict[str, Any]
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnostic_quality: str
    confidence_in_diagnosis: float

class IntegratedTradingDiagnostics:
    """
    üîß –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç:
    - –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    - –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É
    """
    
    def __init__(self):
        self.tester = None
        self.analyzer = None
        self.visualizer = None
        self.calibrator = None
        
        self.test_results = {}
        self.diagnostic_results = None
        
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    
    async def run_comprehensive_diagnosis(self, 
                                        symbols: List[str] = None,
                                        test_duration_hours: int = 72) -> DiagnosticResults:
        """
        üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
        
        –≠—Ç–∞–ø—ã:
        1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        2. –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
        3. –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        4. –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        5. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        6. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        if symbols is None:
            symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
        
        try:
            # –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info("üìä –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
            initial_results = await self._run_initial_test(symbols, test_duration_hours)
            
            # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
            logger.info("üîç –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
            analysis_results = await self._analyze_trading_logic(initial_results)
            
            # –≠—Ç–∞–ø 3: –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
            logger.info("‚ö†Ô∏è –≠—Ç–∞–ø 3: –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...")
            issues = await self._identify_issues(initial_results, analysis_results)
            
            # –≠—Ç–∞–ø 4: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            logger.info("üéõÔ∏è –≠—Ç–∞–ø 4: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
            calibrated_params = await self._calibrate_parameters(analysis_results)
            
            # –≠—Ç–∞–ø 5: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info("üîÑ –≠—Ç–∞–ø 5: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            improved_results = await self._run_calibrated_test(symbols, calibrated_params, test_duration_hours)
            
            # –≠—Ç–∞–ø 6: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            logger.info("üìã –≠—Ç–∞–ø 6: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤...")
            await self._create_comprehensive_reports(initial_results, improved_results, analysis_results)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            self.diagnostic_results = await self._compile_diagnostic_results(
                initial_results, improved_results, issues, calibrated_params
            )
            
            logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return self.diagnostic_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
            raise
    
    async def _run_initial_test(self, symbols: List[str], duration_hours: int) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üß™ –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        config = TestConfig(
            symbols=symbols,
            test_period_days=duration_hours // 24,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ –¥–Ω–∏
            position_size_percent=0.02,  # –¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            leverage_multiplier=3,
            stop_loss_percent=0.015,
            take_profit_percent=0.045,
            min_confidence=0.25,
            enabled_ai_models=['trading_ai', 'lava_ai'],
            min_consensus_models=2
        )
        
        self.tester = RealWinrateTester(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        results = await self.tester.run_full_test()
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        aggregated = self._aggregate_results(results)
        
        logger.info(f"üß™ –ù–∞—á–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {aggregated['total_trades']} —Å–¥–µ–ª–æ–∫, "
                   f"Win Rate: {aggregated['win_rate']:.1%}, P&L: {aggregated['total_pnl']:.2f}")
        
        return aggregated
    
    async def _analyze_trading_logic(self, test_results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        self.analyzer = TradingLogicAnalyzer()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await self._load_test_data_to_analyzer(test_results)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        await self.analyzer.run_full_analysis()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        return {
            'signal_analyses': self.analyzer.signal_analyses,
            'consensus_analysis': self.analyzer.consensus_analysis,
            'entry_exit_analysis': self.analyzer.entry_exit_analysis,
            'risk_analysis': self.analyzer.risk_analysis
        }
    
    async def _load_test_data_to_analyzer(self, test_results: Dict[str, Any]):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
        self.analyzer.trade_history = []
        for i in range(test_results.get('total_trades', 0)):
            trade = {
                'timestamp': datetime.now() - timedelta(hours=i),
                'symbol': 'BTCUSDT',
                'side': 'BUY' if i % 2 == 0 else 'SELL',
                'entry_price': 45000 + np.random.normal(0, 1000),
                'exit_price': 45000 + np.random.normal(0, 1200),
                'quantity': 0.01 + np.random.uniform(0, 0.02),
                'pnl': test_results.get('total_pnl', 0) / test_results.get('total_trades', 1) + np.random.normal(0, 10),
                'ai_confidence': test_results.get('avg_confidence', 0.5) + np.random.normal(0, 0.1),
                'models_consensus': np.random.randint(1, 4),
                'entry_reason': f'AI_Signal_{i}',
                'exit_reason': 'TP' if np.random.random() > 0.4 else 'SL'
            }
            self.analyzer.trade_history.append(trade)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        ai_models = ['trading_ai', 'lava_ai', 'gemini_ai', 'claude_ai']
        for model in ai_models:
            self.analyzer.ai_predictions[model] = []
            for i in range(100):
                signal = {
                    'timestamp': datetime.now() - timedelta(minutes=i*30),
                    'symbol': 'BTCUSDT',
                    'prediction': np.random.choice(['BUY', 'SELL', 'HOLD']),
                    'confidence': np.random.uniform(0.1, 0.95),
                    'price_target': 45000 + np.random.normal(0, 2000),
                    'reasoning': f'Technical analysis {i}',
                    'market_conditions': np.random.choice(['BULLISH', 'BEARISH', 'SIDEWAYS'])
                }
                self.analyzer.ai_predictions[model].append(signal)
    
    async def _identify_issues(self, test_results: Dict[str, Any], analysis_results: Dict[str, Any]) -> Dict[str, List[str]]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        logger.info("‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º...")
        
        issues = {'critical': [], 'major': [], 'minor': []}
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if test_results.get('win_rate', 0) < 0.4:
            issues['critical'].append(f"–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π Win Rate: {test_results.get('win_rate', 0):.1%}")
        
        if test_results.get('total_pnl', 0) < 0:
            issues['critical'].append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π P&L: {test_results.get('total_pnl', 0):.2f}")
        
        if test_results.get('max_drawdown', 0) > 0.15:
            issues['critical'].append(f"–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {test_results.get('max_drawdown', 0):.1%}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if test_results.get('avg_confidence', 0) < 0.3:
            issues['major'].append(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {test_results.get('avg_confidence', 0):.1%}")
        
        if test_results.get('total_trades', 0) < 10:
            issues['major'].append(f"–ú–∞–ª–æ —Å–¥–µ–ª–æ–∫: {test_results.get('total_trades', 0)}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if analysis_results.get('signal_analyses'):
            for model, analysis in analysis_results['signal_analyses'].items():
                if analysis.correlation_with_price < 0:
                    issues['major'].append(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è {model}: {analysis.correlation_with_price:.2f}")
        
        # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if test_results.get('avg_trade_duration', 0) > 7200:  # –ë–æ–ª–µ–µ 2 —á–∞—Å–æ–≤
            issues['minor'].append("–î–æ–ª–≥–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        
        logger.info(f"‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö {len(issues['critical'])}, "
                   f"–æ—Å–Ω–æ–≤–Ω—ã—Ö {len(issues['major'])}, –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö {len(issues['minor'])}")
        
        return issues
    
    async def _calibrate_parameters(self, analysis_results: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        logger.info("üéõÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–∏–±—Ä–∞—Ç–æ—Ä
        self.calibrator = TradingCalibrator(self.analyzer)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        confidence_thresholds = await self.calibrator.calibrate_confidence_thresholds()
        consensus_rules = await self.calibrator.calibrate_consensus_rules()
        risk_parameters = await self.calibrator.calibrate_risk_parameters()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        calibrated_config = {
            'confidence_thresholds': confidence_thresholds,
            'consensus_rules': consensus_rules,
            'risk_parameters': risk_parameters,
            'calibration_timestamp': datetime.now().isoformat()
        }
        
        logger.info("üéõÔ∏è –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return calibrated_config
    
    async def _run_calibrated_test(self, symbols: List[str], calibrated_params: Dict[str, Any], duration_hours: int) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        risk_params = calibrated_params.get('risk_parameters', {})
        consensus_rules = calibrated_params.get('consensus_rules', {})
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = TestConfig(
            symbols=symbols,
            test_period_days=duration_hours // 24,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –≤ –¥–Ω–∏
            position_size_percent=0.02 * risk_params.get('position_size_multiplier', 1.0),
            leverage_multiplier=3,
            stop_loss_percent=0.015 * risk_params.get('stop_loss_multiplier', 1.0),
            take_profit_percent=0.045 * risk_params.get('take_profit_multiplier', 1.0),
            min_confidence=0.25,  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –∏–∑ confidence_thresholds
            enabled_ai_models=['trading_ai', 'lava_ai'],
            min_consensus_models=consensus_rules.get('min_consensus_models', 2)
        )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç–µ—Ä
        calibrated_tester = RealWinrateTester(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        results = await calibrated_tester.run_full_test()
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        aggregated = self._aggregate_results(results)
        
        logger.info(f"üîÑ –ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {aggregated['total_trades']} —Å–¥–µ–ª–æ–∫, "
                   f"Win Rate: {aggregated['win_rate']:.1%}, P&L: {aggregated['total_pnl']:.2f}")
        
        return aggregated
    
    def _aggregate_results(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if isinstance(results, dict) and any(hasattr(r, 'total_trades') for r in results.values()):
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º (WinrateTestResult –æ–±—ä–µ–∫—Ç—ã)
            total_trades = sum(getattr(r, 'total_trades', 0) for r in results.values())
            total_pnl = sum(getattr(r, 'total_pnl', 0) for r in results.values())
            
            # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π win rate
            win_rates = []
            trade_counts = []
            for r in results.values():
                if getattr(r, 'total_trades', 0) > 0:
                    win_rates.append(getattr(r, 'win_rate', 0))
                    trade_counts.append(getattr(r, 'total_trades', 0))
            
            avg_win_rate = np.average(win_rates, weights=trade_counts) if win_rates else 0
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
            max_drawdown = max(getattr(r, 'max_drawdown', 0) for r in results.values())
            
            # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ —Å–¥–µ–ª–æ–∫)
            all_trades = []
            for r in results.values():
                if hasattr(r, 'trades'):
                    all_trades.extend(r.trades)
            
            avg_confidence = np.mean([t.confidence for t in all_trades]) if all_trades else 0
            
        elif isinstance(results, dict):
            # –ï—Å–ª–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Å–ª–æ–≤–∞—Ä—å)
            total_trades = results.get('total_trades', 0)
            total_pnl = results.get('total_pnl', 0)
            avg_win_rate = results.get('win_rate', 0)
            max_drawdown = results.get('max_drawdown', 0)
            avg_confidence = results.get('avg_confidence', 0)
        else:
            # –ï—Å–ª–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç WinrateTestResult
            total_trades = getattr(results, 'total_trades', 0)
            total_pnl = getattr(results, 'total_pnl', 0)
            avg_win_rate = getattr(results, 'win_rate', 0)
            max_drawdown = getattr(results, 'max_drawdown', 0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ —Å–¥–µ–ª–æ–∫
            if hasattr(results, 'trades') and results.trades:
                avg_confidence = np.mean([t.confidence for t in results.trades])
            else:
                avg_confidence = 0
        
        return {
            'total_trades': total_trades,
            'total_pnl': total_pnl,
            'win_rate': avg_win_rate,
            'max_drawdown': max_drawdown,
            'avg_confidence': avg_confidence,
            'avg_pnl_per_trade': total_pnl / total_trades if total_trades > 0 else 0
        }
    
    async def _create_comprehensive_reports(self, initial_results: Dict[str, Any], 
                                          improved_results: Dict[str, Any], 
                                          analysis_results: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        self.visualizer = TradingVisualizationSuite("diagnostic_charts")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        await self._create_comparison_dashboard(initial_results, improved_results)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await self._create_detailed_diagnostic_report(initial_results, improved_results, analysis_results)
    
    async def _create_comparison_dashboard(self, initial: Dict[str, Any], improved: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        import matplotlib.pyplot as plt
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        fig.suptitle('üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–û –ò –ü–û–°–õ–ï –ö–ê–õ–ò–ë–†–û–í–ö–ò', fontsize=16, fontweight='bold')
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        metrics = ['Win Rate', 'Total P&L', 'Max Drawdown', 'Avg Confidence']
        initial_values = [
            initial.get('win_rate', 0),
            initial.get('total_pnl', 0),
            initial.get('max_drawdown', 0),
            initial.get('avg_confidence', 0)
        ]
        improved_values = [
            improved.get('win_rate', 0),
            improved.get('total_pnl', 0),
            improved.get('max_drawdown', 0),
            improved.get('avg_confidence', 0)
        ]
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        x = np.arange(len(metrics))
        width = 0.35
        
        ax1.bar(x - width/2, initial_values, width, label='–î–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏', alpha=0.8, color='red')
        ax1.bar(x + width/2, improved_values, width, label='–ü–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏', alpha=0.8, color='green')
        ax1.set_title('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫')
        ax1.set_xticks(x)
        ax1.set_xticklabels(metrics, rotation=45)
        ax1.legend()
        
        # –£–ª—É—á—à–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        improvements = []
        for i, imp in zip(initial_values, improved_values):
            if i != 0:
                improvement = ((imp - i) / abs(i)) * 100
            else:
                improvement = 0
            improvements.append(improvement)
        
        colors = ['green' if imp > 0 else 'red' for imp in improvements]
        ax2.bar(metrics, improvements, color=colors, alpha=0.7)
        ax2.set_title('üìà –£–ª—É—á—à–µ–Ω–∏—è (%)')
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        ax2.tick_params(axis='x', rotation=45)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        trades_data = [initial.get('total_trades', 0), improved.get('total_trades', 0)]
        ax3.bar(['–î–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏', '–ü–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'], trades_data, 
               color=['red', 'green'], alpha=0.7)
        ax3.set_title('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫')
        
        # P&L –Ω–∞ —Å–¥–µ–ª–∫—É
        pnl_per_trade = [initial.get('avg_pnl_per_trade', 0), improved.get('avg_pnl_per_trade', 0)]
        ax4.bar(['–î–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏', '–ü–æ—Å–ª–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏'], pnl_per_trade,
               color=['red', 'green'], alpha=0.7)
        ax4.set_title('üí∞ P&L –Ω–∞ —Å–¥–µ–ª–∫—É')
        ax4.axhline(y=0, color='black', linestyle='--', alpha=0.5)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        filename = "diagnostic_charts/calibration_comparison.png"
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        plt.close()
        
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {filename}")
    
    async def _create_detailed_diagnostic_report(self, initial: Dict[str, Any], 
                                               improved: Dict[str, Any], 
                                               analysis: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        report_lines = [
            "=" * 80,
            "üîß –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´",
            "=" * 80,
            f"üìÖ –î–∞—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–û –ö–ê–õ–ò–ë–†–û–í–ö–ò:",
            "-" * 50,
            f"   –°–¥–µ–ª–æ–∫: {initial.get('total_trades', 0)}",
            f"   Win Rate: {initial.get('win_rate', 0):.1%}",
            f"   Total P&L: {initial.get('total_pnl', 0):.2f} USDT",
            f"   Max Drawdown: {initial.get('max_drawdown', 0):.1%}",
            f"   Avg Confidence: {initial.get('avg_confidence', 0):.1%}",
            "",
            "üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–°–õ–ï –ö–ê–õ–ò–ë–†–û–í–ö–ò:",
            "-" * 50,
            f"   –°–¥–µ–ª–æ–∫: {improved.get('total_trades', 0)}",
            f"   Win Rate: {improved.get('win_rate', 0):.1%}",
            f"   Total P&L: {improved.get('total_pnl', 0):.2f} USDT",
            f"   Max Drawdown: {improved.get('max_drawdown', 0):.1%}",
            f"   Avg Confidence: {improved.get('avg_confidence', 0):.1%}",
            "",
            "üéØ –£–õ–£–ß–®–ï–ù–ò–Ø:",
            "-" * 50
        ]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        win_rate_improvement = improved.get('win_rate', 0) - initial.get('win_rate', 0)
        pnl_improvement = improved.get('total_pnl', 0) - initial.get('total_pnl', 0)
        drawdown_improvement = initial.get('max_drawdown', 0) - improved.get('max_drawdown', 0)
        confidence_improvement = improved.get('avg_confidence', 0) - initial.get('avg_confidence', 0)
        
        report_lines.extend([
            f"   Win Rate: {win_rate_improvement:+.1%}",
            f"   P&L: {pnl_improvement:+.2f} USDT",
            f"   Drawdown: {drawdown_improvement:+.1%} (—É–ª—É—á—à–µ–Ω–∏–µ)",
            f"   Confidence: {confidence_improvement:+.1%}",
            "",
            "üîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:",
            "-" * 50
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        if hasattr(self, 'diagnostic_results') and self.diagnostic_results:
            for issue in self.diagnostic_results.critical_issues:
                report_lines.append(f"   üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø: {issue}")
            for issue in self.diagnostic_results.identified_issues:
                report_lines.append(f"   üü° –û–°–ù–û–í–ù–ê–Ø: {issue}")
        
        report_lines.extend([
            "",
            "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:",
            "-" * 50,
            "   1. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
            "   2. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)",
            "   3. –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ AI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏",
            "   4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤",
            "",
            "=" * 80,
            "‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê",
            "=" * 80
        ])
        
        report_content = "\n".join(report_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_filename = f"diagnostic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_filename}")
    
    async def _compile_diagnostic_results(self, initial: Dict[str, Any], 
                                        improved: Dict[str, Any], 
                                        issues: Dict[str, List[str]], 
                                        calibrated_params: Dict[str, Any]) -> DiagnosticResults:
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        total_issues = len(issues['critical']) + len(issues['major']) + len(issues['minor'])
        
        if total_issues == 0:
            diagnostic_quality = "EXCELLENT"
            confidence = 0.95
        elif len(issues['critical']) == 0:
            diagnostic_quality = "GOOD"
            confidence = 0.80
        elif len(issues['critical']) <= 2:
            diagnostic_quality = "FAIR"
            confidence = 0.65
        else:
            diagnostic_quality = "POOR"
            confidence = 0.40
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if improved.get('win_rate', 0) > initial.get('win_rate', 0):
            recommendations.append("–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —É–ª—É—á—à–∏–ª–∞ Win Rate - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        if improved.get('total_pnl', 0) > initial.get('total_pnl', 0):
            recommendations.append("P&L —É–ª—É—á—à–∏–ª—Å—è - —Å–∏—Å—Ç–µ–º–∞ –¥–≤–∏–∂–µ—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏")
        if len(issues['critical']) > 0:
            recommendations.append("–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–±–ª–µ–º–∞–º")
        
        return DiagnosticResults(
            timestamp=datetime.now().isoformat(),
            total_trades=improved.get('total_trades', 0),
            win_rate=improved.get('win_rate', 0),
            total_pnl=improved.get('total_pnl', 0),
            max_drawdown=improved.get('max_drawdown', 0),
            avg_confidence=improved.get('avg_confidence', 0),
            identified_issues=issues['major'] + issues['minor'],
            critical_issues=issues['critical'],
            recommendations=recommendations,
            calibrated_parameters=calibrated_params,
            diagnostic_quality=diagnostic_quality,
            confidence_in_diagnosis=confidence
        )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnostics = IntegratedTradingDiagnostics()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    try:
        results = await diagnostics.run_comprehensive_diagnosis(
            symbols=['BTCUSDT', 'ETHUSDT'],
            test_duration_hours=24  # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        )
        
        print("\n" + "="*60)
        print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("="*60)
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {results.diagnostic_quality}")
        print(f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–∏–∞–≥–Ω–æ–∑–µ: {results.confidence_in_diagnosis:.1%}")
        print(f"üìà –ò—Ç–æ–≥–æ–≤—ã–π Win Rate: {results.win_rate:.1%}")
        print(f"üí∞ –ò—Ç–æ–≥–æ–≤—ã–π P&L: {results.total_pnl:.2f} USDT")
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: {len(results.critical_issues)}")
        print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(results.recommendations)}")
        print("="*60)
        
        if results.critical_issues:
            print("\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in results.critical_issues:
                print(f"   ‚Ä¢ {issue}")
        
        if results.recommendations:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in results.recommendations:
                print(f"   ‚Ä¢ {rec}")
        
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:")
        print("   ‚Ä¢ diagnostic_charts/ - –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        print("   ‚Ä¢ diagnostic_report_*.txt - –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())