#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤–∏–Ω—Ä–µ–π—Ç–∞ –¥–ª—è AI —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ AI –º–æ–¥–µ–ª–∏ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import logging
from dataclasses import dataclass
import json
import os
import subprocess
import time
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã AI –º–æ–¥—É–ª–µ–π
from ai_modules.multi_ai_orchestrator import MultiAIOrchestrator
from ai_modules.ai_manager import ai_manager, AIModuleType
from ai_modules.trading_ai import TradingAI
from ai_modules.lava_ai import LavaAI
from ai_modules.lgbm_ai import LGBMAI
from ai_modules.mistral_ai import MistralAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine
from historical_data_manager import HistoricalDataManager
from data_collector import BinanceDataCollector

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º
from utils.timezone_utils import get_utc_now

# –ò–º–ø–æ—Ä—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
from detailed_trade_visualizer import DetailedTradeVisualizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ===== –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –£–í–ï–†–ï–ù–ù–û–°–¢–ï–ô –ò –í–ï–°–û–í =====

@dataclass
class AdvancedConfidenceConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π"""
    # –í–µ—Å–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    TF1_PRIORITY: float = 0.3  # –í—ã—Å—à–∏–π TF - —Ç—Ä–µ–Ω–¥–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    TF2_PRIORITY: float = 0.5  # –û—Å–Ω–æ–≤–Ω–æ–π TF - –∫–ª—é—á–µ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è  
    TF3_PRIORITY: float = 0.2  # –ù–∏–∑—à–∏–π TF - —É—Ç–æ—á–Ω–µ–Ω–∏–µ –≤—Ö–æ–¥–∞
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–´ –î–õ–Ø 70-80% –í–ò–ù–†–ï–ô–¢–ê
    CONFIDENCE_THRESHOLD: float = 0.25  # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–µ–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–±—ã–ª–æ 0.35)
    SHORT_SIGNAL_MULTIPLIER: float = 1.2  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ SHORT —Å–∏–≥–Ω–∞–ª–∞–º
    
    # Bias-–≤–µ–∫—Ç–æ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫–ª–∞—Å—Å–æ–≤ [HOLD, LONG, SHORT]
    BIAS_VECTOR: List[float] = None
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–æ–≤
    ADX_LOW_THRESHOLD: float = 25.0
    ADX_HIGH_THRESHOLD: float = 35.0
    ATR_LOW_THRESHOLD: float = 0.15
    
    def __post_init__(self):
        if self.BIAS_VECTOR is None:
            # –£—Å–∏–ª–µ–Ω–∏–µ directional —Å–∏–≥–Ω–∞–ª–æ–≤, –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ HOLD
            self.BIAS_VECTOR = [0.85, 1.12, 1.12]  # [HOLD, LONG, SHORT]

@dataclass 
class ModelVote:
    """–ì–æ–ª–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
    model_name: str
    direction: int  # -1 (SHORT), 0 (HOLD), 1 (LONG)
    confidence: float
    weight: float
    reasoning: str = ""

@dataclass
class AdvancedSignalResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–≥–Ω–∞–ª–∞"""
    final_signal: int  # -1, 0, 1
    combined_confidence: float
    effective_threshold: float
    votes: List[ModelVote]
    filter_results: Dict[str, Any]
    risk_reward_ratio: float
    market_conditions: Dict[str, float]

class AdvancedConfidenceCalculator:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π —Å –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π"""
    
    def __init__(self, config: AdvancedConfidenceConfig):
        self.config = config
        
    def calculate_model_confidence(self, model_name: str, prediction_result: Any, 
                                 market_data: pd.DataFrame) -> float:
        """
        –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ predict_proba()
        """
        try:
            confidence = 0.0
            
            if hasattr(prediction_result, 'confidence'):
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                confidence = float(prediction_result.confidence)
            elif hasattr(prediction_result, 'predict_proba'):
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ predict_proba
                proba = prediction_result.predict_proba()
                if isinstance(proba, np.ndarray) and len(proba) > 0:
                    confidence = np.max(proba)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
            elif isinstance(prediction_result, dict):
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ª–æ–≤–∞—Ä—å —Å confidence
                confidence = prediction_result.get('confidence', 0.0)
            elif isinstance(prediction_result, (int, float)):
                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —á–∏—Å–ª–æ (–±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
                confidence = abs(float(prediction_result)) if abs(float(prediction_result)) <= 1.0 else 0.5
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ bias-–≤–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            if model_name == 'trading_ai' and self.config.BIAS_VECTOR:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å —Å–∏–≥–Ω–∞–ª–∞
                signal_class = self._get_signal_class(prediction_result)
                if 0 <= signal_class < len(self.config.BIAS_VECTOR):
                    confidence *= self.config.BIAS_VECTOR[signal_class]
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            confidence = self._apply_market_corrections(confidence, market_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [0.0, 1.0]
            confidence = max(0.0, min(1.0, confidence))
            
            logger.debug(f"üîç {model_name} confidence: {confidence:.3f}")
            return confidence
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è {model_name}: {e}")
            return 0.5  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _get_signal_class(self, prediction_result: Any) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è bias-–≤–µ–∫—Ç–æ—Ä–∞"""
        try:
            if hasattr(prediction_result, 'action'):
                action = prediction_result.action.upper()
                if action == 'BUY' or action == 'LONG':
                    return 1  # LONG –∫–ª–∞—Å—Å
                elif action == 'SELL' or action == 'SHORT':
                    return 2  # SHORT –∫–ª–∞—Å—Å
                else:
                    return 0  # HOLD –∫–ª–∞—Å—Å
            elif isinstance(prediction_result, dict):
                signal = prediction_result.get('signal', 'HOLD').upper()
                if signal in ['BUY', 'LONG', 'UP']:
                    return 1
                elif signal in ['SELL', 'SHORT', 'DOWN']:
                    return 2
                else:
                    return 0
            else:
                return 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é HOLD
        except:
            return 0
    
    def _apply_market_corrections(self, confidence: float, market_data: pd.DataFrame) -> float:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            if market_data.empty:
                return confidence
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
            latest = market_data.iloc[-1]
            
            # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π ATR)
            if len(market_data) >= 14:
                high_low = market_data['high'] - market_data['low']
                high_close = abs(market_data['high'] - market_data['close'].shift(1))
                low_close = abs(market_data['low'] - market_data['close'].shift(1))
                true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
                atr = true_range.rolling(14).mean().iloc[-1]
                atr_ratio = atr / latest['close'] if latest['close'] > 0 else 0
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                if atr_ratio < 0.01:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    confidence *= 0.95  # –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 5%
                elif atr_ratio > 0.05:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    confidence *= 1.05  # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 5%
            
            return confidence
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Ä—ã–Ω–∫—É: {e}")
            return confidence
    
    def calculate_combined_confidence(self, votes: List[ModelVote]) -> float:
        """
        –†–∞—Å—á–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        if not votes:
            return 0.0
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        direction_weights = {-1: 0.0, 0: 0.0, 1: 0.0}
        direction_confidences = {-1: [], 0: [], 1: []}
        
        for vote in votes:
            direction = vote.direction
            weighted_confidence = vote.confidence * vote.weight
            direction_weights[direction] += weighted_confidence
            direction_confidences[direction].append(vote.confidence)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏–≤—à–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        winning_direction = max(direction_weights.keys(), key=lambda k: direction_weights[k])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if direction_confidences[winning_direction]:
            # –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ –ø–æ–±–µ–¥–∏–≤—à–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            confidences = direction_confidences[winning_direction]
            weights = [vote.weight for vote in votes if vote.direction == winning_direction]
            
            if weights:
                combined_confidence = sum(c * w for c, w in zip(confidences, weights)) / sum(weights)
            else:
                combined_confidence = sum(confidences) / len(confidences)
        else:
            combined_confidence = 0.0
        
        logger.debug(f"üéØ Combined confidence: {combined_confidence:.3f} for direction {winning_direction}")
        return combined_confidence
    
    def get_effective_threshold(self, final_signal: int, market_conditions: Dict[str, float]) -> float:
        """
        –†–∞—Å—á–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        """
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥
        base_multiplier = self.config.SHORT_SIGNAL_MULTIPLIER if final_signal == -1 else 1.0
        base_threshold = self.config.CONFIDENCE_THRESHOLD * base_multiplier
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∏–ª–µ —Ç—Ä–µ–Ω–¥–∞ (ADX)
        adx_value = market_conditions.get('adx', 25.0)
        if adx_value < self.config.ADX_LOW_THRESHOLD:
            base_threshold += 0.05  # –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ - –≤—ã—à–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        elif adx_value >= self.config.ADX_HIGH_THRESHOLD:
            base_threshold = max(0.45, base_threshold - 0.06)  # –°–∏–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ - –Ω–∏–∂–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        atr_ratio = market_conditions.get('atr_ratio', 0.02)
        if atr_ratio < self.config.ATR_LOW_THRESHOLD:
            base_threshold += 0.03  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - –≤—ã—à–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—ä–µ–º—É
        volume_ratio = market_conditions.get('volume_ratio', 1.0)
        if volume_ratio < 0.8:
            base_threshold += 0.02  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º - –≤—ã—à–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        elif volume_ratio > 1.5:
            base_threshold = max(0.50, base_threshold - 0.03)  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º - –Ω–∏–∂–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        
        effective_threshold = max(0.40, min(0.90, base_threshold))
        
        logger.debug(f"üìä Effective threshold: {effective_threshold:.3f} (signal: {final_signal}, ADX: {adx_value:.1f})")
        return effective_threshold

class AdvancedSignalFilter:
    """–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, config: AdvancedConfidenceConfig):
        self.config = config
    
    def apply_filters(self, signal: int, confidence: float, market_data: pd.DataFrame, 
                     votes: List[ModelVote]) -> Dict[str, Any]:
        """
        –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ —Å–∏–≥–Ω–∞–ª—É
        """
        filter_results = {
            'timeframe_consistency': True,
            'technical_conditions': True,
            'risk_reward': True,
            'candle_patterns': True,
            'volume_confirmation': True,
            'final_passed': True,
            'reasons': []
        }
        
        try:
            # 1. –§–∏–ª—å—Ç—Ä —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            if not self._check_timeframe_consistency(votes):
                filter_results['timeframe_consistency'] = False
                filter_results['reasons'].append("–ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏")
            
            # 2. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            tech_check = self._check_technical_conditions(market_data)
            if not tech_check['passed']:
                filter_results['technical_conditions'] = False
                filter_results['reasons'].extend(tech_check['reasons'])
            
            # 3. Risk/Reward –∞–Ω–∞–ª–∏–∑
            rr_check = self._check_risk_reward(signal, market_data)
            if not rr_check['passed']:
                filter_results['risk_reward'] = False
                filter_results['reasons'].append(f"–ù–∏–∑–∫–∏–π R/R: {rr_check['ratio']:.2f}")
            
            # 4. –°–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if not self._check_candle_patterns(signal, market_data):
                filter_results['candle_patterns'] = False
                filter_results['reasons'].append("–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
            
            # 5. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º
            if not self._check_volume_confirmation(signal, market_data):
                filter_results['volume_confirmation'] = False
                filter_results['reasons'].append("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–º–æ–º")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            filter_results['final_passed'] = all([
                filter_results['timeframe_consistency'],
                filter_results['technical_conditions'],
                filter_results['risk_reward'],
                filter_results['candle_patterns'],
                filter_results['volume_confirmation']
            ])
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            filter_results['final_passed'] = False
            filter_results['reasons'].append(f"–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        
        return filter_results
    
    def _check_timeframe_consistency(self, votes: List[ModelVote]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º–∏"""
        if len(votes) < 2:
            return True
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        directions = [vote.direction for vote in votes]
        unique_directions = set(directions)
        
        # –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã - –æ—Ç–ª–∏—á–Ω–æ
        if len(unique_directions) == 1:
            return True
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–∞
        direction_weights = {}
        for vote in votes:
            direction_weights[vote.direction] = direction_weights.get(vote.direction, 0) + vote.weight
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Å–∞–º
        sorted_directions = sorted(direction_weights.items(), key=lambda x: x[1], reverse=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —è–≤–Ω—ã–π –ª–∏–¥–µ—Ä (>60% –≤–µ—Å–∞)
        total_weight = sum(direction_weights.values())
        leader_weight_ratio = sorted_directions[0][1] / total_weight if total_weight > 0 else 0
        
        return leader_weight_ratio >= 0.60
    
    def _check_technical_conditions(self, market_data: pd.DataFrame) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π"""
        result = {'passed': True, 'reasons': []}
        
        try:
            if len(market_data) < 20:
                result['passed'] = False
                result['reasons'].append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return result
            
            latest = market_data.iloc[-1]
            
            # –†–∞—Å—á–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ ADX
            adx_value = self._calculate_simple_adx(market_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
            if adx_value < 20:
                result['passed'] = False
                result['reasons'].append(f"–°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥ (ADX: {adx_value:.1f})")
            
            # –†–∞—Å—á–µ—Ç ATR
            atr_ratio = self._calculate_atr_ratio(market_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if atr_ratio < 0.005:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                result['passed'] = False
                result['reasons'].append(f"–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR: {atr_ratio:.3f})")
            elif atr_ratio > 0.10:  # –ß—Ä–µ–∑–º–µ—Ä–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                result['passed'] = False
                result['reasons'].append(f"–ß—Ä–µ–∑–º–µ—Ä–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (ATR: {atr_ratio:.3f})")
            
        except Exception as e:
            result['passed'] = False
            result['reasons'].append(f"–û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        return result
    
    def _check_risk_reward(self, signal: int, market_data: pd.DataFrame) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å"""
        result = {'passed': True, 'ratio': 0.0}
        
        try:
            if signal == 0 or len(market_data) < 10:  # HOLD –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                result['ratio'] = 1.0
                return result
            
            latest = market_data.iloc[-1]
            current_price = latest['close']
            
            # –†–∞—Å—á–µ—Ç ATR –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
            atr = self._calculate_atr(market_data)
            
            if signal == 1:  # LONG
                # –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ 1.5 ATR –Ω–∏–∂–µ
                stop_loss = current_price - (atr * 1.5)
                # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ 2.5 ATR –≤—ã—à–µ
                take_profit = current_price + (atr * 2.5)
                
                risk = current_price - stop_loss
                reward = take_profit - current_price
                
            else:  # SHORT
                # –°—Ç–æ–ø-–ª–æ—Å—Å –Ω–∞ 1.5 ATR –≤—ã—à–µ
                stop_loss = current_price + (atr * 1.5)
                # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ 2.5 ATR –Ω–∏–∂–µ
                take_profit = current_price - (atr * 2.5)
                
                risk = stop_loss - current_price
                reward = current_price - take_profit
            
            # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
            if risk > 0:
                ratio = reward / risk
                result['ratio'] = ratio
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ R/R = 1.5
                if ratio < 1.5:
                    result['passed'] = False
            else:
                result['passed'] = False
                result['ratio'] = 0.0
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ R/R: {e}")
            result['passed'] = False
            result['ratio'] = 0.0
        
        return result
    
    def _check_candle_patterns(self, signal: int, market_data: pd.DataFrame) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            if len(market_data) < 3:
                return True  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–≤–µ—á–∏
            candles = market_data.tail(3)
            latest = candles.iloc[-1]
            prev = candles.iloc[-2]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
            is_bullish = latest['close'] > latest['open']
            is_bearish = latest['close'] < latest['open']
            
            # –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ —Å–≤–µ—á–∏
            body_size = abs(latest['close'] - latest['open'])
            candle_range = latest['high'] - latest['low']
            body_ratio = body_size / candle_range if candle_range > 0 else 0
            
            if signal == 1:  # LONG —Å–∏–≥–Ω–∞–ª
                # –î–ª—è LONG –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –±—ã—á—å–∏ —Å–≤–µ—á–∏ —Å —Ö–æ—Ä–æ—à–∏–º —Ç–µ–ª–æ–º
                if is_bearish and body_ratio > 0.7:  # –°–∏–ª—å–Ω–∞—è –º–µ–¥–≤–µ–∂—å—è —Å–≤–µ—á–∞
                    return False
                    
            elif signal == -1:  # SHORT —Å–∏–≥–Ω–∞–ª
                # –î–ª—è SHORT –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –º–µ–¥–≤–µ–∂—å–∏ —Å–≤–µ—á–∏ —Å —Ö–æ—Ä–æ—à–∏–º —Ç–µ–ª–æ–º
                if is_bullish and body_ratio > 0.7:  # –°–∏–ª—å–Ω–∞—è –±—ã—á—å—è —Å–≤–µ—á–∞
                    return False
            
            return True
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–µ–π: {e}")
            return True  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
    
    def _check_volume_confirmation(self, signal: int, market_data: pd.DataFrame) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–º–æ–º"""
        try:
            if 'volume' not in market_data.columns or len(market_data) < 10:
                return True  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—ä–µ–º—É - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            
            # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–µ—Ä–∏–æ–¥–æ–≤
            avg_volume = market_data['volume'].tail(10).mean()
            current_volume = market_data['volume'].iloc[-1]
            
            # –¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 80% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
            volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
            
            return volume_ratio >= 0.8
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞: {e}")
            return True
    
    def _calculate_simple_adx(self, market_data: pd.DataFrame, period: int = 14) -> float:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç ADX"""
        try:
            if len(market_data) < period + 1:
                return 25.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –†–∞—Å—á–µ—Ç True Range
            high_low = market_data['high'] - market_data['low']
            high_close = abs(market_data['high'] - market_data['close'].shift(1))
            low_close = abs(market_data['low'] - market_data['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π ADX –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ ATR –∫ —Ü–µ–Ω–µ
            atr = true_range.rolling(period).mean()
            price_atr_ratio = (atr / market_data['close']) * 100
            
            return min(50.0, max(10.0, price_atr_ratio.iloc[-1]))
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ADX: {e}")
            return 25.0
    
    def _calculate_atr_ratio(self, market_data: pd.DataFrame, period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç ATR –∫–∞–∫ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ü–µ–Ω–µ"""
        try:
            atr = self._calculate_atr(market_data, period)
            current_price = market_data['close'].iloc[-1]
            return atr / current_price if current_price > 0 else 0.02
        except:
            return 0.02
    
    def _calculate_atr(self, market_data: pd.DataFrame, period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç Average True Range"""
        try:
            if len(market_data) < period + 1:
                return market_data['close'].iloc[-1] * 0.02  # 2% –æ—Ç —Ü–µ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            high_low = market_data['high'] - market_data['low']
            high_close = abs(market_data['high'] - market_data['close'].shift(1))
            low_close = abs(market_data['low'] - market_data['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            atr = true_range.rolling(period).mean().iloc[-1]
            
            return atr if not pd.isna(atr) else market_data['close'].iloc[-1] * 0.02
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {e}")
            return market_data['close'].iloc[-1] * 0.02

class MarketConditionsAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    
    def __init__(self):
        pass
    
    def analyze_market_conditions(self, market_data: pd.DataFrame) -> Dict[str, float]:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        """
        conditions = {
            'adx': 25.0,
            'atr_ratio': 0.02,
            'volume_ratio': 1.0,
            'trend_strength': 0.5,
            'volatility_level': 0.5
        }
        
        try:
            if len(market_data) < 20:
                return conditions
            
            # ADX (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            conditions['adx'] = self._calculate_adx(market_data)
            
            # ATR ratio
            conditions['atr_ratio'] = self._calculate_atr_ratio(market_data)
            
            # Volume ratio
            if 'volume' in market_data.columns:
                avg_volume = market_data['volume'].tail(20).mean()
                current_volume = market_data['volume'].iloc[-1]
                conditions['volume_ratio'] = current_volume / avg_volume if avg_volume > 0 else 1.0
            
            # Trend strength (–Ω–∞ –æ—Å–Ω–æ–≤–µ EMA)
            conditions['trend_strength'] = self._calculate_trend_strength(market_data)
            
            # Volatility level
            conditions['volatility_level'] = min(1.0, conditions['atr_ratio'] / 0.05)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: {e}")
        
        return conditions
    
    def _calculate_adx(self, market_data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç ADX"""
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ADX
            high_low = market_data['high'] - market_data['low']
            high_close = abs(market_data['high'] - market_data['close'].shift(1))
            low_close = abs(market_data['low'] - market_data['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            atr = true_range.rolling(14).mean()
            
            # ADX –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ü–µ–Ω—ã
            adx_value = (atr / market_data['close'] * 100).iloc[-1]
            return min(50.0, max(10.0, adx_value))
            
        except:
            return 25.0
    
    def _calculate_atr_ratio(self, market_data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç ATR ratio"""
        try:
            high_low = market_data['high'] - market_data['low']
            high_close = abs(market_data['high'] - market_data['close'].shift(1))
            low_close = abs(market_data['low'] - market_data['close'].shift(1))
            
            true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
            atr = true_range.rolling(14).mean().iloc[-1]
            current_price = market_data['close'].iloc[-1]
            
            return atr / current_price if current_price > 0 else 0.02
            
        except:
            return 0.02
    
    def _calculate_trend_strength(self, market_data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        try:
            # EMA 20 –∏ 50
            ema_20 = market_data['close'].ewm(span=20).mean()
            ema_50 = market_data['close'].ewm(span=50).mean()
            
            current_price = market_data['close'].iloc[-1]
            ema_20_current = ema_20.iloc[-1]
            ema_50_current = ema_50.iloc[-1]
            
            # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ EMA
            if current_price > ema_20_current > ema_50_current:
                return 0.8  # –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            elif current_price < ema_20_current < ema_50_current:
                return 0.8  # –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            elif abs(current_price - ema_20_current) / current_price < 0.01:
                return 0.3  # –ë–æ–∫–æ–≤–∏–∫
            else:
                return 0.5  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
                
        except:
             return 0.5

class AdvancedSignalProcessor:
    """
    –ì–ª–∞–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ AI –º–æ–¥–µ–ª–µ–π
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, –≤–µ—Å–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    """
    
    def __init__(self):
        self.config = AdvancedConfidenceConfig()
        self.confidence_calculator = AdvancedConfidenceCalculator(self.config)
        self.signal_filter = AdvancedSignalFilter(self.config)
        self.market_analyzer = MarketConditionsAnalyzer()
        
        logger.info("üöÄ AdvancedSignalProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: TF1={self.config.TF1_PRIORITY}, TF2={self.config.TF2_PRIORITY}, TF3={self.config.TF3_PRIORITY}")
        logger.info(f"üéØ –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {self.config.CONFIDENCE_THRESHOLD}")
    
    def process_ai_signals(self, ai_results: Dict[str, Any], market_data: pd.DataFrame, 
                          symbol: str = "") -> AdvancedSignalResult:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç AI –º–æ–¥–µ–ª–µ–π
        
        Args:
            ai_results: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç AI –º–æ–¥–µ–ª–µ–π
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
            
        Returns:
            AdvancedSignalResult —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–∏–≥–Ω–∞–ª–æ–º –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        try:
            logger.debug(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
            
            # 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
            market_conditions = self.market_analyzer.analyze_market_conditions(market_data)
            logger.debug(f"üìà –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: ADX={market_conditions['adx']:.1f}, ATR={market_conditions['atr_ratio']:.3f}")
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –æ—Ç –º–æ–¥–µ–ª–µ–π
            votes = self._create_model_votes(ai_results, market_data)
            logger.debug(f"üó≥Ô∏è –°–æ–∑–¥–∞–Ω–æ {len(votes)} –≥–æ–ª–æ—Å–æ–≤ –æ—Ç AI –º–æ–¥–µ–ª–µ–π")
            
            # 3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            final_signal = self._determine_final_signal(votes)
            logger.debug(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {final_signal}")
            
            # 4. –†–∞—Å—á–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            combined_confidence = self.confidence_calculator.calculate_combined_confidence(votes)
            logger.debug(f"üéØ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {combined_confidence:.3f}")
            
            # 5. –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            effective_threshold = self.confidence_calculator.get_effective_threshold(
                final_signal, market_conditions
            )
            logger.debug(f"üìè –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: {effective_threshold:.3f}")
            
            # 6. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filter_results = self.signal_filter.apply_filters(
                final_signal, combined_confidence, market_data, votes
            )
            
            # 7. –†–∞—Å—á–µ—Ç Risk/Reward
            risk_reward_ratio = self._calculate_risk_reward_ratio(final_signal, market_data)
            
            # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤ –ø–æ—Ä–æ–≥–∞
            confidence_passed = combined_confidence >= effective_threshold
            filters_passed = filter_results['final_passed']
            
            # –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ - —Å–∏–≥–Ω–∞–ª HOLD
            if not confidence_passed or not filters_passed:
                logger.debug(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: confidence={confidence_passed}, filters={filters_passed}")
                final_signal = 0  # HOLD
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = AdvancedSignalResult(
                final_signal=final_signal,
                combined_confidence=combined_confidence,
                effective_threshold=effective_threshold,
                votes=votes,
                filter_results=filter_results,
                risk_reward_ratio=risk_reward_ratio,
                market_conditions=market_conditions
            )
            
            logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: signal={final_signal}, confidence={combined_confidence:.3f}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return AdvancedSignalResult(
                final_signal=0,
                combined_confidence=0.0,
                effective_threshold=self.config.CONFIDENCE_THRESHOLD,
                votes=[],
                filter_results={'final_passed': False, 'reasons': [f"–û—à–∏–±–∫–∞: {str(e)}"]},
                risk_reward_ratio=0.0,
                market_conditions={}
            )
    
    def _create_model_votes(self, ai_results: Dict[str, Any], market_data: pd.DataFrame) -> List[ModelVote]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –æ—Ç AI –º–æ–¥–µ–ª–µ–π"""
        votes = []
        
        # –ú–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –∫ –≤–µ—Å–∞–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        model_weights = {
            'trading_ai': self.config.TF2_PRIORITY,      # –û—Å–Ω–æ–≤–Ω–æ–π TF
            'lava_ai': self.config.TF1_PRIORITY,        # –í—ã—Å—à–∏–π TF  
            'lgbm_ai': self.config.TF3_PRIORITY,        # –ù–∏–∑—à–∏–π TF
            'mistral_ai': self.config.TF2_PRIORITY,     # –û—Å–Ω–æ–≤–Ω–æ–π TF
            'reinforcement_learning_engine': self.config.TF1_PRIORITY  # –í—ã—Å—à–∏–π TF
        }
        
        for model_name, result in ai_results.items():
            try:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞
                direction = self._extract_signal_direction(result)
                
                # –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
                confidence = self.confidence_calculator.calculate_model_confidence(
                    model_name, result, market_data
                )
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Å–∞ –º–æ–¥–µ–ª–∏
                weight = model_weights.get(model_name, 0.2)  # –í–µ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞
                vote = ModelVote(
                    model_name=model_name,
                    direction=direction,
                    confidence=confidence,
                    weight=weight,
                    reasoning=f"Model: {model_name}, Signal: {direction}, Conf: {confidence:.3f}"
                )
                
                votes.append(vote)
                logger.debug(f"üó≥Ô∏è {model_name}: direction={direction}, confidence={confidence:.3f}, weight={weight}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –¥–ª—è {model_name}: {e}")
                continue
        
        return votes
    
    def _extract_signal_direction(self, result: Any) -> int:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ–ª–∏"""
        try:
            if hasattr(result, 'action'):
                action = str(result.action).upper()
                if action in ['BUY', 'LONG', 'UP']:
                    return 1
                elif action in ['SELL', 'SHORT', 'DOWN']:
                    return -1
                else:
                    return 0
            elif isinstance(result, dict):
                signal = str(result.get('signal', 'HOLD')).upper()
                action = str(result.get('action', 'HOLD')).upper()
                
                if signal in ['BUY', 'LONG', 'UP'] or action in ['BUY', 'LONG', 'UP']:
                    return 1
                elif signal in ['SELL', 'SHORT', 'DOWN'] or action in ['SELL', 'SHORT', 'DOWN']:
                    return -1
                else:
                    return 0
            elif isinstance(result, (int, float)):
                # –ß–∏—Å–ª–æ–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = LONG, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = SHORT, 0 = HOLD
                if result > 0.1:
                    return 1
                elif result < -0.1:
                    return -1
                else:
                    return 0
            else:
                return 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é HOLD
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return 0
    
    def _determine_final_signal(self, votes: List[ModelVote]) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        if not votes:
            return 0
        
        # –ü–æ–¥—Å—á–µ—Ç –≤–∑–≤–µ—à–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        direction_weights = {-1: 0.0, 0: 0.0, 1: 0.0}
        
        for vote in votes:
            direction_weights[vote.direction] += vote.weight
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winning_direction = max(direction_weights.keys(), key=lambda k: direction_weights[k])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —è–≤–Ω–æ–µ –ª–∏–¥–µ—Ä—Å—Ç–≤–æ (>50% –≤–µ—Å–∞)
        total_weight = sum(direction_weights.values())
        if total_weight > 0:
            leader_ratio = direction_weights[winning_direction] / total_weight
            if leader_ratio >= 0.5:
                return winning_direction
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –ª–∏–¥–µ—Ä–∞ - HOLD
        return 0
    
    def _calculate_risk_reward_ratio(self, signal: int, market_data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å"""
        try:
            if signal == 0 or len(market_data) < 10:
                return 1.0
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞
            rr_result = self.signal_filter._check_risk_reward(signal, market_data)
            return rr_result.get('ratio', 1.0)
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ R/R: {e}")
            return 1.0

@dataclass
class AIModelDecision:
    """–†–µ—à–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π AI –º–æ–¥–µ–ª–∏"""
    model_name: str
    action: str  # 'BUY', 'SELL', 'HOLD'
    confidence: float
    reasoning: str
    timestamp: datetime

@dataclass
class ConsensusSignal:
    """–ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π"""
    symbol: str
    timestamp: datetime
    price: float
    final_action: str  # –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    consensus_strength: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π, —Å–æ–≥–ª–∞—Å–∏–≤—à–∏—Ö—Å—è —Å —Ä–µ—à–µ–Ω–∏–µ–º
    participating_models: List[AIModelDecision]  # –†–µ—à–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    confidence_avg: float  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π

class DynamicHoldingTimeCalculator:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.min_hold_hours = 1
        self.max_hold_hours = 3  # –ñ–µ—Å—Ç–∫–∏–π –ª–∏–º–∏—Ç 3 —á–∞—Å–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞
        
    def calculate_holding_time(self, symbol: str, data: pd.DataFrame, direction: str, entry_price: float) -> int:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            direction: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ ('LONG' –∏–ª–∏ 'SHORT')
            entry_price: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞
            
        Returns:
            –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤ —á–∞—Å–∞—Ö (1-12)
        """
        try:
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (—Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞)
            order_book_score = self._analyze_order_book(data, entry_price, direction)
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
            volume_score = self._analyze_volume(data)
            
            # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_score = self._analyze_volatility(data)
            
            # –û–±—â–∏–π —Å–∫–æ—Ä–∏–Ω–≥
            total_score = (order_book_score * 0.4 + volume_score * 0.35 + volatility_score * 0.25)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω 1-3 —á–∞—Å–∞)
            if total_score >= 0.8:  # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                holding_hours = 3  # –ú–∞–∫—Å–∏–º—É–º 3 —á–∞—Å–∞
            elif total_score >= 0.6:  # –•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è
                holding_hours = 3  # –ú–∞–∫—Å–∏–º—É–º 3 —á–∞—Å–∞
            elif total_score >= 0.4:  # –°—Ä–µ–¥–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
                holding_hours = 2  # 2 —á–∞—Å–∞ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö —É—Å–ª–æ–≤–∏–π
            elif total_score >= 0.2:  # –°–ª–∞–±—ã–µ —É—Å–ª–æ–≤–∏—è
                holding_hours = 2  # 2 —á–∞—Å–∞ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å–ª–æ–≤–∏–π
            else:  # –û—á–µ–Ω—å —Å–ª–∞–±—ã–µ —É—Å–ª–æ–≤–∏—è
                holding_hours = 1  # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å
                
            logger.info(f"[{symbol}] –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è: {holding_hours}—á "
                       f"(–°—Ç–∞–∫–∞–Ω: {order_book_score:.2f}, –û–±—ä–µ–º: {volume_score:.2f}, "
                       f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility_score:.2f}, –û–±—â–∏–π: {total_score:.2f})")
            
            return holding_hours
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è {symbol}: {e}")
            return 2  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ (2 —á–∞—Å–∞)
    
    def _analyze_order_book(self, data: pd.DataFrame, entry_price: float, direction: str) -> float:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫ (—Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞ –∏ —Ü–µ–Ω—ã)"""
        try:
            if len(data) < 20:
                return 0.5
                
            recent_data = data.tail(20)
            current_price = recent_data['close'].iloc[-1]
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–∫–∞–Ω–∞ —á–µ—Ä–µ–∑ –æ–±—ä–µ–º –∏ —Ü–µ–Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
            volume_avg = recent_data['volume'].mean()
            volume_current = recent_data['volume'].iloc[-1]
            
            # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            price_levels = self._find_key_price_levels(recent_data)
            
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            if direction == 'LONG':
                # –î–ª—è –ª–æ–Ω–≥–∞ –∏—â–µ–º —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤—ã—à–µ
                resistance_levels = [level for level in price_levels if level > current_price]
                if resistance_levels:
                    nearest_resistance = min(resistance_levels)
                    distance_to_resistance = (nearest_resistance - current_price) / current_price
                    
                    # –ï—Å–ª–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –¥–∞–ª–µ–∫–æ –∏ –æ–±—ä–µ–º –≤—ã—Å–æ–∫–∏–π - –¥–µ—Ä–∂–∏–º –¥–æ–ª—å—à–µ
                    if distance_to_resistance > 0.02 and volume_current > volume_avg * 1.5:
                        return 0.9
                    elif distance_to_resistance > 0.01:
                        return 0.7
                    else:
                        return 0.3  # –ë–ª–∏–∑–∫–æ –∫ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—é - –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä–æ
            else:  # SHORT
                # –î–ª—è —à–æ—Ä—Ç–∞ –∏—â–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∏–∂–µ
                support_levels = [level for level in price_levels if level < current_price]
                if support_levels:
                    nearest_support = max(support_levels)
                    distance_to_support = (current_price - nearest_support) / current_price
                    
                    # –ï—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∞–ª–µ–∫–æ –∏ –æ–±—ä–µ–º –≤—ã—Å–æ–∫–∏–π - –¥–µ—Ä–∂–∏–º –¥–æ–ª—å—à–µ
                    if distance_to_support > 0.02 and volume_current > volume_avg * 1.5:
                        return 0.9
                    elif distance_to_support > 0.01:
                        return 0.7
                    else:
                        return 0.3  # –ë–ª–∏–∑–∫–æ –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä–æ
            
            # –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞
            volume_ratio = volume_current / volume_avg
            if volume_ratio > 3.0:  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º - –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–≤–æ—Ä–æ—Ç
                return 0.2
            elif volume_ratio > 1.5:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º - —Ö–æ—Ä–æ—à–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
                return 0.8
            elif volume_ratio < 0.5:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º - —Å–ª–∞–±–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
                return 0.3
            else:
                return 0.5
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫: {e}")
            return 0.5
    
    def _analyze_volume(self, data: pd.DataFrame) -> float:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤"""
        try:
            if len(data) < 24:
                return 0.5
                
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            recent_24h = data.tail(24)
            volume_24h_avg = recent_24h['volume'].mean()
            volume_current = data['volume'].iloc[-1]
            
            # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä–µ–º–∞
            volume_trend = self._calculate_volume_trend(recent_24h)
            
            # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–º–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É
            volume_ratio = volume_current / volume_24h_avg if volume_24h_avg > 0 else 1.0
            
            # –°–∫–æ—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–º–∞
            if volume_ratio > 2.0:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                if volume_trend > 0:  # –†–∞—Å—Ç—É—â–∏–π —Ç—Ä–µ–Ω–¥ –æ–±—ä–µ–º–∞
                    return 0.9  # –°–∏–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ - –¥–µ—Ä–∂–∏–º –¥–æ–ª—å—à–µ
                else:
                    return 0.3  # –í–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç - –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä–æ
            elif volume_ratio > 1.5:  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
                return 0.8
            elif volume_ratio > 0.8:  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
                return 0.6
            elif volume_ratio > 0.5:  # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º
                return 0.4
            else:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º
                return 0.2
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–∞: {e}")
            return 0.5
    
    def _analyze_volatility(self, data: pd.DataFrame) -> float:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è"""
        try:
            if len(data) < 20:
                return 0.5
                
            # –†–∞—Å—á–µ—Ç ATR (Average True Range)
            atr = self._calculate_atr(data)
            current_price = data['close'].iloc[-1]
            atr_percent = (atr / current_price) * 100 if current_price > 0 else 0
            
            # –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
            recent_data = data.tail(20)
            price_changes = recent_data['close'].pct_change().abs()
            avg_volatility = price_changes.mean() * 100
            
            # –°–∫–æ—Ä–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if atr_percent > 4.0 or avg_volatility > 3.0:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                return 0.2  # –ö–æ—Ä–æ—Ç–∫–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ (1-3 —á–∞—Å–∞)
            elif atr_percent > 2.0 or avg_volatility > 1.5:  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                return 0.4  # –°—Ä–µ–¥–Ω–µ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ (3-6 —á–∞—Å–æ–≤)
            elif atr_percent > 1.0 or avg_volatility > 0.8:  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                return 0.6  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ (3-6 —á–∞—Å–æ–≤)
            elif atr_percent > 0.5 or avg_volatility > 0.4:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                return 0.8  # –î–ª–∏–Ω–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ (6-12 —á–∞—Å–æ–≤)
            else:  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                return 0.9  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def _find_key_price_levels(self, data: pd.DataFrame) -> List[float]:
        """–ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            levels = []
            
            # –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤ –∏ –º–∏–Ω–∏–º—É–º–æ–≤
            highs = data['high'].rolling(window=3, center=True).max()
            lows = data['low'].rolling(window=3, center=True).min()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for i in range(2, len(data) - 2):
                # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã
                if data['high'].iloc[i] == highs.iloc[i]:
                    levels.append(data['high'].iloc[i])
                
                # –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã
                if data['low'].iloc[i] == lows.iloc[i]:
                    levels.append(data['low'].iloc[i])
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            levels = sorted(list(set(levels)))
            
            return levels
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            return []
    
    def _calculate_volume_trend(self, data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä–µ–º–∞"""
        try:
            if len(data) < 5:
                return 0
                
            volumes = data['volume'].values
            x = np.arange(len(volumes))
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            slope = np.polyfit(x, volumes, 1)[0]
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∫–ª–æ–Ω–∞
            avg_volume = np.mean(volumes)
            normalized_slope = slope / avg_volume if avg_volume > 0 else 0
            
            return normalized_slope
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞ –æ–±—ä–µ–º–∞: {e}")
            return 0
    
    def _calculate_atr(self, data: pd.DataFrame, period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç Average True Range"""
        try:
            if len(data) < period + 1:
                return 0
                
            high = data['high']
            low = data['low']
            close = data['close'].shift(1)
            
            tr1 = high - low
            tr2 = abs(high - close)
            tr3 = abs(low - close)
            
            true_range = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
            atr = true_range.rolling(window=period).mean().iloc[-1]
            
            return atr if not pd.isna(atr) else 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ATR: {e}")
            return 0

@dataclass
class TestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"""
    test_period_days: int = 14 # –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –¥–Ω—è—Ö - –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–û–ü-5 –ü–ê–†
    start_balance: float = 100.0
    symbols: List[str] = None
    commission_rate: float = 0.001  # 0.1% –∫–æ–º–∏—Å—Å–∏—è
    position_size_percent: float = 0.02  # 2% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–∞)
    min_position_value_usdt: float = 5.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–æ–∑–∏—Ü–∏–∏ 5 USDT –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    leverage_multiplier: float = 3.0  # –ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ 3x (–£–ú–ï–†–ï–ù–ù–û–ï –ø–ª–µ—á–æ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∏—Å–∫–∞)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –†–ò–°–ö–ê
    stop_loss_percent: float = 0.016  # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —Å—Ç–æ–ø-–ª–æ—Å—Å 1.6% (—É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å)
    take_profit_percent: float = 0.048  # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç 4.8% (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:3)
    
    # Trailing Stop –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    use_trailing_stop: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å trailing stop
    trailing_stop_activation_percent: float = 0.01  # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ 1% –ø—Ä–∏–±—ã–ª–∏
    trailing_stop_distance_percent: float = 0.005  # –î–∏—Å—Ç–∞–Ω—Ü–∏—è trailing stop 0.5%
    
    # –°–ï–¢–ö–ê –¢–ï–ô–ö-–ü–†–û–§–ò–¢–û–í (—á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π) - –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –°–ï–¢–ö–ê
    use_take_profit_grid: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    take_profit_levels: List[float] = None  # –£—Ä–æ–≤–Ω–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ [2%, 3%, 4%, 5%]
    take_profit_portions: List[float] = None  # –î–æ–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ [25%, 25%, 25%, 25%]
    
    min_confidence: float = 0.25  # –í–û–ó–í–†–ê–¢ –ö –†–ê–ë–û–ß–ò–ú –ü–ê–†–ê–ú–ï–¢–†–ê–ú: AI –º–æ–¥–µ–ª–∏ –¥–∞—é—Ç –Ω–∏–∑–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    min_volatility: float = 0.0  # –í–û–ó–í–†–ê–¢ –ö –†–ê–ë–û–ß–ò–ú –ü–ê–†–ê–ú–ï–¢–†–ê–ú: –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    min_volume_ratio: float = 0.1  # –í–û–ó–í–†–ê–¢ –ö –†–ê–ë–û–ß–ò–ú –ü–ê–†–ê–ú–ï–¢–†–ê–ú: –º—è–≥–∫–∏–π —Ñ–∏–ª—å—Ç—Ä
    min_hold_hours: int = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
    max_hold_hours: int = 24  # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: —É–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–æ 24 —á–∞—Å–æ–≤ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    # –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ö–û–ù–¢–†–û–õ–Ø –†–ò–°–ö–ê (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø)
    max_portfolio_drawdown: float = 10.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è 10% (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏)
    max_consecutive_losses: int = 3  # –ú–∞–∫—Å–∏–º—É–º 3 —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥
    confidence_correlation_check: bool = True  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    min_correlation_threshold: float = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ AI - –ò–°–ü–†–ê–í–õ–ï–ù–û: 2 –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ lava_ai –∏ reinforcement_learning_engine
    min_consensus_models: int = 2  # –ú–∏–Ω–∏–º—É–º 2 –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è (–≥–∏–±–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å 5 –º–æ–¥–µ–ª—è–º–∏)
    enabled_ai_models: List[str] = None  # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
    consensus_weight_threshold: float = 0.15  # –ü–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –ø–æ –≤–µ—Å—É (–°–ù–ò–ñ–ï–ù –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 5 –º–æ–¥–µ–ª—è–º–∏)
    
    # –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ - –ú–Ø–ì–ö–ò–ï –§–ò–õ–¨–¢–†–´
    min_trend_strength: float = 0.1  # 10% - –ú–Ø–ì–ö–ò–ô —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç—Ä–µ–Ω–¥–∞
    max_trades_per_day: int = 10  # –ú–∞–∫—Å–∏–º—É–º 10 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å (–ö–ê–ß–ï–°–¢–í–û > –ö–û–õ–ò–ß–ï–°–¢–í–û)
    min_rsi_divergence: float = 2.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è RSI (–ú–Ø–ì–ö–ò–ô –§–ò–õ–¨–¢–†)
    min_volume_spike: float = 0.8  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ 80% (–ú–Ø–ì–ö–ò–ô –§–ò–õ–¨–¢–†)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ - –ú–Ø–ì–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø
    min_signal_strength: float = 0.3  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ 30% (–ú–Ø–ì–ö–ò–ô –§–ò–õ–¨–¢–†)
    min_market_score: float = 0.2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π 20% (–ú–Ø–ì–ö–ò–ô –§–ò–õ–¨–¢–†)
    require_volume_confirmation: bool = False  # –û—Ç–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—ä–µ–º–æ–º
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
    use_time_filter: bool = False  # –û—Ç–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    trading_hours: List[int] = None  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —á–∞—Å—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (UTC): 14:00, 02:00, 20:00
    timezone: str = "UTC"  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞
    analyze_best_hours: bool = True  # –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–µ —á–∞—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤ - –ù–û–í–´–ô –§–ò–õ–¨–¢–† –î–õ–Ø –ê–ö–¢–ò–í–ù–´–• –¢–û–†–ì–û–í
    use_volume_filter: bool = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤
    min_daily_volume_usdt: float = 5000000.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ 5M USDT
    min_hourly_volume_usdt: float = 1000000.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∞—Å–æ–≤–æ–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ 1M USDT
    
    # –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
    debug_mode: bool = True  # –í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    use_strict_filters: bool = False  # –û–¢–ö–õ–Æ–ß–ò–¢–¨ —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    
    def __post_init__(self):
        if self.symbols is None:
            # üèÜ –ó–û–õ–û–¢–ê–Ø –ü–Ø–¢–ï–†–ö–ê - –¢–û–ü –ü–†–ò–ë–´–õ–¨–ù–´–ï –ü–ê–†–´ –Ω–∞ –æ—Å–Ω–æ–≤–µ 30-–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 50 –ø–∞—Ä:
            # TAOUSDT (30%) - ü•á +33.20% ROI, 55.0% –≤–∏–Ω—Ä–µ–π—Ç (–ª–∏–¥–µ—Ä –ø–æ –≤—Å–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º!)
            # CRVUSDT (25%) - ü•à +32.91% ROI, 45.7% –≤–∏–Ω—Ä–µ–π—Ç (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å)
            # ZRXUSDT (20%) - ü•â +29.27% ROI, 42.9% –≤–∏–Ω—Ä–µ–π—Ç (—Ö–æ—Ä–æ—à–∏–π ROI)
            # APTUSDT (15%) - +23.80% ROI, 47.2% –≤–∏–Ω—Ä–µ–π—Ç (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
            # SANDUSDT (10%) - +17.91% ROI, 43.6% –≤–∏–Ω—Ä–µ–π—Ç (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)
            self.symbols = ['TAOUSDT', 'CRVUSDT', 'ZRXUSDT', 'APTUSDT', 'SANDUSDT']  # –¢–æ–ø-5 —Å–∞–º—ã—Ö –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –ø–∞—Ä
        if self.enabled_ai_models is None:
            self.enabled_ai_models = ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai', 'reinforcement_learning_engine']  # –í–°–ï 5 –ú–û–î–ï–õ–ï–ô –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô —Å–µ—Ç–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞
        if self.take_profit_levels is None:
            self.take_profit_levels = [0.020, 0.025, 0.030]  # TP1=2.0%, TP2=2.5%, TP3=3.0% - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Ç–∫–∞
        if self.take_profit_portions is None:
            self.take_profit_portions = [0.40, 0.35, 0.25]  # –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ: 40%, 35%, 25%
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ - –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ï —á–∞—Å—ã –¥–ª—è 70-80% –≤–∏–Ω—Ä–µ–π—Ç–∞ (UTC)
        if self.trading_hours is None and self.use_time_filter:
            # –¢–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —á–∞—Å—ã –ø–æ –∞–Ω–∞–ª–∏–∑—É comprehensive_trading_analyzer.py: 14:00, 02:00, 20:00
            self.trading_hours = [2, 14, 20]  # –¢–û–õ–¨–ö–û 3 –ª—É—á—à–∏—Ö —á–∞—Å–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞

@dataclass
class TradeResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π"""
    symbol: str
    entry_time: datetime
    entry_price: float
    exit_time: datetime
    exit_price: float
    direction: str  # 'LONG' –∏–ª–∏ 'SHORT'
    pnl: float
    pnl_percent: float
    confidence: float  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    ai_model: str  # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
    consensus_strength: int  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π, —Å–æ–≥–ª–∞—Å–∏–≤—à–∏—Ö—Å—è —Å —Ä–µ—à–µ–Ω–∏–µ–º
    participating_models: List[AIModelDecision]  # –†–µ—à–µ–Ω–∏—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
    consensus_signal: Optional[ConsensusSignal] = None  # –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
    position_size: float = 0.0  # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    commission: float = 0.0  # –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É
    
    # –ü–æ–ª—è –¥–ª—è —Å–µ—Ç–∫–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤
    exit_reason: str = "unknown"  # –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: "take_profit_1", "take_profit_2", "stop_loss", etc.
    partial_exits: List[Dict[str, Any]] = None  # –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π –ø–æ–∑–∏—Ü–∏–∏
    remaining_position: float = 0.0  # –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏

@dataclass
class AIModelPerformance:
    """–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–π AI –º–æ–¥–µ–ª–∏"""
    model_name: str
    total_signals: int
    signals_used_in_trades: int
    winning_signals: int
    losing_signals: int
    signal_accuracy: float
    avg_confidence: float
    contribution_to_pnl: float
    consensus_participation_rate: float  # –ö–∞–∫ —á–∞—Å—Ç–æ –º–æ–¥–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ

@dataclass
class WinrateTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π AI –º–æ–¥–µ–ª–µ–π"""
    symbol: str
    total_trades: int
    winning_trades: int
    losing_trades: int
    win_rate: float
    total_pnl: float
    total_pnl_percent: float
    avg_trade_pnl: float
    max_drawdown: float
    sharpe_ratio: float
    trades: List[TradeResult]
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ AI –º–æ–¥–µ–ª–µ–π
    ai_models_performance: Dict[str, AIModelPerformance] = None
    consensus_stats: Dict[str, Any] = None  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    rl_stats: Dict[str, Any] = None  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º

class RealWinrateTester:
    """–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –≤–∏–Ω—Ä–µ–π—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, config: TestConfig):
        self.config = config
        self.orchestrator = None
        self.historical_manager = HistoricalDataManager()
        self.data_collector = BinanceDataCollector()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π
        self.ai_models = {}
        self.ai_models_performance = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
        self.dynamic_holding_calculator = DynamicHoldingTimeCalculator()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        self.trade_visualizer = DetailedTradeVisualizer()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
        
    async def run_model_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ AI –º–æ–¥–µ–ª–µ–π...")
        
        diagnostics_results = {}
        
        for model_name in self.config.enabled_ai_models:
            try:
                logger.info(f"üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ {model_name}...")
                
                if model_name not in self.ai_models:
                    diagnostics_results[model_name] = {
                        'status': 'NOT_INITIALIZED',
                        'error': '–ú–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
                        'test_signal': None
                    }
                    continue
                
                # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                test_data = pd.DataFrame({
                    'timestamp': [get_utc_now()],
                    'open': [50000.0],
                    'high': [51000.0],
                    'low': [49000.0],
                    'close': [50500.0],
                    'volume': [1000.0]
                })
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
                test_signal = None
                error_msg = None
                
                try:
                    if model_name == 'trading_ai':
                        result = await self.ai_models[model_name].analyze_market('BTCUSDT', test_data)
                        # trading_ai –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç TradingSignal, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                        test_signal = result.action if result and hasattr(result, 'action') else 'NO_RESULT'
                    elif model_name == 'lava_ai':
                        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º generate_trading_signals —Ç–æ–ª—å–∫–æ —Å data –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                        result = await self.ai_models[model_name].generate_trading_signals(test_data)
                        test_signal = result.get('signal', 'UNKNOWN') if result else 'NO_RESULT'
                    elif model_name == 'lgbm_ai':
                        result = await self.ai_models[model_name].predict_market_direction('BTCUSDT', test_data)
                        test_signal = result.get('direction', 'UNKNOWN') if result else 'NO_RESULT'
                    elif model_name == 'mistral_ai':
                        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ List[Dict] –¥–ª—è mistral_ai
                        price_data = test_data.tail(20).to_dict('records')
                        result = await self.ai_models[model_name].analyze_trading_opportunity('BTCUSDT', 50500.0, price_data)
                        # analyze_trading_opportunity –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                        test_signal = result if result else 'NO_RESULT'
                    elif model_name == 'reinforcement_learning_engine':
                        # –î–ª—è RL engine –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
                        test_signal = 'RL_ACTIVE'
                    
                    if test_signal and test_signal not in ['UNKNOWN', 'NO_RESULT']:
                        status = 'ACTIVE'
                    else:
                        status = 'INACTIVE'
                        error_msg = f'–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {test_signal}'
                        
                except Exception as test_error:
                    status = 'ERROR'
                    error_msg = str(test_error)
                    test_signal = None
                
                diagnostics_results[model_name] = {
                    'status': status,
                    'error': error_msg,
                    'test_signal': test_signal
                }
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if status == 'ACTIVE':
                    logger.info(f"‚úÖ {model_name}: –ê–ö–¢–ò–í–ù–ê (—Ç–µ—Å—Ç-—Å–∏–≥–Ω–∞–ª: {test_signal})")
                elif status == 'INACTIVE':
                    logger.warning(f"‚ö†Ô∏è {model_name}: –ù–ï–ê–ö–¢–ò–í–ù–ê ({error_msg})")
                else:
                    logger.error(f"‚ùå {model_name}: –û–®–ò–ë–ö–ê ({error_msg})")
                    
            except Exception as diag_error:
                diagnostics_results[model_name] = {
                    'status': 'DIAGNOSTIC_ERROR',
                    'error': str(diag_error),
                    'test_signal': None
                }
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ {model_name}: {diag_error}")
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self._print_diagnostics_summary(diagnostics_results)
        return diagnostics_results
    
    def _print_diagnostics_summary(self, diagnostics_results: Dict[str, Dict]):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        logger.info("=" * 60)
        logger.info("üìä –°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò AI –ú–û–î–ï–õ–ï–ô")
        logger.info("=" * 60)
        
        active_models = []
        inactive_models = []
        error_models = []
        
        for model_name, result in diagnostics_results.items():
            status = result['status']
            if status == 'ACTIVE':
                active_models.append(model_name)
            elif status in ['INACTIVE', 'NOT_INITIALIZED']:
                inactive_models.append(model_name)
            else:
                error_models.append(model_name)
        
        logger.info(f"‚úÖ –ê–ö–¢–ò–í–ù–´–ï –ú–û–î–ï–õ–ò ({len(active_models)}): {', '.join(active_models) if active_models else '–ù–ï–¢'}")
        logger.info(f"‚ö†Ô∏è –ù–ï–ê–ö–¢–ò–í–ù–´–ï –ú–û–î–ï–õ–ò ({len(inactive_models)}): {', '.join(inactive_models) if inactive_models else '–ù–ï–¢'}")
        logger.info(f"‚ùå –ú–û–î–ï–õ–ò –° –û–®–ò–ë–ö–ê–ú–ò ({len(error_models)}): {', '.join(error_models) if error_models else '–ù–ï–¢'}")
        
        if inactive_models or error_models:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤!")
        
        logger.info("=" * 60)

    async def _ensure_ollama_server(self):
        """–û–±–µ—Å–ø–µ—á–∏—Ç—å –∑–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è mistral_ai"""
        if 'mistral_ai' not in self.config.enabled_ai_models:
            return
            
        try:
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Ollama —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Ollama
            try:
                import requests
                response = requests.get("http://localhost:11434/api/tags", timeout=5)
                if response.status_code == 200:
                    logger.info("‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                    return
            except:
                pass
            
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Ollama –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            try:
                # –î–ª—è macOS
                subprocess.Popen(['ollama', 'serve'], 
                               stdout=subprocess.DEVNULL, 
                               stderr=subprocess.DEVNULL)
                
                # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
                for attempt in range(30):  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                    try:
                        import requests
                        response = requests.get("http://localhost:11434/api/tags", timeout=2)
                        if response.status_code == 200:
                            logger.info("‚úÖ Ollama —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ mistral
                            models = response.json().get('models', [])
                            mistral_models = [m for m in models if 'mistral' in m.get('name', '').lower()]
                            
                            if mistral_models:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –º–æ–¥–µ–ª—å Mistral: {mistral_models[0]['name']}")
                            else:
                                logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å Mistral –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...")
                                subprocess.Popen(['ollama', 'pull', 'mistral'], 
                                               stdout=subprocess.DEVNULL, 
                                               stderr=subprocess.DEVNULL)
                                logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Mistral –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
                            return
                    except:
                        pass
                    
                    await asyncio.sleep(1)
                
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
                
            except FileNotFoundError:
                logger.error("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Ollama: https://ollama.ai/")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Ollama: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã Ollama: {e}")

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–π AI —Å–∏—Å—Ç–µ–º—ã...")
            
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∑–∞–ø—É—Å–∫ Ollama —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è mistral_ai
            await self._ensure_ollama_server()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –º–µ–Ω–µ–¥–∂–µ—Ä
            await ai_manager.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏
            for model_name in self.config.enabled_ai_models:
                try:
                    if model_name == 'trading_ai':
                        self.ai_models[model_name] = TradingAI()
                        await self.ai_models[model_name].initialize()
                    elif model_name == 'lava_ai':
                        self.ai_models[model_name] = LavaAI()
                        await self.ai_models[model_name].initialize()
                    elif model_name == 'lgbm_ai':
                        self.ai_models[model_name] = LGBMAI()
                        await self.ai_models[model_name].initialize()
                    elif model_name == 'mistral_ai':
                        self.ai_models[model_name] = MistralAI()
                        await self.ai_models[model_name].initialize()
                    elif model_name == 'reinforcement_learning_engine':
                        self.ai_models[model_name] = ReinforcementLearningEngine()
                        # ReinforcementLearningEngine –Ω–µ —Ç—Ä–µ–±—É–µ—Ç async –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        logger.info(f"üß† ReinforcementLearningEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    self.ai_models_performance[model_name] = {
                        'total_signals': 0,
                        'signals_used_in_trades': 0,
                        'winning_signals': 0,
                        'losing_signals': 0,
                        'total_confidence': 0.0,
                        'confidence_count': 0,  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        'contribution_to_pnl': 0.0,
                        'consensus_participations': 0,
                        'signal_accuracy': 0.0,  # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
                        'consensus_participation_rate': 0.0  # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
                    }
                    
                    logger.info(f"‚úÖ {model_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    
                except Exception as model_error:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {model_name}: {model_error}")
                    logger.error(f"üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è {model_name}: {type(model_error).__name__}: {str(model_error)}")
                    # –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                    if model_name in self.config.enabled_ai_models:
                        self.config.enabled_ai_models.remove(model_name)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
            active_models = list(self.ai_models.keys())
            failed_models = [model for model in ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai', 'reinforcement_learning_engine'] 
                           if model not in active_models]
            
            logger.info(f"‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è AI —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å {len(self.ai_models)} –º–æ–¥–µ–ª—è–º–∏")
            logger.info(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(active_models)}")
            if failed_models:
                logger.warning(f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(failed_models)}")
            logger.info(f"‚öôÔ∏è –ú–∏–Ω–∏–º—É–º –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {self.config.min_consensus_models}")
            logger.info(f"üéØ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.config.min_confidence*100:.1f}%")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    async def load_historical_data(self, symbol: str) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            cache_file = f"data/{symbol}_1h_cache.csv"
            if os.path.exists(cache_file):
                df = pd.read_csv(cache_file)
                df['timestamp'] = pd.to_datetime(df['timestamp'])
                df = df.set_index('timestamp')
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
                if len(df) > 0:
                    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    df = df.sort_index()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    hours_needed = self.config.test_period_days * 24
                    
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                    if len(df) > hours_needed:
                        df = df.tail(hours_needed)
                    
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol} (–ø–µ—Ä–∏–æ–¥: {df.index[0]} - {df.index[-1]})")
                    return df
                else:
                    logger.warning(f"‚ö†Ô∏è –ö—ç—à —Ñ–∞–π–ª {cache_file} –ø—É—Å—Ç–æ–π")
                    return pd.DataFrame()
            else:
                logger.warning(f"‚ö†Ô∏è –ö—ç—à —Ñ–∞–π–ª {cache_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance...")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance API
                try:
                    async with self.data_collector as collector:
                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –±–æ–ª—å—à–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞
                        data = await collector.get_historical_data(
                            symbol=symbol, 
                            interval="1h", 
                            days=self.config.test_period_days + 30  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –±—É—Ñ–µ—Ä–∞
                        )
                        
                        if not data.empty:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                            os.makedirs("data", exist_ok=True)
                            data.to_csv(cache_file, index=False)
                            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {cache_file}")
                            
                            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            data['timestamp'] = pd.to_datetime(data['timestamp'])
                            data = data.set_index('timestamp')
                            
                            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                            if len(data) > 0:
                                data = data.sort_index()
                                hours_needed = self.config.test_period_days * 24
                                if len(data) > hours_needed:
                                    data = data.tail(hours_needed)
                            
                            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol} —Å Binance")
                            return data
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol} —Å Binance")
                            return pd.DataFrame()
                            
                except Exception as download_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance –¥–ª—è {symbol}: {download_error}")
                    return pd.DataFrame()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()
    
    async def get_individual_ai_signal(self, model_name: str, symbol: str, data: pd.DataFrame) -> Optional[AIModelDecision]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–π AI –º–æ–¥–µ–ª–∏"""
        try:
            if self.config.debug_mode:
                logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç {model_name} –¥–ª—è {symbol}")
            
            model = self.ai_models.get(model_name)
            if not model:
                if self.config.debug_mode:
                    logger.warning(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ai_models")
                return None
            
            current_price = float(data['close'].iloc[-1])
            timestamp = data.index[-1]
            
            if self.config.debug_mode:
                logger.info(f"üìä {model_name}: —Ü–µ–Ω–∞={current_price:.4f}, –≤—Ä–µ–º—è={timestamp}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
            if model_name == 'trading_ai':
                if self.config.debug_mode:
                    logger.info(f"ü§ñ –í—ã–∑–æ–≤ trading_ai.analyze_market –¥–ª—è {symbol}")
                signal = await model.analyze_market(symbol, data)
                
                if self.config.debug_mode:
                    if signal:
                        logger.info(f"‚úÖ trading_ai –æ—Ç–≤–µ—Ç: action={signal.action}, confidence={signal.confidence:.3f}")
                    else:
                        logger.warning(f"‚ùå trading_ai –≤–µ—Ä–Ω—É–ª None –¥–ª—è {symbol}")
                
                if signal and signal.action in ['BUY', 'SELL']:
                    decision = AIModelDecision(
                        model_name=model_name,
                        action=signal.action,
                        confidence=signal.confidence,
                        reasoning=signal.reason,
                        timestamp=timestamp
                    )
                    if self.config.debug_mode:
                        logger.info(f"üéØ trading_ai —Å–∏–≥–Ω–∞–ª: {decision.action} (confidence: {decision.confidence:.3f})")
                    return decision
                elif signal:
                    if self.config.debug_mode:
                        logger.info(f"‚ö†Ô∏è trading_ai —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: action={signal.action} (–Ω–µ BUY/SELL)")
            
            elif model_name == 'lava_ai':
                if self.config.debug_mode:
                    logger.info(f"üåã –í—ã–∑–æ–≤ lava_ai.generate_trading_signals –¥–ª—è {symbol}")
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è LavaAI - –∏—Å–ø–æ–ª—å–∑—É–µ–º generate_trading_signals (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥)
                signals = await model.generate_trading_signals(data)
                
                if self.config.debug_mode:
                    if signals:
                        logger.info(f"‚úÖ lava_ai –æ—Ç–≤–µ—Ç: {signals}")
                    else:
                        logger.warning(f"‚ùå lava_ai –≤–µ—Ä–Ω—É–ª None –¥–ª—è {symbol}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è lava_ai
                if signals:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ –æ—Ç lava_ai
                    signal_action = None
                    confidence = 0.5
                    reasoning = 'LavaAI trading signals'
                    
                    if isinstance(signals, dict):
                        if 'signal' in signals:
                            signal_action = signals['signal']
                            confidence = signals.get('confidence', 0.5)
                            reasoning = signals.get('reasoning', reasoning)
                        elif 'action' in signals:
                            signal_action = signals['action']
                            confidence = signals.get('confidence', 0.5)
                        elif 'recommendation' in signals:
                            signal_action = signals['recommendation']
                            confidence = signals.get('confidence', 0.5)
                    elif isinstance(signals, str):
                        signal_action = signals.upper()
                        confidence = 0.6  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    
                    # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª HOLD, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    if signal_action in ['HOLD', 'NEUTRAL', None] or signal_action not in ['BUY', 'SELL']:
                        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                        price_change_5 = (data['close'].iloc[-1] - data['close'].iloc[-5]) / data['close'].iloc[-5]
                        price_change_10 = (data['close'].iloc[-1] - data['close'].iloc[-10]) / data['close'].iloc[-10]
                        volume_ratio = data['volume'].iloc[-1] / data['volume'].iloc[-20:].mean()
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞
                        if price_change_5 > 0.005 and price_change_10 > 0.002 and volume_ratio > 0.8:
                            signal_action = 'BUY'
                            confidence = min(0.7, abs(price_change_5) * 20 + volume_ratio * 0.2)
                            reasoning = f"LavaAI —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: price_5={price_change_5:.3f}, price_10={price_change_10:.3f}, vol={volume_ratio:.2f}"
                        elif price_change_5 < -0.005 and price_change_10 < -0.002 and volume_ratio > 0.8:
                            signal_action = 'SELL'
                            confidence = min(0.7, abs(price_change_5) * 20 + volume_ratio * 0.2)
                            reasoning = f"LavaAI —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: price_5={price_change_5:.3f}, price_10={price_change_10:.3f}, vol={volume_ratio:.2f}"
                        else:
                            if self.config.debug_mode:
                                logger.info(f"‚ö†Ô∏è lava_ai: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (price_5={price_change_5:.3f}, price_10={price_change_10:.3f})")
                            return None
                    
                    if signal_action in ['BUY', 'SELL']:
                        decision = AIModelDecision(
                            model_name=model_name,
                            action=signal_action,
                            confidence=confidence,
                            reasoning=reasoning,
                            timestamp=timestamp
                        )
                        if self.config.debug_mode:
                            logger.info(f"üéØ lava_ai —Å–∏–≥–Ω–∞–ª: {decision.action} (confidence: {decision.confidence:.3f})")
                        return decision
                    elif self.config.debug_mode:
                        logger.info(f"‚ö†Ô∏è lava_ai —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: signal={signal_action} (–Ω–µ BUY/SELL)")
            
            elif model_name == 'lgbm_ai':
                if self.config.debug_mode:
                    logger.info(f"üß† –í—ã–∑–æ–≤ lgbm_ai.predict_market_direction –¥–ª—è {symbol}")
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è LGBMAI - —Ç–æ–ª—å–∫–æ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                prediction = await model.predict_market_direction(symbol, data)
                
                if self.config.debug_mode:
                    if prediction:
                        logger.info(f"‚úÖ lgbm_ai –æ—Ç–≤–µ—Ç: {prediction}")
                    else:
                        logger.warning(f"‚ùå lgbm_ai –≤–µ—Ä–Ω—É–ª None –¥–ª—è {symbol}")
                
                if prediction and 'direction' in prediction:
                    direction = prediction['direction']
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ direction –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
                    if abs(direction) > 0.1:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞
                        action = 'BUY' if direction > 0 else 'SELL'
                        decision = AIModelDecision(
                            model_name=model_name,
                            action=action,
                            confidence=abs(prediction.get('confidence', 0.5)),
                            reasoning=f"LGBM prediction: {direction:.3f}",
                            timestamp=timestamp
                        )
                        if self.config.debug_mode:
                            logger.info(f"üéØ lgbm_ai —Å–∏–≥–Ω–∞–ª: {decision.action} (confidence: {decision.confidence:.3f}, direction: {direction:.3f})")
                        return decision
                    else:
                        if self.config.debug_mode:
                            logger.info(f"‚ö†Ô∏è lgbm_ai: direction={direction:.3f} —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                elif prediction:
                    if self.config.debug_mode:
                        direction = prediction.get('direction', 'UNKNOWN')
                        logger.info(f"‚ö†Ô∏è lgbm_ai: direction={direction} (–Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)")
            
            elif model_name == 'mistral_ai':
                if self.config.debug_mode:
                    logger.info(f"üîÆ –í—ã–∑–æ–≤ mistral_ai.analyze_trading_opportunity –¥–ª—è {symbol}")
                # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è MistralAI - –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –¥–∞–Ω–Ω—ã–µ
                current_price = float(data['close'].iloc[-1])
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ List[Dict] –¥–ª—è mistral_ai
                price_data = []
                if len(data) > 0:
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    recent_data = data.tail(20)
                    price_data = [
                        {
                            'timestamp': str(row.name),
                            'open': float(row['open']),
                            'high': float(row['high']),
                            'low': float(row['low']),
                            'close': float(row['close']),
                            'volume': float(row['volume'])
                        }
                        for _, row in recent_data.iterrows()
                    ]
                analysis = await model.analyze_trading_opportunity(symbol, current_price, price_data)
                
                if self.config.debug_mode:
                    if analysis:
                        logger.info(f"‚úÖ mistral_ai –æ—Ç–≤–µ—Ç: {analysis}")
                    else:
                        logger.warning(f"‚ùå mistral_ai –≤–µ—Ä–Ω—É–ª None –¥–ª—è {symbol}")
                
                # mistral_ai –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                if analysis and isinstance(analysis, str):
                    action = analysis.upper()
                    if action in ['BUY', 'SELL']:
                        decision = AIModelDecision(
                            model_name=model_name,
                            action=action,
                            confidence=0.7,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è mistral
                            reasoning=f'Mistral AI analysis: {analysis}',
                            timestamp=timestamp
                        )
                        if self.config.debug_mode:
                            logger.info(f"üéØ mistral_ai —Å–∏–≥–Ω–∞–ª: {decision.action} (confidence: {decision.confidence:.3f})")
                        return decision
                elif analysis and isinstance(analysis, dict) and 'recommendation' in analysis:
                    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
                    action = analysis['recommendation'].upper()
                    if action in ['BUY', 'SELL']:
                        decision = AIModelDecision(
                            model_name=model_name,
                            action=action,
                            confidence=analysis.get('confidence', 0.5),
                            reasoning=analysis.get('reasoning', 'Mistral AI analysis'),
                            timestamp=timestamp
                        )
                        if self.config.debug_mode:
                            logger.info(f"üéØ mistral_ai —Å–∏–≥–Ω–∞–ª: {decision.action} (confidence: {decision.confidence:.3f})")
                        return decision
                    elif self.config.debug_mode:
                        logger.info(f"‚ö†Ô∏è mistral_ai —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: action={action} (–Ω–µ BUY/SELL)")
                elif analysis and self.config.debug_mode:
                    logger.info(f"‚ö†Ô∏è mistral_ai: –Ω–µ—Ç recommendation –≤ –æ—Ç–≤–µ—Ç–µ")
            
            elif model_name == 'reinforcement_learning_engine':
                if self.config.debug_mode:
                    logger.info(f"üß† –í—ã–∑–æ–≤ reinforcement_learning_engine –¥–ª—è {symbol}")
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∏ —É–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è RL engine
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π
                    weights = model.get_model_weights()
                    
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è RL engine
                    price_change_1 = (data['close'].iloc[-1] - data['close'].iloc[-2]) / data['close'].iloc[-2]
                    price_change_5 = (data['close'].iloc[-1] - data['close'].iloc[-5]) / data['close'].iloc[-5]
                    price_change_10 = (data['close'].iloc[-1] - data['close'].iloc[-10]) / data['close'].iloc[-10]
                    volume_ratio = data['volume'].iloc[-1] / data['volume'].iloc[-20:].mean()
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                    rsi = self.calculate_rsi(data).iloc[-1]
                    
                    # –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –¥–ª—è RL engine
                    action = 'HOLD'
                    confidence = 0.3
                    reasoning = "RL Engine: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤"
                    
                    # BUY —É—Å–ª–æ–≤–∏—è (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ)
                    buy_signals = 0
                    if price_change_1 > 0.002:  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç
                        buy_signals += 1
                    if price_change_5 > 0.003:  # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç
                        buy_signals += 2
                    if price_change_10 > 0.005:  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç
                        buy_signals += 1
                    if volume_ratio > 1.0:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
                        buy_signals += 1
                    if rsi < 70:  # –ù–µ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω
                        buy_signals += 1
                    
                    # SELL —É—Å–ª–æ–≤–∏—è (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ)
                    sell_signals = 0
                    if price_change_1 < -0.002:  # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                        sell_signals += 1
                    if price_change_5 < -0.003:  # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                        sell_signals += 2
                    if price_change_10 < -0.005:  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
                        sell_signals += 1
                    if volume_ratio > 1.0:  # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
                        sell_signals += 1
                    if rsi > 30:  # –ù–µ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω
                        sell_signals += 1
                    
                    # –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                    if buy_signals >= 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è BUY
                        action = 'BUY'
                        confidence = min(0.8, 0.4 + buy_signals * 0.1)
                        reasoning = f"RL Engine BUY: {buy_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ (price_1={price_change_1:.3f}, price_5={price_change_5:.3f}, vol={volume_ratio:.2f}, rsi={rsi:.1f})"
                    elif sell_signals >= 3:  # –ú–∏–Ω–∏–º—É–º 3 —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è SELL
                        action = 'SELL'
                        confidence = min(0.8, 0.4 + sell_signals * 0.1)
                        reasoning = f"RL Engine SELL: {sell_signals} —Å–∏–≥–Ω–∞–ª–æ–≤ (price_1={price_change_1:.3f}, price_5={price_change_5:.3f}, vol={volume_ratio:.2f}, rsi={rsi:.1f})"
                    else:
                        # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É
                        if abs(price_change_5) > 0.008 and volume_ratio > 0.9:
                            action = 'BUY' if price_change_5 > 0 else 'SELL'
                            confidence = min(0.6, abs(price_change_5) * 15 + volume_ratio * 0.1)
                            reasoning = f"RL Engine –ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: price_5={price_change_5:.3f}, vol={volume_ratio:.2f}"
                    
                    if action in ['BUY', 'SELL']:
                        decision = AIModelDecision(
                            model_name=model_name,
                            action=action,
                            confidence=confidence,
                            reasoning=reasoning,
                            timestamp=timestamp
                        )
                        if self.config.debug_mode:
                            logger.info(f"üéØ reinforcement_learning_engine —Å–∏–≥–Ω–∞–ª: {decision.action} (confidence: {decision.confidence:.3f})")
                        return decision
                    elif self.config.debug_mode:
                        logger.info(f"‚ö†Ô∏è reinforcement_learning_engine: {reasoning}")
                        
                except Exception as rl_error:
                    if self.config.debug_mode:
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ reinforcement_learning_engine: {rl_error}")
                    # Fallback –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        price_change = (data['close'].iloc[-1] - data['close'].iloc[-5]) / data['close'].iloc[-5]
                        if abs(price_change) > 0.01:
                            action = 'BUY' if price_change > 0 else 'SELL'
                            confidence = min(0.5, abs(price_change) * 10)
                            decision = AIModelDecision(
                                model_name=model_name,
                                action=action,
                                confidence=confidence,
                                reasoning=f"RL Engine fallback: price_change={price_change:.3f}",
                                timestamp=timestamp
                            )
                            return decision
                    except:
                        pass
            
            if self.config.debug_mode:
                logger.info(f"‚ùå {model_name}: —Å–∏–≥–Ω–∞–ª –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol}")
            return None
            
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç {model_name}: {e}")
            return None

    async def create_consensus_signal(self, symbol: str, data: pd.DataFrame, model_decisions: List[AIModelDecision]) -> Optional[ConsensusSignal]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        if not model_decisions:
            logger.info(f"‚ùå –ö–æ–Ω—Å–µ–Ω—Å—É—Å –¥–ª—è {symbol}: –ù–µ—Ç —Ä–µ—à–µ–Ω–∏–π –æ—Ç AI –º–æ–¥–µ–ª–µ–π")
            return None
        
        current_price = float(data['close'].iloc[-1])
        timestamp = data.index[-1]
        
        # üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´
        logger.info(f"üöÄ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è {symbol}")
        advanced_config = AdvancedConfidenceConfig()
        signal_processor = AdvancedSignalProcessor()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º AIModelDecision –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã
        ai_results = {}
        for decision in model_decisions:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º action –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
            signal_direction = 0
            if decision.action == 'BUY':
                signal_direction = 1
            elif decision.action == 'SELL':
                signal_direction = -1
            
            ai_results[decision.model_name] = {
                'signal': signal_direction,
                'confidence': decision.confidence,
                'action': decision.action,
                'reasoning': decision.reasoning
            }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        try:
            advanced_result = signal_processor.process_ai_signals(ai_results, data, symbol)
            
            logger.info(f"üéØ –ü–†–û–î–í–ò–ù–£–¢–´–ô –ê–ù–ê–õ–ò–ó –¥–ª—è {symbol}:")
            logger.info(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {advanced_result.final_signal}")
            logger.info(f"   –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {advanced_result.combined_confidence:.3f}")
            logger.info(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥: {advanced_result.effective_threshold:.3f}")
            logger.info(f"   Risk/Reward: {advanced_result.risk_reward_ratio:.3f}")
            logger.info(f"   –ì–æ–ª–æ—Å–∞ –º–æ–¥–µ–ª–µ–π: {len(advanced_result.votes)}")
            logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤: {advanced_result.filter_results}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏—è—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            for i, decision in enumerate(model_decisions):
                for vote in advanced_result.votes:
                    if vote.model_name == decision.model_name:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                        enhanced_confidence = vote.confidence * vote.weight
                        decision.confidence = min(1.0, enhanced_confidence)
                        logger.info(f"   üìà {decision.model_name}: {vote.confidence:.3f} ‚Üí {decision.confidence:.3f} (–≤–µ—Å: {vote.weight:.3f})")
                        break
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–µ –¥–ª—è {symbol}: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π
        model_weights = self.calculate_model_weights()
        
        # üîÑ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–û–†–û–ì–ò (–æ—Ç–∫–ª—é—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫)
        adaptive_thresholds = {
            'consensus_threshold': self.config.consensus_weight_threshold,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥
            'min_confidence': self.config.min_confidence,
            'min_volatility': self.config.min_volatility
        }
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –∑–∞ –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        buy_votes = [d for d in model_decisions if d.action == 'BUY']
        sell_votes = [d for d in model_decisions if d.action == 'SELL']
        hold_votes = [d for d in model_decisions if d.action == 'HOLD']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞ —Å –±–æ–Ω—É—Å–æ–º –∑–∞ –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        def calculate_enhanced_score(decisions):
            total_score = 0
            for d in decisions:
                base_score = d.confidence * model_weights.get(d.model_name, 1.0)
                # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (confidence > 0.7)
                confidence_bonus = 1.0
                if d.confidence > 0.7:
                    confidence_bonus = 1.3  # 30% –±–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                elif d.confidence > 0.5:
                    confidence_bonus = 1.15  # 15% –±–æ–Ω—É—Å –∑–∞ —Å—Ä–µ–¥–Ω—é—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                
                enhanced_score = base_score * confidence_bonus
                total_score += enhanced_score
                
                if self.config.debug_mode:
                    logger.info(f"   üìä {d.model_name}: –±–∞–∑–æ–≤—ã–π={base_score:.3f}, –±–æ–Ω—É—Å={confidence_bonus:.2f}x, –∏—Ç–æ–≥–æ={enhanced_score:.3f}")
            
            return total_score
        
        buy_weighted_score = calculate_enhanced_score(buy_votes)
        sell_weighted_score = calculate_enhanced_score(sell_votes)
        hold_weighted_score = calculate_enhanced_score(hold_votes)
        
        logger.info(f"üó≥Ô∏è –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è {symbol}:")
        logger.info(f"   üü¢ BUY –≥–æ–ª–æ—Å–∞: {len(buy_votes)} (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {buy_weighted_score:.3f})")
        logger.info(f"      –î–µ—Ç–∞–ª–∏: {[f'{d.model_name}({d.confidence:.3f}*{model_weights.get(d.model_name, 1.0):.3f})' for d in buy_votes]}")
        logger.info(f"   üî¥ SELL –≥–æ–ª–æ—Å–∞: {len(sell_votes)} (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {sell_weighted_score:.3f})")
        logger.info(f"      –î–µ—Ç–∞–ª–∏: {[f'{d.model_name}({d.confidence:.3f}*{model_weights.get(d.model_name, 1.0):.3f})' for d in sell_votes]}")
        logger.info(f"   ‚ö™ HOLD –≥–æ–ª–æ—Å–∞: {len(hold_votes)} (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {hold_weighted_score:.3f})")
        logger.info(f"      –î–µ—Ç–∞–ª–∏: {[f'{d.model_name}({d.confidence:.3f}*{model_weights.get(d.model_name, 1.0):.3f})' for d in hold_votes]}")
        logger.info(f"   üìä –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {self.config.min_consensus_models} –≥–æ–ª–æ—Å–æ–≤ –∏ {self.config.consensus_weight_threshold:.2f} –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        final_action = None
        consensus_strength = 0
        weighted_consensus_score = 0
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–º —Å—á–µ—Ç–æ–º
        max_score = max(buy_weighted_score, sell_weighted_score, hold_weighted_score)
        
        if max_score >= adaptive_thresholds['consensus_threshold']:
            if buy_weighted_score == max_score and len(buy_votes) >= self.config.min_consensus_models:
                final_action = 'BUY'
                consensus_strength = len(buy_votes)
                weighted_consensus_score = buy_weighted_score
                logger.info(f"‚úÖ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: BUY —Å {consensus_strength} –≥–æ–ª–æ—Å–∞–º–∏ (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {weighted_consensus_score:.3f})")
            elif sell_weighted_score == max_score and len(sell_votes) >= self.config.min_consensus_models:
                final_action = 'SELL'
                consensus_strength = len(sell_votes)
                weighted_consensus_score = sell_weighted_score
                logger.info(f"‚úÖ –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: SELL —Å {consensus_strength} –≥–æ–ª–æ—Å–∞–º–∏ (–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å—á–µ—Ç: {weighted_consensus_score:.3f})")
            else:
                logger.info(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {self.config.min_consensus_models}")
        else:
            logger.info(f"‚ùå –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –ù–ï –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç {max_score:.3f} < –ø–æ—Ä–æ–≥–∞ {adaptive_thresholds['consensus_threshold']:.3f}")
        
        if final_action:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
            participating_decisions = buy_votes if final_action == 'BUY' else sell_votes
            
            # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = —Å—É–º–º–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å * –≤–µ—Å –º–æ–¥–µ–ª–∏) / —Å—É–º–º–∞ –≤–µ—Å–æ–≤
            total_weighted_confidence = sum(d.confidence * model_weights.get(d.model_name, 1.0) for d in participating_decisions)
            total_weights = sum(model_weights.get(d.model_name, 1.0) for d in participating_decisions)
            confidence_avg = total_weighted_confidence / total_weights if total_weights > 0 else 0
            
            logger.info(f"üìä –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {confidence_avg:.3f}")
            logger.info(f"   –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞: {total_weighted_confidence:.3f} / {total_weights:.3f}")
            logger.info(f"   –£—á–∞—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏: {[f'{d.model_name}({d.confidence:.3f}*{model_weights.get(d.model_name, 1.0):.3f})' for d in participating_decisions]}")
            
            # üïê –ü–†–û–í–ï–†–ö–ê –°–û–ì–õ–ê–°–û–í–ê–ù–ù–û–°–¢–ò –¢–ê–ô–ú –§–†–ï–ô–ú–ê
            timeframe_analysis = self.validate_timeframe_consistency(data)
            if not timeframe_analysis['is_consistent']:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–∞–π–º —Ñ—Ä–µ–π–º–æ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}:")
                for issue in timeframe_analysis['issues']:
                    logger.warning(f"   - {issue}")
                logger.warning(f"   üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {timeframe_analysis['data_quality_score']:.1%}")
                
                # –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ, –æ—Ç–∫–ª–æ–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
                if timeframe_analysis['data_quality_score'] < 0.7:
                    logger.error(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö ({timeframe_analysis['data_quality_score']:.1%} < 70%)")
                    return None
            else:
                logger.info(f"‚úÖ –¢–∞–π–º —Ñ—Ä–µ–π–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω: {timeframe_analysis['interval_detected']}, –∫–∞—á–µ—Å—Ç–≤–æ {timeframe_analysis['data_quality_score']:.1%}")

            # üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –§–ò–õ–¨–¢–†–û–í
            logger.info(f"üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–û–í –¥–ª—è {symbol}:")
            logger.info(f"   üìä use_strict_filters: {self.config.use_strict_filters}")
            logger.info(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {confidence_avg:.3f}")
            logger.info(f"   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {adaptive_thresholds['min_confidence']:.3f}")
            logger.info(f"   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {adaptive_thresholds['min_volatility']:.3f}")

            # –ù–û–í–´–ï –§–ò–õ–¨–¢–†–´ –ö–ê–ß–ï–°–¢–í–ê –î–õ–Ø 60%+ –í–ò–ù–†–ï–ô–¢–ê
            if self.config.use_strict_filters:
                logger.info(f"üö® –ü–†–ò–ú–ï–ù–Ø–ï–ú –°–¢–†–û–ì–ò–ï –§–ò–õ–¨–¢–†–´ (use_strict_filters=True)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–∞–¥–∞–ø—Ç–∏–≤–Ω—É—é)
                if confidence_avg < adaptive_thresholds['min_confidence']:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence_avg:.3f} < {adaptive_thresholds['min_confidence']:.3f} (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥)")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞")
                    return None
                else:
                    logger.info(f"‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {confidence_avg:.3f} >= {adaptive_thresholds['min_confidence']:.3f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)
                trend_strength = self.calculate_trend_strength(data)
                logger.info(f"   üìä –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {trend_strength:.3f} ({trend_strength*100:.1f}%)")
                logger.info(f"   üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {self.config.min_trend_strength} ({self.config.min_trend_strength*100:.1f}%)")
                
                if trend_strength < self.config.min_trend_strength:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ {trend_strength:.3f} ({trend_strength*100:.1f}%) < {self.config.min_trend_strength} ({self.config.min_trend_strength*100:.1f}%)")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –°–ª–∞–±—ã–π —Ç—Ä–µ–Ω–¥")
                    logger.info(f"üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü–æ—Ä–æ–≥ {self.config.min_trend_strength*100:.1f}% –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –≤ –±–æ–∫–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö")
                    return None
                else:
                    logger.info(f"‚úÖ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {trend_strength:.3f} ({trend_strength*100:.1f}%) >= {self.config.min_trend_strength} ({self.config.min_trend_strength*100:.1f}%)")
                    logger.info(f"üìà –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å–∏–ª–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é")
                
                # üî• –ù–û–í–´–ô –§–ò–õ–¨–¢–†: HH/LL –∞–Ω–∞–ª–∏–∑ —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞
                hhll_analysis = self.detect_hhll_pattern(data)
                market_phase = hhll_analysis['market_phase']
                pattern_confidence = hhll_analysis['pattern_confidence']
                
                logger.info(f"   üìä –§–∞–∑–∞ —Ä—ã–Ω–∫–∞: {market_phase}")
                logger.info(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ: {pattern_confidence:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞–ª–∞ —Ñ–∞–∑–µ —Ä—ã–Ω–∫–∞
                phase_match = False
                if final_action == 'BUY' and market_phase in ['UPTREND', 'SIDEWAYS']:
                    phase_match = True
                elif final_action == 'SELL' and market_phase in ['DOWNTREND', 'SIDEWAYS']:
                    phase_match = True
                
                if not phase_match:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: {final_action} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–∑–µ —Ä—ã–Ω–∫–∞ {market_phase}")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∞–∑–µ —Ä—ã–Ω–∫–∞")
                    return None
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–±–∏—Ç–∏—è —É—Ä–æ–≤–Ω–µ–π
                if final_action == 'BUY' and hhll_analysis['hh_broken']:
                    logger.info(f"üöÄ –£–°–ò–õ–ï–ù–ù–´–ô BUY —Å–∏–≥–Ω–∞–ª: –ø—Ä–æ–±–∏—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ {hhll_analysis['last_hh_price']:.4f}")
                    confidence_avg *= 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 20%
                elif final_action == 'SELL' and hhll_analysis['ll_broken']:
                    logger.info(f"üìâ –£–°–ò–õ–ï–ù–ù–´–ô SELL —Å–∏–≥–Ω–∞–ª: –ø—Ä–æ–±–∏—Ç–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–∏–Ω–∏–º—É–º–∞ {hhll_analysis['last_ll_price']:.4f}")
                    confidence_avg *= 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 20%
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
                if pattern_confidence < 0.3:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ HH/LL –ø–∞—Ç—Ç–µ—Ä–Ω–µ {pattern_confidence:.2f} < 0.3")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ")
                    return None
                
                logger.info(f"‚úÖ HH/LL —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–π–¥–µ–Ω: —Ñ–∞–∑–∞={market_phase}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={pattern_confidence:.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–∞–¥–∞–ø—Ç–∏–≤–Ω—É—é)
                volatility = self._calculate_volatility(data)
                logger.info(f"   üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {volatility:.3f}%")
                if volatility < adaptive_thresholds['min_volatility']:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility:.3f}% < {adaptive_thresholds['min_volatility']:.3f}% (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥)")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞
                volume_spike = self.calculate_volume_spike(data)
                logger.info(f"   üìä –í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞: {volume_spike:.3f}")
                if volume_spike < self.config.min_volume_spike:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞ {volume_spike:.3f} < {self.config.min_volume_spike}")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º (—Å—Ç–∞—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                volume_ratio = self._calculate_volume_ratio(data)
                logger.info(f"   üìä –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞: {volume_ratio:.3f}")
                if volume_ratio < self.config.min_volume_ratio:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: –æ–±—ä–µ–º {volume_ratio:.3f} < {self.config.min_volume_ratio}")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º")
                    return None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é
                rsi_divergence = self.calculate_rsi_divergence(data)
                logger.info(f"   üìä RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: {rsi_divergence:.1f}")
                if abs(rsi_divergence) < self.config.min_rsi_divergence:
                    logger.error(f"‚ùå –°–ò–ì–ù–ê–õ –û–¢–ö–õ–û–ù–ï–ù: RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è {rsi_divergence:.1f} < {self.config.min_rsi_divergence}")
                    logger.error(f"   üîç –ü–†–ò–ß–ò–ù–ê –û–¢–ö–õ–û–ù–ï–ù–ò–Ø: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è RSI –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è")
                    return None
                
                logger.info(f"‚úÖ –í—Å–µ —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã: —Ç—Ä–µ–Ω–¥={trend_strength:.3f}, HH/LL={market_phase}({pattern_confidence:.2f}), –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å={volatility:.1f}%, –æ–±—ä–µ–º={volume_ratio:.2f}, –≤—Å–ø–ª–µ—Å–∫_–æ–±—ä–µ–º–∞={volume_spike:.2f}, RSI={rsi_divergence:.1f}")
            else:
                logger.info(f"üü¢ –°–¢–†–û–ì–ò–ï –§–ò–õ–¨–¢–†–´ –û–¢–ö–õ–Æ–ß–ï–ù–´ (use_strict_filters=False) - –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–∏–≥–Ω–∞–ª –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
                logger.info(f"   üìä –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence_avg:.3f}, –∫–æ–Ω—Å–µ–Ω—Å—É—Å={consensus_strength} –º–æ–¥–µ–ª–µ–π")
            
            logger.info(f"üéØ –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª {final_action} –¥–ª—è {symbol}: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence_avg*100:.1f}%, —Å–∏–ª–∞={consensus_strength}")
            
            return ConsensusSignal(
                symbol=symbol,
                timestamp=timestamp,
                price=current_price,
                final_action=final_action,
                consensus_strength=consensus_strength,
                participating_models=model_decisions,
                confidence_avg=confidence_avg
            )
        
        return None

    def calculate_rsi(self, data: pd.DataFrame, period: int = 14) -> pd.Series:
        """–†–∞—Å—á–µ—Ç RSI (Relative Strength Index)"""
        delta = data['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    def calculate_trend_strength(self, data: pd.DataFrame, period: int = 20) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ EMA –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if len(data) < period:
            logger.debug(f"üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—Ä–µ–Ω–¥–∞: {len(data)} < {period}")
            return 0.0
        
        ema_short = data['close'].ewm(span=period//2).mean()
        ema_long = data['close'].ewm(span=period).mean()
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        trend_direction = (ema_short.iloc[-1] - ema_long.iloc[-1]) / ema_long.iloc[-1]
        
        # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
        price_changes = data['close'].pct_change().dropna()
        trend_consistency = abs(price_changes.mean() / price_changes.std()) if price_changes.std() > 0 else 0
        
        trend_strength = min(abs(trend_direction) * trend_consistency * 100, 1.0)
        
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if self.config.debug_mode:
            logger.info(f"üìä –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞:")
            logger.info(f"   üìà EMA –∫–æ—Ä–æ—Ç–∫–∞—è ({period//2}): {ema_short.iloc[-1]:.4f}")
            logger.info(f"   üìâ EMA –¥–ª–∏–Ω–Ω–∞—è ({period}): {ema_long.iloc[-1]:.4f}")
            logger.info(f"   üéØ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞: {trend_direction:.4f} ({trend_direction*100:.2f}%)")
            logger.info(f"   üìä –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–¥–∞: {trend_consistency:.4f}")
            logger.info(f"   üí™ –ò—Ç–æ–≥–æ–≤–∞—è —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {trend_strength:.4f} ({trend_strength*100:.1f}%)")
        
        return trend_strength

    def calculate_volume_spike(self, data: pd.DataFrame, period: int = 20) -> float:
        """–†–∞—Å—á–µ—Ç –≤—Å–ø–ª–µ—Å–∫–∞ –æ–±—ä–µ–º–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–µ–¥–Ω–µ–≥–æ"""
        if len(data) < period:
            return 1.0
        
        avg_volume = data['volume'].rolling(window=period).mean()
        current_volume = data['volume'].iloc[-1]
        volume_spike = current_volume / avg_volume.iloc[-1] if avg_volume.iloc[-1] > 0 else 1.0
        
        return volume_spike

    def calculate_rsi_divergence(self, data: pd.DataFrame, period: int = 14) -> float:
        """–†–∞—Å—á–µ—Ç –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏ RSI —Å —Ü–µ–Ω–æ–π"""
        if len(data) < period * 2:
            return 0.0
        
        rsi = self.calculate_rsi(data, period)
        prices = data['close']
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –ø–∏–∫–∞/–≤–ø–∞–¥–∏–Ω—ã
        rsi_recent = rsi.iloc[-period:].max() - rsi.iloc[-period:].min()
        price_recent = prices.iloc[-period:].max() - prices.iloc[-period:].min()
        
        if price_recent == 0:
            return 0.0
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é
        price_change_pct = (prices.iloc[-1] - prices.iloc[-period]) / prices.iloc[-period] * 100
        rsi_change = rsi.iloc[-1] - rsi.iloc[-period]
        
        # –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è = —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
        divergence = abs(price_change_pct - rsi_change)
        
        return min(divergence, 50.0)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    def _calculate_volatility(self, data: pd.DataFrame, period: int = 20) -> float:
        """–†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö"""
        if len(data) < period:
            return 0.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã
        price_changes = data['close'].pct_change().dropna()
        if len(price_changes) < 2:
            return 0.0
        
        volatility = price_changes.rolling(window=min(period, len(price_changes))).std().iloc[-1]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        volatility_percent = volatility * 100 if not pd.isna(volatility) else 0.0
        
        return max(volatility_percent, 0.0)

    def _calculate_volume_ratio(self, data: pd.DataFrame, period: int = 20) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–º–∞ –∫ —Å—Ä–µ–¥–Ω–µ–º—É –æ–±—ä–µ–º—É"""
        if len(data) < period:
            return 1.0
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥
        avg_volume = data['volume'].rolling(window=period).mean().iloc[-1]
        current_volume = data['volume'].iloc[-1]
        
        if avg_volume <= 0:
            return 1.0
        
        volume_ratio = current_volume / avg_volume
        
        return max(volume_ratio, 0.0)

    async def _check_trading_volume_filter(self, symbol: str, timestamp: datetime) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω–µ–≤–Ω–æ–º –∏ —á–∞—Å–æ–≤–æ–º –æ–±—ä–µ–º–∞—Ö —Ç–æ—Ä–≥–æ–≤
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (–¥–Ω–µ–≤–Ω–æ–π –æ–±—ä–µ–º)
            daily_data = await self.data_collector.get_historical_data(
                symbol=symbol,
                interval='1d',
                limit=2  # –¢–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            hourly_data = await self.data_collector.get_historical_data(
                symbol=symbol,
                interval='1h',
                limit=2  # –¢–µ–∫—É—â–∏–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —á–∞—Å
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º—ã –≤ USDT
            daily_volume_usdt = 0.0
            hourly_volume_usdt = 0.0
            
            if len(daily_data) > 0:
                # –û–±—ä–µ–º –≤ USDT = –æ–±—ä–µ–º * —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (OHLC/4)
                latest_daily = daily_data.iloc[-1]
                avg_price_daily = (latest_daily['open'] + latest_daily['high'] + 
                                 latest_daily['low'] + latest_daily['close']) / 4
                daily_volume_usdt = latest_daily['volume'] * avg_price_daily
            
            if len(hourly_data) > 0:
                # –û–±—ä–µ–º –≤ USDT = –æ–±—ä–µ–º * —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (OHLC/4)
                latest_hourly = hourly_data.iloc[-1]
                avg_price_hourly = (latest_hourly['open'] + latest_hourly['high'] + 
                                  latest_hourly['low'] + latest_hourly['close']) / 4
                hourly_volume_usdt = latest_hourly['volume'] * avg_price_hourly
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            daily_passed = daily_volume_usdt >= self.config.min_daily_volume_usdt
            hourly_passed = hourly_volume_usdt >= self.config.min_hourly_volume_usdt
            
            filter_passed = daily_passed and hourly_passed
            
            return {
                'passed': filter_passed,
                'daily_volume_usdt': daily_volume_usdt,
                'hourly_volume_usdt': hourly_volume_usdt,
                'daily_passed': daily_passed,
                'hourly_passed': hourly_passed,
                'min_daily_required': self.config.min_daily_volume_usdt,
                'min_hourly_required': self.config.min_hourly_volume_usdt
            }
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ –¥–ª—è {symbol}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º True)
            return {
                'passed': True,
                'daily_volume_usdt': 0.0,
                'hourly_volume_usdt': 0.0,
                'daily_passed': False,
                'hourly_passed': False,
                'min_daily_required': self.config.min_daily_volume_usdt,
                'min_hourly_required': self.config.min_hourly_volume_usdt,
                'error': str(e)
            }

    def validate_timeframe_consistency(self, data: pd.DataFrame) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ç–∞–π–º —Ñ—Ä–µ–π–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if len(data) < 2:
                return {
                    'is_consistent': False,
                    'interval_detected': None,
                    'gaps_found': 0,
                    'issues': ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞']
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏
            time_diffs = data.index.to_series().diff().dropna()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            most_common_interval = time_diffs.mode().iloc[0] if len(time_diffs.mode()) > 0 else None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏
            expected_interval = most_common_interval
            gaps = time_diffs[time_diffs > expected_interval * 1.5] if expected_interval else pd.Series()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å (90% –∑–∞–ø–∏—Å–µ–π –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
            consistent_intervals = time_diffs[abs(time_diffs - expected_interval) <= pd.Timedelta(minutes=5)]
            consistency_rate = len(consistent_intervals) / len(time_diffs) if len(time_diffs) > 0 else 0
            
            is_consistent = consistency_rate >= 0.9 and len(gaps) <= len(data) * 0.05  # –ú–∞–∫—Å–∏–º—É–º 5% –ø—Ä–æ–ø—É—Å–∫–æ–≤
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            interval_str = "unknown"
            if expected_interval:
                if expected_interval <= pd.Timedelta(minutes=1):
                    interval_str = "1m"
                elif expected_interval <= pd.Timedelta(minutes=5):
                    interval_str = "5m"
                elif expected_interval <= pd.Timedelta(minutes=15):
                    interval_str = "15m"
                elif expected_interval <= pd.Timedelta(hours=1):
                    interval_str = "1h"
                elif expected_interval <= pd.Timedelta(hours=4):
                    interval_str = "4h"
                elif expected_interval <= pd.Timedelta(days=1):
                    interval_str = "1d"
                else:
                    interval_str = f"{expected_interval}"
            
            issues = []
            if consistency_rate < 0.9:
                issues.append(f"–ù–∏–∑–∫–∞—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {consistency_rate:.1%}")
            if len(gaps) > 0:
                issues.append(f"–ù–∞–π–¥–µ–Ω–æ {len(gaps)} –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö")
            
            result = {
                'is_consistent': is_consistent,
                'interval_detected': interval_str,
                'expected_interval': expected_interval,
                'consistency_rate': consistency_rate,
                'gaps_found': len(gaps),
                'total_records': len(data),
                'issues': issues,
                'data_quality_score': consistency_rate * (1 - len(gaps) / len(data)) if len(data) > 0 else 0
            }
            
            if self.config.debug_mode:
                logger.info(f"üïê –ê–Ω–∞–ª–∏–∑ —Ç–∞–π–º —Ñ—Ä–µ–π–º–∞:")
                logger.info(f"   üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_str}")
                logger.info(f"   ‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {consistency_rate:.1%}")
                logger.info(f"   üîç –ü—Ä–æ–ø—É—Å–∫–∏: {len(gaps)}")
                logger.info(f"   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {result['data_quality_score']:.1%}")
                if issues:
                    logger.warning(f"   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–∞–π–º —Ñ—Ä–µ–π–º–∞: {e}")
            return {
                'is_consistent': False,
                'interval_detected': None,
                'gaps_found': 0,
                'issues': [f'–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}']
            }
        
        return result

    def calculate_model_weights(self) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –≤–µ—Å–æ–≤ AI –º–æ–¥–µ–ª–µ–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ö–µ–º–æ–π: –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å 30%, –æ—Å—Ç–∞–ª—å–Ω—ã–µ 17.5%"""
        try:
            # üéØ –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–• –í–ï–°–û–í
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            best_model = self._find_best_performing_model()
            
            # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞: –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å 30%, –æ—Å—Ç–∞–ª—å–Ω—ã–µ 17.5%
            weights = {}
            for model_name in self.ai_models.keys():
                if model_name == best_model:
                    weights[model_name] = 0.3  # 30% –¥–ª—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
                else:
                    weights[model_name] = 0.175  # 17.5% –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –≤–µ—Å–æ–≤ —Ä–∞–≤–Ω–∞ 1.0
            total_weight = sum(weights.values())
            if abs(total_weight - 1.0) > 0.001:
                logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –≤–µ—Å–æ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 1.0: {total_weight}, –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º...")
                weights = {model: weight / total_weight for model, weight in weights.items()}
            
            if self.config.debug_mode:
                logger.info(f"üèÜ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ AI –º–æ–¥–µ–ª–µ–π (–ª—É—á—à–∞—è: {best_model}):")
                for model_name, weight in sorted(weights.items(), key=lambda x: x[1], reverse=True):
                    performance = self.ai_models_performance.get(model_name, {})
                    accuracy = performance.get('signal_accuracy', 0) * 100
                    contribution = performance.get('contribution_to_pnl', 0)
                    status = "üèÜ –õ–£–ß–®–ê–Ø" if model_name == best_model else "üìä –°–¢–ê–ù–î–ê–†–¢"
                    logger.info(f"   {model_name}: {weight:.3f} ({status}) - —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%, –≤–∫–ª–∞–¥: ${contribution:.2f}")
            
            return weights
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–≤–Ω—ã–µ –≤–µ—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            equal_weight = 1.0 / len(self.ai_models)
            return {model_name: equal_weight for model_name in self.ai_models.keys()}

    def _find_best_performing_model(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not self.ai_models_performance:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º trading_ai –∫–∞–∫ –±–∞–∑–æ–≤—É—é –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
                logger.info("üîÑ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º trading_ai –∫–∞–∫ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å")
                return 'trading_ai'
            
            best_model = None
            best_score = -float('inf')
            
            for model_name, performance in self.ai_models_performance.items():
                if performance['total_signals'] > 0:
                    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä: 50% –≤–∫–ª–∞–¥ –≤ –ø—Ä–∏–±—ã–ª—å + 30% —Ç–æ—á–Ω–æ—Å—Ç—å + 20% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    contribution_score = performance['contribution_to_pnl']
                    accuracy_score = performance['signal_accuracy'] * 10  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–º—É –∂–µ –º–∞—Å—à—Ç–∞–±—É
                    activity_score = min(performance['consensus_participation_rate'] / 100.0, 1.0) * 5
                    
                    combined_score = (contribution_score * 0.5) + (accuracy_score * 0.3) + (activity_score * 0.2)
                    
                    if combined_score > best_score:
                        best_score = combined_score
                        best_model = model_name
            
            if best_model is None:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º trading_ai
                best_model = 'trading_ai'
                logger.info("üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º trading_ai")
            else:
                logger.info(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model} (—Å–∫–æ—Ä: {best_score:.2f})")
            
            return best_model
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏: {e}")
            return 'trading_ai'  # Fallback

    def detect_hhll_pattern(self, data: pd.DataFrame, lookback_period: int = 20) -> Dict[str, Any]:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ Higher High/Lower Low –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∑—ã —Ä—ã–Ω–∫–∞
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ:
            - market_phase: 'UPTREND', 'DOWNTREND', 'SIDEWAYS'
            - hh_broken: bool - –ø—Ä–æ–±–∏—Ç –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞–∫—Å–∏–º—É–º
            - ll_broken: bool - –ø—Ä–æ–±–∏—Ç –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∏–Ω–∏–º—É–º
            - strength: float - —Å–∏–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (0-1)
            - last_hh_price: float - —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ HH
            - last_ll_price: float - —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ LL
        """
        if len(data) < lookback_period * 2:
            return {
                'market_phase': 'UNKNOWN',
                'hh_broken': False,
                'll_broken': False,
                'strength': 0.0,
                'last_hh_price': 0.0,
                'last_ll_price': 0.0,
                'pattern_confidence': 0.0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        highs = data['high'].values
        lows = data['low'].values
        closes = data['close'].values
        current_price = closes[-1]
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã
        local_highs = []
        local_lows = []
        
        # –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã —Å –æ–∫–Ω–æ–º –≤ 5 —Å–≤–µ—á–µ–π
        window = 5
        for i in range(window, len(highs) - window):
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º
            if all(highs[i] >= highs[i-j] for j in range(1, window+1)) and \
               all(highs[i] >= highs[i+j] for j in range(1, window+1)):
                local_highs.append((i, highs[i]))
            
            # –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º
            if all(lows[i] <= lows[i-j] for j in range(1, window+1)) and \
               all(lows[i] <= lows[i+j] for j in range(1, window+1)):
                local_lows.append((i, lows[i]))
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        recent_highs = local_highs[-min(4, len(local_highs)):] if local_highs else []
        recent_lows = local_lows[-min(4, len(local_lows)):] if local_lows else []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω HH/LL
        market_phase = 'SIDEWAYS'
        hh_count = 0
        ll_count = 0
        pattern_strength = 0.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Higher Highs
        if len(recent_highs) >= 2:
            for i in range(1, len(recent_highs)):
                if recent_highs[i][1] > recent_highs[i-1][1]:
                    hh_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Lower Lows
        if len(recent_lows) >= 2:
            for i in range(1, len(recent_lows)):
                if recent_lows[i][1] < recent_lows[i-1][1]:
                    ll_count += 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∑—É —Ä—ã–Ω–∫–∞
        total_extremums = len(recent_highs) + len(recent_lows)
        if total_extremums > 0:
            if hh_count >= 2 and ll_count == 0:
                market_phase = 'UPTREND'
                pattern_strength = min(hh_count / 3.0, 1.0)
            elif ll_count >= 2 and hh_count == 0:
                market_phase = 'DOWNTREND'
                pattern_strength = min(ll_count / 3.0, 1.0)
            else:
                market_phase = 'SIDEWAYS'
                pattern_strength = 0.3  # –ë–æ–∫–æ–≤–æ–π —Ç—Ä–µ–Ω–¥ –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —Å–∏–ª—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–∏—Ç–∏—è —É—Ä–æ–≤–Ω–µ–π
        last_hh_price = recent_highs[-1][1] if recent_highs else 0.0
        last_ll_price = recent_lows[-1][1] if recent_lows else 0.0
        
        hh_broken = current_price > last_hh_price if last_hh_price > 0 else False
        ll_broken = current_price < last_ll_price if last_ll_price > 0 else False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ
        pattern_confidence = 0.0
        if market_phase == 'UPTREND':
            pattern_confidence = min(0.8, 0.2 + (hh_count * 0.2))
        elif market_phase == 'DOWNTREND':
            pattern_confidence = min(0.8, 0.2 + (ll_count * 0.2))
        else:
            pattern_confidence = 0.3
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if self.config.debug_mode:
            logger.info(f"üìä HH/LL –ê–Ω–∞–ª–∏–∑:")
            logger.info(f"   üìà –§–∞–∑–∞ —Ä—ã–Ω–∫–∞: {market_phase}")
            logger.info(f"   üî∫ Higher Highs: {hh_count}, –ø–æ—Å–ª–µ–¥–Ω–∏–π HH: {last_hh_price:.4f}")
            logger.info(f"   üîª Lower Lows: {ll_count}, –ø–æ—Å–ª–µ–¥–Ω–∏–π LL: {last_ll_price:.4f}")
            logger.info(f"   üí• –ü—Ä–æ–±–∏—Ç–∏–µ HH: {hh_broken}, –ø—Ä–æ–±–∏—Ç–∏–µ LL: {ll_broken}")
            logger.info(f"   üí™ –°–∏–ª–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {pattern_strength:.2f}")
            logger.info(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pattern_confidence:.2f}")
        
        return {
            'market_phase': market_phase,
            'hh_broken': hh_broken,
            'll_broken': ll_broken,
            'strength': pattern_strength,
            'last_hh_price': last_hh_price,
            'last_ll_price': last_ll_price,
            'pattern_confidence': pattern_confidence,
            'hh_count': hh_count,
            'll_count': ll_count
        }

    def calculate_adaptive_thresholds(self, data: pd.DataFrame, symbol: str) -> Dict[str, float]:
        """–†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            base_confidence = self.config.min_confidence
            base_volatility = self.config.min_volatility
            base_consensus = self.config.consensus_weight_threshold
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            current_volatility = self._calculate_volatility(data)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ (–¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤–∞–∂–Ω–æ)
            current_hour = get_utc_now().hour
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            volatility_factor = 1.0
            time_factor = 1.0
            
            # üìà –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨: –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –ø–æ—Ä–æ–≥–∏
            if current_volatility > 2.0:  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volatility_factor = 1.4  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 40%
                logger.info(f"üî• –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {current_volatility:.1f}% - —É–∂–µ—Å—Ç–æ—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 40%")
            elif current_volatility > 1.0:  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volatility_factor = 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 20%
                logger.info(f"üìä –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {current_volatility:.1f}% - —É–∂–µ—Å—Ç–æ—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 20%")
            elif current_volatility < 0.5:  # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                volatility_factor = 0.8  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 20%
                logger.info(f"üò¥ –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {current_volatility:.1f}% - —Å–º—è–≥—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 20%")
            
            # ‚è∞ –í–†–ï–ú–Ø –°–£–¢–û–ö: –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
            if 8 <= current_hour <= 16:  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è/–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                time_factor = 0.9  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 10% (–±–æ–ª—å—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)
                logger.info(f"üåÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è ({current_hour}:00) - —Å–º—è–≥—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 10%")
            elif 22 <= current_hour or current_hour <= 2:  # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è
                time_factor = 1.1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 10% (–º–µ–Ω—å—à–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)
                logger.info(f"üåô –¢–∏—Ö–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è ({current_hour}:00) - —É–∂–µ—Å—Ç–æ—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 10%")
            
            # üí∞ –°–ò–ú–í–û–õ-–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò
            symbol_factor = 1.0
            if symbol in ['BTCUSDT', 'ETHUSDT']:  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                symbol_factor = 0.95  # –ù–µ–º–Ω–æ–≥–æ —Å–º—è–≥—á–∞–µ–º –ø–æ—Ä–æ–≥–∏
                logger.info(f"‚Çø –û—Å–Ω–æ–≤–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {symbol} - —Å–º—è–≥—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 5%")
            elif 'USDT' not in symbol:  # –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—ã
                symbol_factor = 1.15  # –£–∂–µ—Å—Ç–æ—á–∞–µ–º –ø–æ—Ä–æ–≥–∏
                logger.info(f"üî∏ –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—Ä–∞ {symbol} - —É–∂–µ—Å—Ç–æ—á–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 15%")
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            combined_factor = volatility_factor * time_factor * symbol_factor
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
            adaptive_confidence = max(base_confidence * combined_factor, 0.08)  # –ú–∏–Ω–∏–º—É–º 8%
            adaptive_volatility = max(base_volatility * combined_factor, 0.2)   # –ú–∏–Ω–∏–º—É–º 0.2%
            adaptive_consensus = max(base_consensus * combined_factor, 0.10)    # –ú–∏–Ω–∏–º—É–º 10%
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            adaptive_confidence = min(adaptive_confidence, 0.25)  # –ú–∞–∫—Å–∏–º—É–º 25%
            adaptive_volatility = min(adaptive_volatility, 1.0)   # –ú–∞–∫—Å–∏–º—É–º 1.0%
            adaptive_consensus = min(adaptive_consensus, 0.30)    # –ú–∞–∫—Å–∏–º—É–º 30%
            
            logger.info(f"üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è {symbol}:")
            logger.info(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {base_confidence:.3f} ‚Üí {adaptive_confidence:.3f} (—Ñ–∞–∫—Ç–æ—Ä: {combined_factor:.2f})")
            logger.info(f"   üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {base_volatility:.3f} ‚Üí {adaptive_volatility:.3f}")
            logger.info(f"   ü§ù –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {base_consensus:.3f} ‚Üí {adaptive_consensus:.3f}")
            
            return {
                'min_confidence': adaptive_confidence,
                'min_volatility': adaptive_volatility,
                'consensus_threshold': adaptive_consensus,
                'volatility_factor': volatility_factor,
                'time_factor': time_factor,
                'symbol_factor': symbol_factor,
                'combined_factor': combined_factor
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return {
                'min_confidence': self.config.min_confidence,
                'min_volatility': self.config.min_volatility,
                'consensus_threshold': self.config.consensus_weight_threshold,
                'volatility_factor': 1.0,
                'time_factor': 1.0,
                'symbol_factor': 1.0,
                'combined_factor': 1.0
            }

    def analyze_best_trading_hours(self, data: pd.DataFrame) -> List[int]:
        """–ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö —á–∞—Å–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å –∫ –¥–∞–Ω–Ω—ã–º
            data_with_hour = data.copy()
            data_with_hour['hour'] = pd.to_datetime(data_with_hour.index).hour
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
            hourly_returns = {}
            excluded_hours = []
            
            for hour in range(24):
                hour_data = data_with_hour[data_with_hour['hour'] == hour]
                if len(hour_data) >= 3:  # –°–Ω–∏–∂–µ–Ω–æ —Å 10 –¥–æ 3 –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –æ–±—ä–µ–º
                    volatility = hour_data['close'].pct_change().std() * 100
                    volume_ratio = hour_data['volume'].mean() / data['volume'].mean()
                    
                    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å * –æ–±—ä–µ–º
                    score = volatility * volume_ratio
                    hourly_returns[hour] = {
                        'score': score,
                        'volatility': volatility,
                        'volume_ratio': volume_ratio,
                        'data_points': len(hour_data)
                    }
                else:
                    excluded_hours.append((hour, len(hour_data)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –ø–æ —Å–∫–æ—Ä—É –∏ –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ø-6
            sorted_hours = sorted(hourly_returns.items(), key=lambda x: x[1]['score'], reverse=True)
            best_hours = [hour for hour, _ in sorted_hours[:6]]
            
            # Fallback: –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if not best_hours:
                logger.warning(f"‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —á–∞—Å–æ–≤ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                best_hours = [8, 9, 10, 13, 14, 15]
            
            if self.config.debug_mode:
                logger.info(f"üïê –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö —á–∞—Å–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏:")
                logger.info(f"üìä –í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                if excluded_hours:
                    logger.info(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Å—ã (< 3 —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö): {excluded_hours}")
                for i, (hour, stats) in enumerate(sorted_hours[:10]):
                    logger.info(f"  {i+1}. –ß–∞—Å {hour:02d}: —Å–∫–æ—Ä={stats['score']:.3f}, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å={stats['volatility']:.3f}%, –æ–±—ä–µ–º={stats['volume_ratio']:.2f}x, —Ç–æ—á–µ–∫={stats['data_points']}")
                logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ª—É—á—à–∏–µ —á–∞—Å—ã: {sorted(best_hours)}")
            
            return sorted(best_hours)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ª—É—á—à–∏—Ö —á–∞—Å–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return [8, 9, 10, 13, 14, 15]

    def is_trading_hour_allowed(self, timestamp: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ —Ç–æ—Ä–≥–æ–≤–ª—è –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Å"""
        if not self.config.use_time_filter:
            return True
        
        hour = timestamp.hour
        return hour in self.config.trading_hours

    async def get_ai_signals(self, symbol: str, data: pd.DataFrame) -> List[ConsensusSignal]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π"""
        consensus_signals = []
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        total_signal_requests = 0
        total_valid_signals = 0
        total_hold_signals = 0
        total_consensus_attempts = 0
        total_successful_consensus = 0
        
        try:
            logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö AI —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –æ—Ç {len(self.ai_models)} –º–æ–¥–µ–ª–µ–π...")
            logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏: min_consensus_models={self.config.min_consensus_models}, min_confidence={self.config.min_confidence*100:.1f}%")
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –¥–∞–Ω–Ω—ã–º –∏ –ø–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            step_size = 6  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª—ã –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ (—É–≤–µ–ª–∏—á–µ–Ω–æ —Å 24 –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤)
            min_history = min(20, len(data) // 2)  # –ú–∏–Ω–∏–º—É–º 20 –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
            
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –î–∞–Ω–Ω—ã—Ö: {len(data)}, –Ω–∞—á–∏–Ω–∞–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞ {min_history}, —à–∞–≥ {step_size}")
            
            for i in range(min_history, len(data), step_size):  # –ù–∞—á–∏–Ω–∞–µ–º —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
                current_data = data.iloc[:i+1].copy()
                current_timestamp = pd.to_datetime(current_data.index[-1])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏
                if not self.is_trading_hour_allowed(current_timestamp):
                    if self.config.debug_mode:
                        logger.debug(f"‚è∞ –ü—Ä–æ–ø—É—Å–∫ —Å–∏–≥–Ω–∞–ª–∞ –≤ {current_timestamp.hour:02d}:00 - —á–∞—Å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
                    continue
                
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                if not all(col in current_data.columns for col in ['open', 'high', 'low', 'close', 'volume']):
                    logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π
                model_decisions = []
                signals_by_action = {'BUY': [], 'SELL': [], 'HOLD': []}
                
                logger.info(f"üìä –ó–∞–ø—Ä–æ—Å —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ {current_data.index[-1]}")
                
                for model_name in self.config.enabled_ai_models:
                    total_signal_requests += 1
                    if model_name in self.ai_models:
                        decision = await self.get_individual_ai_signal(model_name, symbol, current_data)
                        if decision:
                            model_decisions.append(decision)
                            signals_by_action[decision.action].append(decision)
                            total_valid_signals += 1
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            self.ai_models_performance[model_name]['total_signals'] += 1
                            self.ai_models_performance[model_name]['total_confidence'] += decision.confidence
                            self.ai_models_performance[model_name]['confidence_count'] += 1  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å—á–µ—Ç—á–∏–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            logger.info(f"‚úÖ {model_name}: {decision.action} (confidence: {decision.confidence:.3f})")
                        else:
                            total_hold_signals += 1
                            logger.info(f"‚ùå {model_name}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ (HOLD –∏–ª–∏ –æ—à–∏–±–∫–∞)")
                    else:
                        logger.warning(f"‚ö†Ô∏è {model_name}: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ai_models")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
                logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}:")
                logger.info(f"   üü¢ BUY —Å–∏–≥–Ω–∞–ª—ã: {len(signals_by_action['BUY'])} ({[d.model_name for d in signals_by_action['BUY']]})")
                logger.info(f"   üî¥ SELL —Å–∏–≥–Ω–∞–ª—ã: {len(signals_by_action['SELL'])} ({[d.model_name for d in signals_by_action['SELL']]})")
                logger.info(f"   ‚ö™ HOLD —Å–∏–≥–Ω–∞–ª—ã: {len(signals_by_action['HOLD'])} ({[d.model_name for d in signals_by_action['HOLD']]})")
                logger.info(f"   üìä –í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(model_decisions)}/{len(self.config.enabled_ai_models)}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
                total_consensus_attempts += 1
                consensus = await self.create_consensus_signal(symbol, current_data, model_decisions)
                if consensus:
                    consensus_signals.append(consensus)
                    total_successful_consensus += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
                    for decision in consensus.participating_models:
                        self.ai_models_performance[decision.model_name]['consensus_participations'] += 1  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    
                    logger.info(f"üéØ –ö–û–ù–°–ï–ù–°–£–° –î–û–°–¢–ò–ì–ù–£–¢! {consensus.final_action} –¥–ª—è {symbol}: {consensus.consensus_strength}/{len(model_decisions)} –º–æ–¥–µ–ª–µ–π —Å–æ–≥–ª–∞—Å–Ω—ã (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {consensus.confidence_avg:.2%})")
                else:
                    logger.info(f"‚ùå –ö–æ–Ω—Å–µ–Ω—Å—É—Å –ù–ï –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {self.config.min_consensus_models})")
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logger.info(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¥–ª—è {symbol}:")
            logger.info(f"   üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signal_requests}")
            logger.info(f"   ‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {total_valid_signals}")
            logger.info(f"   ‚ö™ HOLD/–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {total_hold_signals}")
            logger.info(f"   ü§ù –ü–æ–ø—ã—Ç–æ–∫ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {total_consensus_attempts}")
            logger.info(f"   üéØ –£—Å–ø–µ—à–Ω—ã—Ö –∫–æ–Ω—Å–µ–Ω—Å—É—Å–æ–≤: {total_successful_consensus}")
            logger.info(f"   üìà –ò—Ç–æ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {len(consensus_signals)}")
            
            return consensus_signals
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö AI —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
    
    async def simulate_trading(self, symbol: str, data: pd.DataFrame, signals: List[ConsensusSignal]) -> List[TradeResult]:
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI —Å–∏–≥–Ω–∞–ª–æ–≤"""
        trades = []
        current_position = None
        balance = self.config.start_balance
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI –º–æ–¥–µ–ª–µ–π
        ai_performance = {}
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filter_stats = {
            'total_signals': 0,
            'confidence_filtered': 0,
            'volatility_filtered': 0,
            'volume_filtered': 0,
            'trading_volume_filtered': 0,
            'rsi_filtered': 0,
            'consensus_filtered': 0,
            'position_blocked': 0,
            'trades_opened': 0
        }
        
        try:
            logger.info(f"üíπ –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}...")
            if self.config.debug_mode:
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            for consensus_signal in signals:
                signal_time = consensus_signal.timestamp
                action = consensus_signal.final_action
                confidence = consensus_signal.confidence_avg
                signal_price = consensus_signal.price
                consensus_strength = consensus_signal.consensus_strength
                participating_models = consensus_signal.participating_models
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
                if current_position:
                    # –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–∏—Å–∫–∞–º–∏
                    time_diff = (signal_time - current_position['entry_time']).total_seconds() / 3600
                    entry_price = current_position['entry_price']
                    direction = current_position['direction']
                    
                    should_close = False
                    exit_reason = ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–µ—Ç–∫–∏)
                    if direction == 'LONG':
                        price_change = (signal_price - entry_price) / entry_price
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –¥–ª—è trailing stop
                        if price_change > current_position['highest_profit']:
                            current_position['highest_profit'] = price_change
                        
                        # –õ–æ–≥–∏–∫–∞ trailing stop
                        if self.config.use_trailing_stop:
                            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing stop –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–∏–±—ã–ª–∏
                            if not current_position['trailing_stop_active'] and price_change >= self.config.trailing_stop_activation_percent:
                                current_position['trailing_stop_active'] = True
                                current_position['trailing_stop_price'] = signal_price * (1 - self.config.trailing_stop_distance_percent)
                                if self.config.debug_mode:
                                    logger.info(f"üîÑ Trailing Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è {symbol} –Ω–∞ —É—Ä–æ–≤–Ω–µ {current_position['trailing_stop_price']:.6f} (–ø—Ä–∏–±—ã–ª—å: {price_change*100:.2f}%)")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã
                            elif current_position['trailing_stop_active']:
                                new_trailing_stop = signal_price * (1 - self.config.trailing_stop_distance_percent)
                                if new_trailing_stop > current_position['trailing_stop_price']:
                                    old_stop = current_position['trailing_stop_price']
                                    current_position['trailing_stop_price'] = new_trailing_stop
                                    if self.config.debug_mode:
                                        logger.info(f"üìà Trailing Stop –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {symbol}: {old_stop:.6f} ‚Üí {new_trailing_stop:.6f}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ trailing stop
                                if signal_price <= current_position['trailing_stop_price']:
                                    should_close = True
                                    exit_reason = "trailing_stop"
                                    if self.config.debug_mode:
                                        logger.info(f"üõë Trailing Stop —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {symbol} –Ω–∞ —Ü–µ–Ω–µ {signal_price:.6f}")
                        
                        # –û–±—ã—á–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å (–µ—Å–ª–∏ trailing stop –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
                        if not should_close and price_change <= -self.config.stop_loss_percent:  # –°—Ç–æ–ø-–ª–æ—Å—Å
                            should_close = True
                            exit_reason = "stop_loss"
                        elif self.config.use_take_profit_grid and self.config.take_profit_levels:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∫—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º
                            if 'tp_levels_hit' not in current_position:
                                current_position['tp_levels_hit'] = []
                            
                            for i, tp_level in enumerate(self.config.take_profit_levels):
                                if price_change >= tp_level and i not in current_position['tp_levels_hit']:
                                    # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å TP
                                    current_position['tp_levels_hit'].append(i)
                                    tp_portion = self.config.take_profit_portions[i] if i < len(self.config.take_profit_portions) else 0.25
                                    
                                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è TP
                                    logger.info(f"üéØ TP{i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è {symbol}: —Ü–µ–Ω–∞ {signal_price:.6f}, —É—Ä–æ–≤–µ–Ω—å {tp_level*100:.1f}%, –∑–∞–∫—Ä—ã–≤–∞–µ–º {tp_portion*100:.0f}% –ø–æ–∑–∏—Ü–∏–∏")
                                    
                                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ 100% –∑–∞–∫—Ä—ã—Ç–∏—è
                                    total_closed = sum(self.config.take_profit_portions[:len(current_position['tp_levels_hit'])])
                                    if total_closed >= 1.0 or i == len(self.config.take_profit_levels) - 1:
                                        should_close = True
                                        exit_reason = f"take_profit_grid_complete"
                                        logger.info(f"üèÅ –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} –ø–æ —Å–µ—Ç–∫–µ TP (–∑–∞–∫—Ä—ã—Ç–æ {total_closed*100:.0f}%)")
                                        break
                                    else:
                                        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ partial_exits
                                        if 'partial_exits' not in current_position:
                                            current_position['partial_exits'] = []
                                        
                                        partial_exit = {
                                            'level': i + 1,
                                            'price': signal_price,
                                            'portion': tp_portion,
                                            'timestamp': signal_time,
                                            'price_change_percent': price_change * 100,
                                            'reason': f'take_profit_grid_{i+1}'
                                        }
                                        current_position['partial_exits'].append(partial_exit)
                                        logger.info(f"üìä –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ TP{i+1}: {tp_portion*100:.0f}% –ø–æ —Ü–µ–Ω–µ {signal_price:.6f} (+{price_change*100:.2f}%)")
                            
                            # –ï—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
                            if not should_close:
                                continue
                        else:
                            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            dynamic_take_profit = self.config.take_profit_percent
                            if confidence > 0.7:  # –í—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                                dynamic_take_profit = 0.030  # 3.0% –¥–ª—è –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            
                            if price_change >= dynamic_take_profit:
                                should_close = True
                                exit_reason = f"take_profit_{'high_conf' if confidence > 0.7 else 'normal'}"
                    else:  # SHORT
                        price_change = (entry_price - signal_price) / entry_price
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –¥–ª—è trailing stop (–¥–ª—è SHORT —ç—Ç–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞)
                        if price_change > current_position['lowest_profit']:
                            current_position['lowest_profit'] = price_change
                        
                        # –õ–æ–≥–∏–∫–∞ trailing stop –¥–ª—è SHORT
                        if self.config.use_trailing_stop:
                            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º trailing stop –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–∏–±—ã–ª–∏
                            if not current_position['trailing_stop_active'] and price_change >= self.config.trailing_stop_activation_percent:
                                current_position['trailing_stop_active'] = True
                                current_position['trailing_stop_price'] = signal_price * (1 + self.config.trailing_stop_distance_percent)
                                if self.config.debug_mode:
                                    logger.info(f"üîÑ Trailing Stop –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è SHORT {symbol} –Ω–∞ —É—Ä–æ–≤–Ω–µ {current_position['trailing_stop_price']:.6f} (–ø—Ä–∏–±—ã–ª—å: {price_change*100:.2f}%)")
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º trailing stop –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã (–¥–ª—è SHORT)
                            elif current_position['trailing_stop_active']:
                                new_trailing_stop = signal_price * (1 + self.config.trailing_stop_distance_percent)
                                if new_trailing_stop < current_position['trailing_stop_price']:
                                    old_stop = current_position['trailing_stop_price']
                                    current_position['trailing_stop_price'] = new_trailing_stop
                                    if self.config.debug_mode:
                                        logger.info(f"üìâ Trailing Stop –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è SHORT {symbol}: {old_stop:.6f} ‚Üí {new_trailing_stop:.6f}")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ trailing stop –¥–ª—è SHORT
                                if signal_price >= current_position['trailing_stop_price']:
                                    should_close = True
                                    exit_reason = "trailing_stop"
                                    if self.config.debug_mode:
                                        logger.info(f"üõë Trailing Stop —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è SHORT {symbol} –Ω–∞ —Ü–µ–Ω–µ {signal_price:.6f}")
                        
                        # –û–±—ã—á–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å (–µ—Å–ª–∏ trailing stop –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
                        if not should_close and price_change <= -self.config.stop_loss_percent:  # –°—Ç–æ–ø-–ª–æ—Å—Å
                            should_close = True
                            exit_reason = "stop_loss"
                        elif self.config.use_take_profit_grid and self.config.take_profit_levels:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∫—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤ —Å —á–∞—Å—Ç–∏—á–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º (–¥–ª—è SHORT)
                            if 'tp_levels_hit' not in current_position:
                                current_position['tp_levels_hit'] = []
                            
                            for i, tp_level in enumerate(self.config.take_profit_levels):
                                if price_change >= tp_level and i not in current_position['tp_levels_hit']:
                                    # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å TP
                                    current_position['tp_levels_hit'].append(i)
                                    tp_portion = self.config.take_profit_portions[i] if i < len(self.config.take_profit_portions) else 0.25
                                    
                                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è TP
                                    logger.info(f"üéØ TP{i+1} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–ª—è SHORT {symbol}: —Ü–µ–Ω–∞ {signal_price:.6f}, —É—Ä–æ–≤–µ–Ω—å {tp_level*100:.1f}%, –∑–∞–∫—Ä—ã–≤–∞–µ–º {tp_portion*100:.0f}% –ø–æ–∑–∏—Ü–∏–∏")
                                    
                                    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ 100% –∑–∞–∫—Ä—ã—Ç–∏—è
                                    total_closed = sum(self.config.take_profit_portions[:len(current_position['tp_levels_hit'])])
                                    if total_closed >= 1.0 or i == len(self.config.take_profit_levels) - 1:
                                        should_close = True
                                        exit_reason = f"take_profit_grid_complete"
                                        logger.info(f"üèÅ –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ SHORT –ø–æ–∑–∏—Ü–∏–∏ {symbol} –ø–æ —Å–µ—Ç–∫–µ TP (–∑–∞–∫—Ä—ã—Ç–æ {total_closed*100:.0f}%)")
                                        break
                                    else:
                                        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ partial_exits
                                        if 'partial_exits' not in current_position:
                                            current_position['partial_exits'] = []
                                        
                                        partial_exit = {
                                            'level': i + 1,
                                            'price': signal_price,
                                            'portion': tp_portion,
                                            'timestamp': signal_time,
                                            'price_change_percent': price_change * 100,
                                            'reason': f'take_profit_grid_{i+1}'
                                        }
                                        current_position['partial_exits'].append(partial_exit)
                                        logger.info(f"üìä –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ SHORT TP{i+1}: {tp_portion*100:.0f}% –ø–æ —Ü–µ–Ω–µ {signal_price:.6f} (+{price_change*100:.2f}%)")
                            
                            # –ï—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
                            if not should_close:
                                continue
                        else:
                            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            dynamic_take_profit = self.config.take_profit_percent
                            if confidence > 0.7:  # –í—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                                dynamic_take_profit = 0.030  # 3.0% –¥–ª—è –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                            
                            if price_change >= dynamic_take_profit:
                                should_close = True
                                exit_reason = f"take_profit_{'high_conf' if confidence > 0.7 else 'normal'}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
                    dynamic_max_hours = current_position.get('dynamic_hold_hours', self.config.max_hold_hours)
                    if time_diff >= dynamic_max_hours:  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                        should_close = True
                        exit_reason = f"dynamic_time_limit_{dynamic_max_hours}h"
                        if self.config.debug_mode:
                            logger.info(f"üïí –ü–æ–∑–∏—Ü–∏—è {symbol} –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏: {time_diff:.1f}h >= {dynamic_max_hours}h")
                    elif time_diff < self.config.min_hold_hours:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                        # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–∞–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∫—Ä–æ–º–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                        if exit_reason != "stop_loss":
                            should_close = False
                    elif (current_position['direction'] == 'LONG' and action == 'SELL') or \
                         (current_position['direction'] == 'SHORT' and action == 'BUY'):
                        should_close = True
                        exit_reason = "opposite_signal"
                    
                    if should_close:
                        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                        direction = current_position['direction']
                        entry_price = current_position['entry_price']
                        position_size = current_position['size']
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L (–∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ —É–∂–µ —É—á—Ç–µ–Ω–æ –≤ position_size)
                        if direction == 'LONG':
                            pnl = (signal_price - entry_price) * position_size
                        else:  # SHORT
                            pnl = (entry_price - signal_price) * position_size
                        
                        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                        commission = signal_price * position_size * self.config.commission_rate * 2  # –í—Ö–æ–¥ + –≤—ã—Ö–æ–¥
                        pnl -= commission
                        
                        pnl_percent = (pnl / (entry_price * position_size)) * 100
                        
                        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        logger.info(f"üîç –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {symbol}, PnL: {pnl:.2f}, participating_models: {len(current_position['participating_models'])}")
                        for i, model in enumerate(current_position['participating_models']):
                            logger.info(f"  Model {i}: {model.model_name} ({type(model)})")
                        
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏—è—Ö
                        partial_exits = current_position.get('partial_exits', [])
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏
                        total_partial_closed = 0.0
                        if partial_exits:
                            total_partial_closed = sum(exit['portion'] for exit in partial_exits)
                        remaining_position = max(0.0, 1.0 - total_partial_closed)
                        
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ TP
                        if partial_exits:
                            logger.info(f"üìà –°–µ—Ç–∫–∞ TP –¥–ª—è {symbol}: {len(partial_exits)} —á–∞—Å—Ç–∏—á–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∏–π, –æ—Å—Ç–∞–≤—à–∞—è—Å—è –ø–æ–∑–∏—Ü–∏—è: {remaining_position*100:.0f}%")
                            for i, exit_info in enumerate(partial_exits):
                                logger.info(f"  TP{exit_info['level']}: {exit_info['portion']*100:.0f}% –ø–æ —Ü–µ–Ω–µ {exit_info['price']:.6f} (+{exit_info['price_change_percent']:.2f}%)")
                        
                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
                        trade_result = TradeResult(
                            symbol=symbol,
                            entry_time=current_position['entry_time'],
                            entry_price=entry_price,
                            exit_time=signal_time,
                            exit_price=signal_price,
                            direction=direction,
                            pnl=pnl,
                            pnl_percent=pnl_percent,
                            confidence=current_position['confidence'],
                            ai_model=f"consensus_{current_position['consensus_strength']}",
                            consensus_strength=current_position['consensus_strength'],
                            participating_models=current_position['participating_models'],
                            consensus_signal=current_position.get('consensus_signal'),
                            position_size=position_size,
                            commission=commission,
                            exit_reason=exit_reason,
                            partial_exits=partial_exits,
                            remaining_position=remaining_position
                        )
                        
                        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞
                        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ—à–ª–∏ –¥–æ –±–ª–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: current_position['participating_models'] = {current_position.get('participating_models', '–ù–ï–¢ –ö–õ–Æ–ß–ê')}")
                        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: type = {type(current_position.get('participating_models', None))}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–µ–π
                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {len(current_position['participating_models'])} –º–æ–¥–µ–ª–µ–π, PnL: {pnl:.2f}")
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è P&L –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        participating_models = current_position['participating_models']
                        
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ calculate_model_weights –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        performance_weights = self.calculate_model_weights()
                        
                        # –°–æ–∑–¥–∞–µ–º –≤–µ—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
                        model_weights = {}
                        total_weight = 0.0
                        
                        for model_decision in participating_models:
                            model_name = model_decision.model_name
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                            weight = performance_weights.get(model_name, 1.0)
                            model_weights[model_name] = weight
                            total_weight += weight
                        
                        # –ï—Å–ª–∏ –æ–±—â–∏–π –≤–µ—Å —Ä–∞–≤–µ–Ω 0, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É
                        if total_weight == 0:
                            equal_weight = 1.0 / len(participating_models) if participating_models else 1.0
                            for model_name in model_weights:
                                model_weights[model_name] = equal_weight
                            total_weight = 1.0
                        
                        for model_decision in participating_models:
                            model_name = model_decision.model_name
                            if model_name in self.ai_models_performance:
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–æ–ª—é P&L –¥–ª—è –º–æ–¥–µ–ª–∏
                                model_weight_ratio = model_weights[model_name] / total_weight
                                model_pnl = pnl * model_weight_ratio
                                
                                self.ai_models_performance[model_name]['signals_used_in_trades'] += 1
                                if pnl > 0:
                                    self.ai_models_performance[model_name]['winning_signals'] += 1
                                    logger.info(f"‚úÖ {model_name}: +1 winning signal (total: {self.ai_models_performance[model_name]['winning_signals']}, –≤–µ—Å: {model_weight_ratio:.3f})")
                                else:
                                    self.ai_models_performance[model_name]['losing_signals'] += 1
                                    logger.info(f"‚ùå {model_name}: +1 losing signal (total: {self.ai_models_performance[model_name]['losing_signals']}, –≤–µ—Å: {model_weight_ratio:.3f})")
                                self.ai_models_performance[model_name]['contribution_to_pnl'] += model_pnl
                                
                                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—á–µ—Ç signal_accuracy
                                total_signals_used = self.ai_models_performance[model_name]['signals_used_in_trades']
                                if total_signals_used > 0:
                                    winning_signals = self.ai_models_performance[model_name]['winning_signals']
                                    accuracy = winning_signals / total_signals_used
                                    self.ai_models_performance[model_name]['signal_accuracy'] = accuracy
                                    logger.info(f"üìä {model_name}: accuracy updated to {accuracy:.1%} ({winning_signals}/{total_signals_used})")
                                
                                # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—á–µ—Ç consensus_participation_rate
                                total_signals = self.ai_models_performance[model_name]['total_signals']
                                if total_signals > 0:
                                    consensus_participations = self.ai_models_performance[model_name]['consensus_participations']
                                    self.ai_models_performance[model_name]['consensus_participation_rate'] = consensus_participations / total_signals
                        
                        # –û–ë–£–ß–ï–ù–ò–ï –° –ü–û–î–ö–†–ï–ü–õ–ï–ù–ò–ï–ú: –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
                        if 'reinforcement_learning_engine' in self.ai_models:
                            try:
                                rl_engine = self.ai_models['reinforcement_learning_engine']
                                
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
                                duration_minutes = (signal_time - current_position['entry_time']).total_seconds() / 60
                                
                                if pnl > 0:
                                    # –ü—Ä–∏–±—ã–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞ - –Ω–∞–≥—Ä–∞–∂–¥–∞–µ–º –º–æ–¥–µ–ª–∏
                                    for model_decision in current_position['participating_models']:
                                        await rl_engine.apply_reward(
                                            model_name=model_decision.model_name,
                                            trade_pnl=pnl,
                                            confidence=model_decision.confidence
                                        )
                                    
                                    if self.config.debug_mode:
                                        logger.info(f"üéâ RL: –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –¥–ª—è {len(current_position['participating_models'])} –º–æ–¥–µ–ª–µ–π (PnL: ${pnl:.2f})")
                                else:
                                    # –£–±—ã—Ç–æ—á–Ω–∞—è —Å–¥–µ–ª–∫–∞ - –Ω–∞–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏
                                    for model_decision in current_position['participating_models']:
                                        await rl_engine.apply_punishment(
                                            model_name=model_decision.model_name,
                                            trade_pnl=pnl,  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PnL
                                            confidence=model_decision.confidence
                                        )
                                    
                                    if self.config.debug_mode:
                                        logger.info(f"üíî RL: –ù–∞–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –¥–ª—è {len(current_position['participating_models'])} –º–æ–¥–µ–ª–µ–π (Loss: ${abs(pnl):.2f})")
                                
                                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                                if self.config.debug_mode:
                                    current_weights = rl_engine.get_model_weights()
                                    weights_str = ", ".join([f"{name}: {weight:.3f}" for name, weight in current_weights.items()])
                                    logger.info(f"üß† RL: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π: {weights_str}")
                                    
                            except Exception as rl_error:
                                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º: {rl_error}")
                        
                        trades.append(trade_result)
                        balance += pnl
                        current_position = None
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π
                filter_stats['total_signals'] += 1
                
                if self.config.debug_mode:
                    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞ #{filter_stats['total_signals']}: {action} –¥–ª—è {symbol} (confidence: {confidence:.3f}, consensus: {consensus_strength})")
                
                if current_position:
                    filter_stats['position_blocked'] += 1
                    if self.config.debug_mode:
                        logger.info(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è")
                    continue
                
                # –§–∏–ª—å—Ç—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ AI
                if confidence <= self.config.min_confidence:
                    filter_stats['confidence_filtered'] += 1
                    if self.config.debug_mode:
                        logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å {confidence:.3f} < {self.config.min_confidence}")
                    continue
                
                if not current_position:  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    # –£—Å–∏–ª–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                    current_data = data[data.index <= pd.to_datetime(signal_time)].tail(50)
                    if len(current_data) >= 50:
                        # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
                        volatility = current_data['close'].pct_change().std() * 100
                        if self.config.use_strict_filters and volatility < self.config.min_volatility:
                            filter_stats['volatility_filtered'] += 1
                            if self.config.debug_mode:
                                logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility:.3f}% < {self.config.min_volatility}%")
                            continue
                        
                        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º—É (–æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
                        avg_volume = current_data['volume'].mean()
                        current_volume = float(current_data['volume'].iloc[-1])
                        if self.config.use_strict_filters and current_volume < avg_volume * self.config.min_volume_ratio:
                            filter_stats['volume_filtered'] += 1
                            if self.config.debug_mode:
                                logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–∏–π –æ–±—ä–µ–º {current_volume:.0f} < {avg_volume * self.config.min_volume_ratio:.0f} ({self.config.min_volume_ratio*100}% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ)")
                            continue
                        
                        # –§–∏–ª—å—Ç—Ä –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤ (–¥–Ω–µ–≤–Ω–æ–π –∏ —á–∞—Å–æ–≤–æ–π)
                        if self.config.use_volume_filter:
                            volume_check = await self._check_trading_volume_filter(symbol, signal_time)
                            if not volume_check['passed']:
                                filter_stats['trading_volume_filtered'] += 1
                                if self.config.debug_mode:
                                    logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: –Ω–∏–∑–∫–∏–µ –æ–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤. "
                                              f"–î–Ω–µ–≤–Ω–æ–π: {volume_check['daily_volume_usdt']:.0f} < {volume_check['min_daily_volume']:.0f}, "
                                              f"–ß–∞—Å–æ–≤–æ–π: {volume_check['hourly_volume_usdt']:.0f} < {volume_check['min_hourly_volume']:.0f}")
                                continue
                        
                        # –§–∏–ª—å—Ç—Ä –ø–æ RSI (–æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ - —Ç–æ–ª—å–∫–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                        if len(current_data) >= 14:
                            delta = current_data['close'].diff()
                            gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
                            loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
                            rs = gain / loss
                            rsi = 100 - (100 / (1 + rs))
                            current_rsi = rsi.iloc[-1]
                            
                            # –¢–æ–ª—å–∫–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è RSI –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                            if self.config.use_strict_filters:
                                if action == 'BUY' and current_rsi > 85:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å
                                    filter_stats['rsi_filtered'] += 1
                                    if self.config.debug_mode:
                                        logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª BUY –æ—Ç–∫–ª–æ–Ω–µ–Ω: RSI —Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å {current_rsi:.1f} > 85")
                                    continue
                                if action == 'SELL' and current_rsi < 15:  # –°–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å
                                    filter_stats['rsi_filtered'] += 1
                                    if self.config.debug_mode:
                                        logger.info(f"‚ùå –°–∏–≥–Ω–∞–ª SELL –æ—Ç–∫–ª–æ–Ω–µ–Ω: RSI —Å–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å {current_rsi:.1f} < 15")
                                    continue
                    
                    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    if confidence >= 0.9:
                        dynamic_position_percent = 0.10  # 10% –¥–ª—è –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        confidence_level = "–û–ß–ï–ù–¨_–í–´–°–û–ö–ê–Ø"
                    elif confidence >= 0.8:
                        dynamic_position_percent = 0.08  # 8% –¥–ª—è –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                        confidence_level = "–í–´–°–û–ö–ê–Ø"
                    else:
                        dynamic_position_percent = self.config.position_size_percent  # 5% –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
                        confidence_level = "–ë–ê–ó–û–í–ê–Ø"
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—å (–Ω–µ –±–æ–ª–µ–µ 25% –≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö)
                    max_portfolio_risk = 0.25
                    if dynamic_position_percent > max_portfolio_risk:
                        dynamic_position_percent = max_portfolio_risk
                        if self.config.debug_mode:
                            logger.info(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ {max_portfolio_risk*100}% –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–º —Ä–∏—Å–∫–æ–º")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ –∫ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏, –∞ –Ω–µ –∫ P&L
                    position_value = balance * dynamic_position_percent * self.config.leverage_multiplier
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –º—è–≥–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    if position_value < self.config.min_position_value_usdt:
                        if self.config.debug_mode:
                            logger.info(f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {position_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ {self.config.min_position_value_usdt} USDT, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–¥–µ–ª–∫—É")
                        continue
                    
                    position_size = position_value / signal_price
                    
                    filter_stats['trades_opened'] += 1
                    if self.config.debug_mode:
                        logger.info(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞: {action} {symbol} –ø–æ —Ü–µ–Ω–µ {signal_price:.6f} (—Ä–∞–∑–º–µ—Ä: {position_size:.6f}, confidence: {confidence*100:.1f}%, —É—Ä–æ–≤–µ–Ω—å: {confidence_level}, –ø–æ–∑–∏—Ü–∏—è: {dynamic_position_percent*100:.1f}%)")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                    direction = 'LONG' if action == 'BUY' else 'SHORT'
                    dynamic_hold_hours = self.dynamic_holding_calculator.calculate_holding_time(
                        symbol, data, direction, signal_price
                    )
                    
                    if self.config.debug_mode:
                        logger.info(f"üïí –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è {symbol} ({direction}): {dynamic_hold_hours} —á–∞—Å–æ–≤")
                    
                    current_position = {
                        'entry_time': signal_time,
                        'entry_price': signal_price,
                        'direction': direction,
                        'size': position_size,
                        'confidence': confidence,
                        'ai_model': f"consensus_{consensus_strength}",
                        'consensus_strength': consensus_strength,
                        'participating_models': participating_models,
                        'consensus_signal': consensus_signal,
                        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
                        'dynamic_hold_hours': dynamic_hold_hours,
                        # Trailing stop –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        'trailing_stop_active': False,
                        'trailing_stop_price': None,
                        'highest_profit': 0.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è LONG
                        'lowest_profit': 0.0    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è SHORT
                    }
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏. current_position: {bool(current_position)}, len(data): {len(data)}")
            if current_position and len(data) > 0:
                logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –í—Ö–æ–¥–∏–º –≤ –±–ª–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {symbol}")
                last_price = float(data['close'].iloc[-1])
                last_time = data.index[-1]
                
                direction = current_position['direction']
                entry_price = current_position['entry_price']
                position_size = current_position['size']
                
                if direction == 'LONG':
                    pnl = (last_price - entry_price) * position_size
                else:
                    pnl = (entry_price - last_price) * position_size
                
                commission = last_price * position_size * self.config.commission_rate * 2
                pnl -= commission
                pnl_percent = (pnl / (entry_price * position_size)) * 100
                
                trade_result = TradeResult(
                    symbol=symbol,
                    entry_time=current_position['entry_time'],
                    entry_price=entry_price,
                    exit_time=last_time,
                    exit_price=last_price,
                    direction=direction,
                    pnl=pnl,
                    pnl_percent=pnl_percent,
                    confidence=current_position['confidence'],
                    ai_model=current_position['ai_model'],
                    consensus_strength=current_position.get('consensus_strength', 1),
                    participating_models=current_position.get('participating_models', []),
                    consensus_signal=current_position.get('consensus_signal'),
                    position_size=position_size,
                    commission=commission
                )
                
                trades.append(trade_result)
                logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–∏–ª–∏ —Å–¥–µ–ª–∫—É –≤ —Å–ø–∏—Å–æ–∫ trades. –¢–µ–ø–µ—Ä—å –≤ —Å–ø–∏—Å–∫–µ {len(trades)} —Å–¥–µ–ª–æ–∫")
                
                # –û–¢–õ–ê–î–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
                logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏ {symbol}, PnL: {pnl:.6f}, participating_models: {current_position.get('participating_models', [])}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
                participating_models = current_position.get('participating_models', [])
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è P&L –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
                total_weight = 0.0
                model_weights = {}
                
                for model_decision in participating_models:
                    model_name = model_decision.model_name if hasattr(model_decision, 'model_name') else str(model_decision)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏, –∞ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    base_confidence = model_decision.confidence if hasattr(model_decision, 'confidence') and model_decision.confidence is not None else 0.5
                    
                    logger.info(f"üîç –û–¢–õ–ê–î–ö–ê P&L: –ú–æ–¥–µ–ª—å {model_name} –∏–º–µ–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {base_confidence:.3f}")
                    
                    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
                    if model_name in self.ai_models_performance:
                        historical_perf = self.ai_models_performance[model_name]
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                        total_historical_trades = historical_perf['winning_signals'] + historical_perf['losing_signals']
                        if total_historical_trades > 0:
                            historical_accuracy = historical_perf['winning_signals'] / total_historical_trades
                            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (0.5 - 1.5x)
                            accuracy_multiplier = 0.5 + historical_accuracy
                        else:
                            accuracy_multiplier = 1.0
                        
                        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª–∞–¥–∞ –≤ P&L
                        historical_pnl = historical_perf.get('contribution_to_pnl', 0)
                        if historical_pnl > 0:
                            pnl_multiplier = min(1.5, 1.0 + (historical_pnl / 50))  # –î–æ +50% –∑–∞ —Ö–æ—Ä–æ—à—É—é –∏—Å—Ç–æ—Ä–∏—é
                        elif historical_pnl < 0:
                            pnl_multiplier = max(0.5, 1.0 + (historical_pnl / 100))  # –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–ª–æ—Ö—É—é –∏—Å—Ç–æ—Ä–∏—é
                        else:
                            pnl_multiplier = 1.0
                        
                        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Å –º–æ–¥–µ–ª–∏
                        model_weight = base_confidence * accuracy_multiplier * pnl_multiplier
                        
                        logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –í–µ—Å –º–æ–¥–µ–ª–∏ {model_name}: base={base_confidence:.3f}, accuracy_mult={accuracy_multiplier:.3f}, pnl_mult={pnl_multiplier:.3f}, final={model_weight:.3f}")
                    else:
                        model_weight = base_confidence
                    
                    model_weights[model_name] = max(0.1, model_weight)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å 0.1
                    total_weight += model_weights[model_name]
                
                # –ï—Å–ª–∏ –æ–±—â–∏–π –≤–µ—Å —Ä–∞–≤–µ–Ω 0, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É
                if total_weight == 0:
                    equal_weight = 1.0 / len(participating_models) if participating_models else 1.0
                    for model_name in model_weights:
                        model_weights[model_name] = equal_weight
                    total_weight = 1.0
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º P&L –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ —Å —É—á–µ—Ç–æ–º –∏—Ö –≤–µ—Å–æ–≤
                for model_decision in participating_models:
                    model_name = model_decision.model_name if hasattr(model_decision, 'model_name') else str(model_decision)
                    
                    if model_name not in ai_performance:
                        ai_performance[model_name] = {
                            'total_signals': 0,
                            'signals_used_in_trades': 0,
                            'winning_signals': 0,
                            'losing_signals': 0,
                            'total_confidence': 0.0,
                            'confidence_count': 0,
                            'contribution_to_pnl': 0.0,
                            'consensus_participations': 0
                        }
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–æ–ª—é P&L –¥–ª—è –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë –≤–µ—Å–∞
                    model_weight_ratio = model_weights[model_name] / total_weight
                    model_pnl = pnl * model_weight_ratio
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏
                    ai_performance[model_name]['signals_used_in_trades'] += 1
                    ai_performance[model_name]['contribution_to_pnl'] += model_pnl
                    
                    if pnl > 0:
                        ai_performance[model_name]['winning_signals'] += 1
                        logger.info(f"‚úÖ –û–¢–õ–ê–î–ö–ê: {model_name} - –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π —Å–∏–≥–Ω–∞–ª (+{model_pnl:.6f}, –≤–µ—Å: {model_weight_ratio:.3f})")
                    else:
                        ai_performance[model_name]['losing_signals'] += 1
                        logger.info(f"‚ùå –û–¢–õ–ê–î–ö–ê: {model_name} - –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–π —Å–∏–≥–Ω–∞–ª ({model_pnl:.6f}, –≤–µ—Å: {model_weight_ratio:.3f})")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏
                try:
                    if hasattr(self, 'reinforcement_learning_engine') and self.reinforcement_learning_engine:
                        participating_models = current_position.get('participating_models', [])
                        confidence = current_position['confidence']
                        
                        if pnl > 0:
                            # –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –º–æ–¥–µ–ª–∏ –∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É
                            for model_name in participating_models:
                                await self.reinforcement_learning_engine.apply_reward(model_name, pnl, confidence)
                            if self.config.debug_mode:
                                logger.info(f"üéâ RL: –ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è –º–æ–¥–µ–ª–µ–π {participating_models} –∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É (PnL: {pnl:.6f})")
                        else:
                            # –ù–∞–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –∑–∞ —É–±—ã—Ç–æ—á–Ω—É—é —Å–¥–µ–ª–∫—É
                            for model_name in participating_models:
                                await self.reinforcement_learning_engine.apply_punishment(model_name, abs(pnl), confidence)
                            if self.config.debug_mode:
                                logger.info(f"üí• RL: –ù–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π {participating_models} –∑–∞ —É–±—ã—Ç–æ—á–Ω—É—é —Å–¥–µ–ª–∫—É (PnL: {pnl:.6f})")
                except Exception as rl_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ RL –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏: {rl_error}")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if self.config.debug_mode:
                logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–ò–õ–¨–¢–†–û–í –¥–ª—è {symbol}:")
                logger.info(f"   üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {filter_stats['total_signals']}")
                logger.info(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏—è–º–∏: {filter_stats['position_blocked']}")
                logger.info(f"   üéØ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {filter_stats['confidence_filtered']}")
                logger.info(f"   üìä –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: {filter_stats['volatility_filtered']}")
                logger.info(f"   üìà –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –æ–±—ä–µ–º—É: {filter_stats['volume_filtered']}")
                logger.info(f"   üí∞ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ –æ–±—ä–µ–º–∞–º —Ç–æ—Ä–≥–æ–≤: {filter_stats['trading_volume_filtered']}")
                logger.info(f"   üìâ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø–æ RSI: {filter_stats['rsi_filtered']}")
                logger.info(f"   ‚úÖ –°–¥–µ–ª–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ: {filter_stats['trades_opened']}")
                
                if filter_stats['total_signals'] > 0:
                    success_rate = (filter_stats['trades_opened'] / filter_stats['total_signals']) * 100
                    logger.info(f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {success_rate:.1f}%")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ai_performance –≤ self.ai_models_performance
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ ai_performance –≤ self.ai_models_performance –¥–ª—è {symbol}")
            for model_name, perf_data in ai_performance.items():
                if model_name in self.ai_models_performance:
                    # –û–±–Ω–æ–≤–ª—è–µ–º winning_signals –∏ losing_signals
                    self.ai_models_performance[model_name]['winning_signals'] += perf_data['winning_signals']
                    self.ai_models_performance[model_name]['losing_signals'] += perf_data['losing_signals']
                    self.ai_models_performance[model_name]['signals_used_in_trades'] += perf_data['signals_used_in_trades']
                    self.ai_models_performance[model_name]['contribution_to_pnl'] += perf_data['contribution_to_pnl']
                    
                    logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: {model_name} - –æ–±–Ω–æ–≤–ª–µ–Ω—ã winning: {self.ai_models_performance[model_name]['winning_signals']}, losing: {self.ai_models_performance[model_name]['losing_signals']}")
            
            logger.info(f"‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(trades)} —Å–¥–µ–ª–æ–∫ –¥–ª—è {symbol}")
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(trades)} —Å–¥–µ–ª–æ–∫ –∏–∑ simulate_trading –¥–ª—è {symbol}")
            return trades
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: {e}")
            return []
    
    def calculate_metrics(self, symbol: str, trades: List[TradeResult]) -> WinrateTestResult:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –≤–∏–Ω—Ä–µ–π—Ç–∞"""
        if not trades:
            return WinrateTestResult(
                symbol=symbol,
                total_trades=0,
                winning_trades=0,
                losing_trades=0,
                win_rate=0.0,
                total_pnl=0.0,
                total_pnl_percent=0.0,
                avg_trade_pnl=0.0,
                max_drawdown=0.0,
                sharpe_ratio=0.0,
                trades=[]
            )
        
        total_trades = len(trades)
        winning_trades = len([t for t in trades if t.pnl > 0])
        losing_trades = total_trades - winning_trades
        win_rate = (winning_trades / total_trades) * 100 if total_trades > 0 else 0
        
        total_pnl = sum(t.pnl for t in trades)
        total_pnl_percent = sum(t.pnl_percent for t in trades)
        avg_trade_pnl = total_pnl / total_trades if total_trades > 0 else 0
        
        # –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
        cumulative_pnl = 0
        peak = 0
        max_drawdown = 0
        
        for trade in trades:
            cumulative_pnl += trade.pnl
            if cumulative_pnl > peak:
                peak = cumulative_pnl
            drawdown = peak - cumulative_pnl
            if drawdown > max_drawdown:
                max_drawdown = drawdown
        
        # –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        returns = [t.pnl_percent for t in trades]
        if len(returns) > 1:
            avg_return = np.mean(returns)
            std_return = np.std(returns)
            sharpe_ratio = avg_return / std_return if std_return > 0 else 0
        else:
            sharpe_ratio = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        advanced_config = AdvancedConfidenceConfig()
        confidence_calculator = AdvancedConfidenceCalculator(advanced_config)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI –º–æ–¥–µ–ª–µ–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        ai_models_performance = {}
        for model_name in self.ai_models_performance:
            perf = self.ai_models_performance[model_name]
            total_signals = perf['total_signals']
            signals_used = perf['signals_used_in_trades']
            winning = perf['winning_signals']
            losing = perf['losing_signals']
            
            # –û–¢–õ–ê–î–ö–ê: –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê calculate_metrics –¥–ª—è {model_name}:")
            logger.info(f"   total_signals: {total_signals}")
            logger.info(f"   signals_used: {signals_used}")
            logger.info(f"   winning_signals: {winning}")
            logger.info(f"   losing_signals: {losing}")
            logger.info(f"   total_confidence: {perf['total_confidence']}")
            logger.info(f"   confidence_count: {perf['confidence_count']}")
            logger.info(f"   consensus_participations: {perf['consensus_participations']}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            base_confidence = (perf['total_confidence'] / perf['confidence_count']) if perf['confidence_count'] > 0 else 0
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            enhanced_confidence = base_confidence
            if enhanced_confidence > 0:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
                accuracy_ratio = (winning / signals_used) if signals_used > 0 else 0.5
                accuracy_multiplier = 0.5 + (accuracy_ratio * 1.5)  # –û—Ç 0.5 –¥–æ 2.0
                enhanced_confidence *= accuracy_multiplier
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ
                consensus_ratio = (perf['consensus_participations'] / total_signals) if total_signals > 0 else 0
                consensus_multiplier = 0.8 + (consensus_ratio * 0.4)  # –û—Ç 0.8 –¥–æ 1.2
                enhanced_confidence *= consensus_multiplier
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∫–ª–∞–¥–∞ –≤ PnL
                pnl_contribution = perf['contribution_to_pnl']
                if pnl_contribution > 0:
                    pnl_multiplier = 1.0 + min(pnl_contribution / 100, 0.5)  # –î–æ +50%
                else:
                    pnl_multiplier = max(0.5, 1.0 + (pnl_contribution / 100))  # –ú–∏–Ω–∏–º—É–º 50%
                enhanced_confidence *= pnl_multiplier
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                enhanced_confidence = max(0.0, min(1.0, enhanced_confidence))
                
                logger.info(f"üöÄ –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ –¥–ª—è {model_name}:")
                logger.info(f"   –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {base_confidence:.3f}")
                logger.info(f"   –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {accuracy_ratio:.3f} (–º–Ω–æ–∂–∏—Ç–µ–ª—å: {accuracy_multiplier:.3f})")
                logger.info(f"   –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ: {consensus_ratio:.3f} (–º–Ω–æ–∂–∏—Ç–µ–ª—å: {consensus_multiplier:.3f})")
                logger.info(f"   –í–∫–ª–∞–¥ –≤ PnL: {pnl_contribution:.2f} (–º–Ω–æ–∂–∏—Ç–µ–ª—å: {pnl_multiplier:.3f})")
                logger.info(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced_confidence:.3f}")
            
            ai_models_performance[model_name] = AIModelPerformance(
                model_name=model_name,
                total_signals=total_signals,
                signals_used_in_trades=signals_used,
                winning_signals=winning,
                losing_signals=losing,
                signal_accuracy=(winning / signals_used * 100) if signals_used > 0 else 0,
                avg_confidence=enhanced_confidence * 100,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                contribution_to_pnl=perf['contribution_to_pnl'],
                consensus_participation_rate=(perf['consensus_participations'] / total_signals * 100) if total_signals > 0 else 0
            )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_stats = {
            'total_consensus_signals': len([t for t in trades if hasattr(t, 'consensus_strength')]),
            'avg_consensus_strength': np.mean([t.consensus_strength for t in trades if hasattr(t, 'consensus_strength')]) if trades else 0,
            'consensus_2_models': len([t for t in trades if hasattr(t, 'consensus_strength') and t.consensus_strength == 2]),
            'consensus_3_models': len([t for t in trades if hasattr(t, 'consensus_strength') and t.consensus_strength == 3]),
            'consensus_4_models': len([t for t in trades if hasattr(t, 'consensus_strength') and t.consensus_strength == 4])
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
        rl_stats = {}
        if hasattr(self, 'reinforcement_learning_engine') and self.reinforcement_learning_engine:
            try:
                model_weights = self.reinforcement_learning_engine.get_model_weights()
                performance_summary = self.reinforcement_learning_engine.get_performance_summary()
                
                rl_stats = {
                    'model_weights': model_weights,
                    'performance_summary': performance_summary,
                    'total_rewards_applied': sum(perf.get('total_rewards', 0) for perf in performance_summary.values()),
                    'total_punishments_applied': sum(perf.get('total_punishments', 0) for perf in performance_summary.values()),
                    'learning_active': True
                }
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è RL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                rl_stats = {'learning_active': False}

        return WinrateTestResult(
            symbol=symbol,
            total_trades=total_trades,
            winning_trades=winning_trades,
            losing_trades=losing_trades,
            win_rate=win_rate,
            total_pnl=total_pnl,
            total_pnl_percent=total_pnl_percent,
            avg_trade_pnl=avg_trade_pnl,
            max_drawdown=max_drawdown,
            sharpe_ratio=sharpe_ratio,
            trades=trades,
            ai_models_performance=ai_models_performance,
            consensus_stats=consensus_stats,
            rl_stats=rl_stats
        )
    
    async def test_symbol(self, symbol: str) -> WinrateTestResult:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = await self.load_historical_data(symbol)
            if data.empty:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return self.calculate_metrics(symbol, [])

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —á–∞—Å—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            if self.config.use_time_filter and self.config.analyze_best_hours:
                best_hours = self.analyze_best_trading_hours(data)
                self.config.trading_hours = best_hours
                logger.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω—ã –ª—É—á—à–∏–µ —á–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è {symbol}: {best_hours}")

            # –ü–æ–ª—É—á–∞–µ–º AI —Å–∏–≥–Ω–∞–ª—ã
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –í—ã–∑—ã–≤–∞–µ–º get_ai_signals –¥–ª—è {symbol}")
            signals = await self.get_ai_signals(symbol, data)
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: get_ai_signals –≤–µ—Ä–Ω—É–ª {len(signals) if signals else 0} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
            if signals:
                for i, signal in enumerate(signals):
                    logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –°–∏–≥–Ω–∞–ª {i+1}: {signal.final_action} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {signal.confidence_avg:.2%} –≤ {signal.timestamp}")
            if not signals:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
                return self.calculate_metrics(symbol, [])
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            trades = await self.simulate_trading(symbol, data, signals)
            logger.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–∏–ª–∏ {len(trades)} —Å–¥–µ–ª–æ–∫ –∏–∑ simulate_trading –¥–ª—è {symbol}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            result = self.calculate_metrics(symbol, trades)
            
            logger.info(f"‚úÖ {symbol}: {result.total_trades} —Å–¥–µ–ª–æ–∫, –≤–∏–Ω—Ä–µ–π—Ç {result.win_rate:.1f}%")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
            return self.calculate_metrics(symbol, [])
    
    async def run_full_test(self) -> Dict[str, WinrateTestResult]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞...")
            
            await self.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            logger.info("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ AI –º–æ–¥–µ–ª–µ–π...")
            diagnostics_results = await self.run_model_diagnostics()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
            active_models = [name for name, result in diagnostics_results.items() if result['status'] == 'ACTIVE']
            if not active_models:
                logger.error("‚ùå –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• AI –ú–û–î–ï–õ–ï–ô! –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
                return {}
            
            logger.info(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å {len(active_models)} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏: {', '.join(active_models)}")
            
            results = {}
            for symbol in self.config.symbols:
                result = await self.test_symbol(symbol)
                results[symbol] = result
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤
            if results:
                logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤...")
                self._generate_detailed_visualizations(results)
            
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {}
    
    def generate_report(self, results: Dict[str, WinrateTestResult]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report = []
        
        # –ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        report.append("ü§ñ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ü§ñ")
        report.append("üöÄ                    AI –¢–û–†–ì–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê - –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø                üöÄ")
        report.append("ü§ñ ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê ü§ñ")
        
        # –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–∞—á–∞–ª–µ
        total_trades = 0
        total_winning = 0
        total_pnl = 0
        
        for symbol, result in results.items():
            if result.total_trades > 0:
                total_trades += result.total_trades
                total_winning += result.winning_trades
                total_pnl += result.total_pnl
        
        if total_trades > 0:
            overall_winrate = (total_winning / total_trades) * 100
            roi = (total_pnl / self.config.start_balance) * 100
            final_balance = self.config.start_balance + total_pnl
            
            # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
            report.append(f"üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
            report.append(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {self.config.test_period_days} –¥–Ω–µ–π | üí∞ –ë–∞–ª–∞–Ω—Å: ${self.config.start_balance} ‚Üí ${final_balance:.2f}")
            report.append(f"   üéØ –°–¥–µ–ª–æ–∫: {total_trades} | üèÜ Win Rate: {overall_winrate:.1f}% | üìä ROI: {roi:.1f}%")
            report.append(f"   üí∞ P&L: ${total_pnl:.2f} | ‚öôÔ∏è –ö–æ–Ω—Å–µ–Ω—Å—É—Å: {self.config.min_consensus_models} –º–æ–¥–µ–ª–µ–π")
            report.append("")
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        report.append("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        report.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        report.append("‚îÇ   –°–ò–ú–í–û–õ    ‚îÇ –°–î–ï–õ–ö–ò  ‚îÇ –í–ò–ù–†–ï–ô–¢ ‚îÇ  P&L    ‚îÇ   –°–†–ï–î–ù–Ø–Ø   ‚îÇ   –®–ê–†–ü      ‚îÇ")
        report.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        for symbol, result in results.items():
            if result.total_trades > 0:
                symbol_str = f"{symbol:^11}"
                trades_str = f"{result.total_trades:^7}"
                winrate_str = f"{result.win_rate:.1f}%"
                pnl_str = f"${result.total_pnl:+.2f}"
                avg_str = f"${result.avg_trade_pnl:+.2f}"
                sharpe_str = f"{result.sharpe_ratio:.2f}"
                
                report.append(f"‚îÇ {symbol_str} ‚îÇ {trades_str} ‚îÇ {winrate_str:^7} ‚îÇ {pnl_str:^7} ‚îÇ {avg_str:^11} ‚îÇ {sharpe_str:^11} ‚îÇ")
        
        report.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        report.append("")
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ AI –º–æ–¥–µ–ª–µ–π
        self._add_compact_ai_analytics(report, results)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ debug_mode –≤–∫–ª—é—á–µ–Ω)
        if self.config.debug_mode:
            self._add_compact_filter_analytics(report, results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self._save_detailed_csv_reports(results)
        
        return "\n".join(report)
    
    def _add_compact_ai_analytics(self, report: List[str], results: Dict[str, WinrateTestResult]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É AI –º–æ–¥–µ–ª–µ–π"""
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º AI –º–æ–¥–µ–ª—è–º
        ai_stats = {}
        
        for symbol, result in results.items():
            if result.ai_models_performance:
                for model_name, performance in result.ai_models_performance.items():
                    if model_name not in ai_stats:
                        ai_stats[model_name] = {
                            'total_signals': 0,
                            'signals_used': 0,
                            'winning_signals': 0,
                            'total_pnl': 0.0,
                            'avg_confidence': 0.0,
                            'confidence_count': 0
                        }
                    
                    ai_stats[model_name]['total_signals'] += performance.total_signals
                    ai_stats[model_name]['signals_used'] += performance.signals_used_in_trades
                    ai_stats[model_name]['winning_signals'] += performance.winning_signals
                    ai_stats[model_name]['total_pnl'] += performance.contribution_to_pnl
                    
                    if performance.avg_confidence > 0:
                        ai_stats[model_name]['avg_confidence'] += performance.avg_confidence
                        ai_stats[model_name]['confidence_count'] += 1
        
        if ai_stats:
            report.append("ü§ñ AI –ú–û–î–ï–õ–ò:")
            report.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
            report.append("‚îÇ      –ú–û–î–ï–õ–¨         ‚îÇ –°–ò–ì–ù–ê–õ–´ ‚îÇ –ò–°–ü–û–õ–¨. ‚îÇ –¢–û–ß–ù–û–°–¢–¨‚îÇ    P&L      ‚îÇ –£–í–ï–†–ï–ù–ù–û–°–¢–¨ ‚îÇ")
            report.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
            sorted_models = sorted(ai_stats.items(), key=lambda x: x[1]['total_pnl'], reverse=True)
            
            for model_name, stats in sorted_models:
                model_str = f"{model_name:^19}"
                signals_str = f"{stats['total_signals']:^7}"
                used_str = f"{stats['signals_used']:^7}"
                
                accuracy = 0.0
                if stats['signals_used'] > 0:
                    accuracy = (stats['winning_signals'] / stats['signals_used']) * 100
                accuracy_str = f"{accuracy:.1f}%"
                
                pnl_str = f"${stats['total_pnl']:+.2f}"
                
                avg_conf = 0.0
                if stats['confidence_count'] > 0:
                    avg_conf = stats['avg_confidence'] / stats['confidence_count']
                conf_str = f"{avg_conf:.1f}%"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
                status = "üü¢" if stats['total_signals'] > 0 else "üî¥"
                
                report.append(f"‚îÇ {status} {model_str} ‚îÇ {signals_str} ‚îÇ {used_str} ‚îÇ {accuracy_str:^7} ‚îÇ {pnl_str:^11} ‚îÇ {conf_str:^11} ‚îÇ")
            
            report.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
            report.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º
        self._add_reinforcement_learning_analytics(report, results)
    
    def _add_reinforcement_learning_analytics(self, report: List[str], results: Dict[str, WinrateTestResult]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"""
        # –°–æ–±–∏—Ä–∞–µ–º RL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        rl_data_found = False
        total_rewards = 0
        total_punishments = 0
        model_weights = {}
        performance_summary = {}
        
        for symbol, result in results.items():
            if result.rl_stats and result.rl_stats.get('learning_active', False):
                rl_data_found = True
                total_rewards += result.rl_stats.get('total_rewards_applied', 0)
                total_punishments += result.rl_stats.get('total_punishments_applied', 0)
                
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞)
                if result.rl_stats.get('model_weights'):
                    model_weights = result.rl_stats['model_weights']
                if result.rl_stats.get('performance_summary'):
                    performance_summary = result.rl_stats['performance_summary']
        
        if not rl_data_found:
            return
        
        report.append("üß† –û–ë–£–ß–ï–ù–ò–ï –° –ü–û–î–ö–†–ï–ü–õ–ï–ù–ò–ï–ú:")
        report.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        report.append("‚îÇ      –ú–û–î–ï–õ–¨         ‚îÇ  –í–ï–°    ‚îÇ –ù–ê–ì–†–ê–î–´ ‚îÇ –ù–ê–ö–ê–ó–ê–ù.‚îÇ   –ë–ê–õ–ê–ù–°    ‚îÇ   –°–¢–ê–¢–£–°    ‚îÇ")
        report.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ –≤–µ—Å—É
        sorted_models = sorted(model_weights.items(), key=lambda x: x[1], reverse=True)
        
        for model_name, weight in sorted_models:
            model_str = f"{model_name:^19}"
            weight_str = f"{weight:.3f}"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
            perf = performance_summary.get(model_name, {})
            rewards = perf.get('total_rewards', 0)
            punishments = perf.get('total_punishments', 0)
            balance = rewards - punishments
            
            rewards_str = f"{rewards:^7}"
            punishments_str = f"{punishments:^7}"
            balance_str = f"{balance:+.1f}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            if balance > 0:
                status = "üü¢ –†–ê–°–¢–ï–¢"
            elif balance < 0:
                status = "üî¥ –ü–ê–î–ê–ï–¢"
            else:
                status = "üü° –°–¢–ê–ë–ò–õ"
            
            report.append(f"‚îÇ {model_str} ‚îÇ {weight_str:^7} ‚îÇ {rewards_str} ‚îÇ {punishments_str} ‚îÇ {balance_str:^11} ‚îÇ {status:^11} ‚îÇ")
        
        report.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –æ–±—É—á–µ–Ω–∏—è
        total_actions = total_rewards + total_punishments
        if total_actions > 0:
            reward_rate = (total_rewards / total_actions) * 100
            report.append(f"   üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π RL: {total_actions} | üéâ –ù–∞–≥—Ä–∞–¥—ã: {reward_rate:.1f}% | üí• –ù–∞–∫–∞–∑–∞–Ω–∏—è: {100-reward_rate:.1f}%")
        
        report.append("")
    
    def _add_compact_filter_analytics(self, report: List[str], results: Dict[str, WinrateTestResult]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        report.append("üîç –§–ò–õ–¨–¢–†–´:")
        report.append(f"   üéØ –ú–∏–Ω. —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.config.min_confidence*100:.1f}% | üìà –ú–∏–Ω. –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {self.config.min_volatility:.1f}%")
        report.append(f"   üìä –ú–∏–Ω. –æ–±—ä–µ–º: {self.config.min_volume_ratio*100:.0f}% | ‚è∞ –í—Ä–µ–º—è: {self.config.min_hold_hours}-{self.config.max_hold_hours}—á")
        report.append(f"   üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: {self.config.stop_loss_percent*100:.1f}% | üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {self.config.take_profit_percent*100:.1f}%")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å—Ç—Ä–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if self.config.use_time_filter and self.config.trading_hours:
            hours_str = ', '.join(map(str, sorted(self.config.trading_hours)))
            report.append(f"   üïê –§–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏: {hours_str} UTC ({len(self.config.trading_hours)}/24 —á–∞—Å–æ–≤)")
        elif self.config.use_time_filter:
            report.append(f"   üïê –§–∏–ª—å—Ç—Ä –≤—Ä–µ–º–µ–Ω–∏: –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö —á–∞—Å–æ–≤")
        
        report.append("")
    
    def _get_profitable_and_losing_trades(self, results: Dict[str, WinrateTestResult]) -> tuple:
        """–†–∞–∑–¥–µ–ª—è–µ—Ç –≤—Å–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –∏ —É–±—ã—Ç–æ—á–Ω—ã–µ"""
        profitable_trades = []
        losing_trades = []
        
        for symbol, result in results.items():
            for trade in result.trades:
                if trade.pnl > 0:
                    profitable_trades.append(trade)
                else:
                    losing_trades.append(trade)
        
        return profitable_trades, losing_trades
    
    def _calculate_trade_statistics(self, trades: List[TradeResult]) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫"""
        if not trades:
            return {
                'count': 0,
                'total_pnl': 0.0,
                'avg_pnl': 0.0,
                'avg_pnl_percent': 0.0,
                'avg_confidence': 0.0,
                'avg_consensus_strength': 0.0,
                'avg_hold_time_hours': 0.0,
                'best_trade_pnl': 0.0,
                'worst_trade_pnl': 0.0,
                'symbol_distribution': {},
                'ai_model_distribution': {}
            }
        
        total_pnl = sum(trade.pnl for trade in trades)
        total_pnl_percent = sum(trade.pnl_percent for trade in trades)
        total_confidence = sum(trade.confidence for trade in trades)
        total_consensus_strength = sum(trade.consensus_strength for trade in trades)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        hold_times = []
        for trade in trades:
            hold_time = (trade.exit_time - trade.entry_time).total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
            hold_times.append(hold_time)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_distribution = {}
        for trade in trades:
            symbol_distribution[trade.symbol] = symbol_distribution.get(trade.symbol, 0) + 1
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ AI –º–æ–¥–µ–ª—è–º
        ai_model_distribution = {}
        for trade in trades:
            ai_model_distribution[trade.ai_model] = ai_model_distribution.get(trade.ai_model, 0) + 1
        
        return {
            'count': len(trades),
            'total_pnl': total_pnl,
            'avg_pnl': total_pnl / len(trades),
            'avg_pnl_percent': total_pnl_percent / len(trades),
            'avg_confidence': total_confidence / len(trades),
            'avg_consensus_strength': total_consensus_strength / len(trades),
            'avg_hold_time_hours': sum(hold_times) / len(hold_times),
            'best_trade_pnl': max(trade.pnl for trade in trades),
            'worst_trade_pnl': min(trade.pnl for trade in trades),
            'symbol_distribution': symbol_distribution,
            'ai_model_distribution': ai_model_distribution
        }
    
    def _calculate_roi_analysis(self, results: Dict[str, WinrateTestResult]) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π ROI –∞–Ω–∞–ª–∏–∑"""
        total_pnl = sum(result.total_pnl for result in results.values())
        overall_roi = (total_pnl / self.config.start_balance) * 100
        
        # –ê–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ROI
        days_in_year = 365
        annualized_roi = ((1 + total_pnl / self.config.start_balance) ** (days_in_year / self.config.test_period_days) - 1) * 100
        
        # ROI –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        roi_by_symbol = {}
        for symbol, result in results.items():
            if result.total_trades > 0:
                roi_by_symbol[symbol] = (result.total_pnl / self.config.start_balance) * 100
        
        # ROI –ø–æ AI –º–æ–¥–µ–ª—è–º
        roi_by_ai_model = {}
        for symbol, result in results.items():
            for trade in result.trades:
                if trade.ai_model not in roi_by_ai_model:
                    roi_by_ai_model[trade.ai_model] = 0.0
                roi_by_ai_model[trade.ai_model] += (trade.pnl / self.config.start_balance) * 100
        
        return {
            'overall_roi': overall_roi,
            'annualized_roi': annualized_roi,
            'roi_by_symbol': roi_by_symbol,
            'roi_by_ai_model': roi_by_ai_model
        }
    
    def _calculate_winrate_analysis(self, results: Dict[str, WinrateTestResult]) -> Dict[str, Any]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–Ω—Ä–µ–π—Ç–∞"""
        total_trades = sum(result.total_trades for result in results.values())
        total_winning = sum(result.winning_trades for result in results.values())
        overall_winrate = (total_winning / total_trades * 100) if total_trades > 0 else 0
        
        # –í–∏–Ω—Ä–µ–π—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        winrate_by_symbol = {}
        for symbol, result in results.items():
            if result.total_trades > 0:
                winrate_by_symbol[symbol] = result.win_rate
        
        # –í–∏–Ω—Ä–µ–π—Ç –ø–æ AI –º–æ–¥–µ–ª—è–º
        winrate_by_ai_model = {}
        trades_by_ai_model = {}
        
        for symbol, result in results.items():
            for trade in result.trades:
                if trade.ai_model not in trades_by_ai_model:
                    trades_by_ai_model[trade.ai_model] = {'total': 0, 'winning': 0}
                
                trades_by_ai_model[trade.ai_model]['total'] += 1
                if trade.pnl > 0:
                    trades_by_ai_model[trade.ai_model]['winning'] += 1
        
        for ai_model, stats in trades_by_ai_model.items():
            if stats['total'] > 0:
                winrate_by_ai_model[ai_model] = (stats['winning'] / stats['total']) * 100
        
        return {
            'overall_winrate': overall_winrate,
            'winrate_by_symbol': winrate_by_symbol,
            'winrate_by_ai_model': winrate_by_ai_model
        }
    
    def _add_detailed_trades_analysis(self, report: List[str], results: Dict[str, WinrateTestResult]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
        profitable_trades, losing_trades = self._get_profitable_and_losing_trades(results)
        
        if not profitable_trades and not losing_trades:
            report.append("")
            report.append("üìä " + "=" * 58 + " üìä")
            report.append("üìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö")
            report.append("üìä " + "=" * 58 + " üìä")
            report.append("‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        profitable_stats = self._calculate_trade_statistics(profitable_trades)
        losing_stats = self._calculate_trade_statistics(losing_trades)
        roi_analysis = self._calculate_roi_analysis(results)
        winrate_analysis = self._calculate_winrate_analysis(results)
        
        report.append("")
        report.append("üìä " + "=" * 58 + " üìä")
        report.append("üìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö")
        report.append("üìä " + "=" * 58 + " üìä")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_trades = profitable_stats['count'] + losing_stats['count']
        report.append(f"üéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        report.append(f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_stats['count']} ({profitable_stats['count']/total_trades*100:.1f}%)")
        report.append(f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {losing_stats['count']} ({losing_stats['count']/total_trades*100:.1f}%)")
        report.append(f"üèÜ –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {winrate_analysis['overall_winrate']:.1f}%")
        report.append("")
        
        # ROI –∞–Ω–∞–ª–∏–∑
        report.append("üí∞ " + "=" * 40 + " üí∞")
        report.append("üìä ROI –ê–ù–ê–õ–ò–ó")
        report.append("üí∞ " + "=" * 40 + " üí∞")
        report.append(f"üìà –û–±—â–∏–π ROI: {roi_analysis['overall_roi']:.2f}%")
        report.append(f"üìÖ –ê–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ROI: {roi_analysis['annualized_roi']:.2f}%")
        
        if roi_analysis['roi_by_symbol']:
            report.append("")
            report.append("üìä ROI –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
            sorted_symbols = sorted(roi_analysis['roi_by_symbol'].items(), key=lambda x: x[1], reverse=True)
            for symbol, roi in sorted_symbols:
                report.append(f"   {symbol}: {roi:.2f}%")
        
        if roi_analysis['roi_by_ai_model']:
            report.append("")
            report.append("ü§ñ ROI –ø–æ AI –º–æ–¥–µ–ª—è–º:")
            sorted_models = sorted(roi_analysis['roi_by_ai_model'].items(), key=lambda x: x[1], reverse=True)
            for model, roi in sorted_models:
                report.append(f"   {model}: {roi:.2f}%")
        
        report.append("")
        
        # –í–∏–Ω—Ä–µ–π—Ç –∞–Ω–∞–ª–∏–∑
        report.append("üèÜ " + "=" * 40 + " üèÜ")
        report.append("üìä –í–ò–ù–†–ï–ô–¢ –ê–ù–ê–õ–ò–ó")
        report.append("üèÜ " + "=" * 40 + " üèÜ")
        
        if winrate_analysis['winrate_by_symbol']:
            report.append("üìä –í–∏–Ω—Ä–µ–π—Ç –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
            sorted_symbols = sorted(winrate_analysis['winrate_by_symbol'].items(), key=lambda x: x[1], reverse=True)
            for symbol, winrate in sorted_symbols:
                report.append(f"   {symbol}: {winrate:.1f}%")
        
        if winrate_analysis['winrate_by_ai_model']:
            report.append("")
            report.append("ü§ñ –í–∏–Ω—Ä–µ–π—Ç –ø–æ AI –º–æ–¥–µ–ª—è–º:")
            sorted_models = sorted(winrate_analysis['winrate_by_ai_model'].items(), key=lambda x: x[1], reverse=True)
            for model, winrate in sorted_models:
                report.append(f"   {model}: {winrate:.1f}%")
        
        report.append("")
        
        # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        if profitable_trades:
            report.append("‚úÖ " + "=" * 50 + " ‚úÖ")
            report.append("üíö –ü–†–ò–ë–´–õ–¨–ù–´–ï –°–î–ï–õ–ö–ò")
            report.append("‚úÖ " + "=" * 50 + " ‚úÖ")
            report.append(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {profitable_stats['count']}")
            report.append(f"üí∞ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${profitable_stats['total_pnl']:.2f}")
            report.append(f"üìà –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${profitable_stats['avg_pnl']:.2f} ({profitable_stats['avg_pnl_percent']:.2f}%)")
            report.append(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {profitable_stats['avg_confidence']:.1f}%")
            report.append(f"ü§ù –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {profitable_stats['avg_consensus_strength']:.1f} –º–æ–¥–µ–ª–µ–π")
            report.append(f"‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {profitable_stats['avg_hold_time_hours']:.1f} —á–∞—Å–æ–≤")
            report.append(f"üèÜ –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: ${profitable_stats['best_trade_pnl']:.2f}")
            
            # –¢–æ–ø-5 –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            top_profitable = sorted(profitable_trades, key=lambda x: x.pnl, reverse=True)[:5]
            if top_profitable:
                report.append("")
                report.append("üèÜ –¢–û–ü-5 –ü–†–ò–ë–´–õ–¨–ù–´–• –°–î–ï–õ–û–ö:")
                for i, trade in enumerate(top_profitable, 1):
                    hold_time = (trade.exit_time - trade.entry_time).total_seconds() / 3600
                    report.append(f"   {i}. {trade.symbol} | ${trade.pnl:.2f} ({trade.pnl_percent:.2f}%) | {trade.direction}")
                    report.append(f"      –í—Ö–æ–¥: ${trade.entry_price:.4f} ({trade.entry_time.strftime('%Y-%m-%d %H:%M')})")
                    report.append(f"      –í—ã—Ö–æ–¥: ${trade.exit_price:.4f} ({trade.exit_time.strftime('%Y-%m-%d %H:%M')})")
                    report.append(f"      AI: {trade.ai_model} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trade.confidence:.1f}% | –í—Ä–µ–º—è: {hold_time:.1f}—á")
                    report.append("")
        
        # –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        if losing_trades:
            report.append("‚ùå " + "=" * 50 + " ‚ùå")
            report.append("üíî –£–ë–´–¢–û–ß–ù–´–ï –°–î–ï–õ–ö–ò")
            report.append("‚ùå " + "=" * 50 + " ‚ùå")
            report.append(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {losing_stats['count']}")
            report.append(f"üí∏ –û–±—â–∏–π —É–±—ã—Ç–æ–∫: ${losing_stats['total_pnl']:.2f}")
            report.append(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${losing_stats['avg_pnl']:.2f} ({losing_stats['avg_pnl_percent']:.2f}%)")
            report.append(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI: {losing_stats['avg_confidence']:.1f}%")
            report.append(f"ü§ù –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {losing_stats['avg_consensus_strength']:.1f} –º–æ–¥–µ–ª–µ–π")
            report.append(f"‚è∞ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: {losing_stats['avg_hold_time_hours']:.1f} —á–∞—Å–æ–≤")
            report.append(f"üíî –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: ${losing_stats['worst_trade_pnl']:.2f}")
            
            # –¢–æ–ø-5 —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            top_losing = sorted(losing_trades, key=lambda x: x.pnl)[:5]
            if top_losing:
                report.append("")
                report.append("üíî –¢–û–ü-5 –£–ë–´–¢–û–ß–ù–´–• –°–î–ï–õ–û–ö:")
                for i, trade in enumerate(top_losing, 1):
                    hold_time = (trade.exit_time - trade.entry_time).total_seconds() / 3600
                    report.append(f"   {i}. {trade.symbol} | ${trade.pnl:.2f} ({trade.pnl_percent:.2f}%) | {trade.direction}")
                    report.append(f"      –í—Ö–æ–¥: ${trade.entry_price:.4f} ({trade.entry_time.strftime('%Y-%m-%d %H:%M')})")
                    report.append(f"      –í—ã—Ö–æ–¥: ${trade.exit_price:.4f} ({trade.exit_time.strftime('%Y-%m-%d %H:%M')})")
                    report.append(f"      AI: {trade.ai_model} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trade.confidence:.1f}% | –í—Ä–µ–º—è: {hold_time:.1f}—á")
                    report.append("")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —á–∞—Å–∞–º
        if self.config.use_time_filter:
            self._add_hourly_trading_analysis(report, results)
    
    def _add_hourly_trading_analysis(self, report: List[str], results: Dict[str, WinrateTestResult]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ —á–∞—Å–∞–º"""
        all_trades = []
        for result in results.values():
            all_trades.extend(result.trades)
        
        if not all_trades:
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏ –ø–æ —á–∞—Å–∞–º
        hourly_stats = {}
        for trade in all_trades:
            hour = trade.entry_time.hour
            if hour not in hourly_stats:
                hourly_stats[hour] = {
                    'trades': 0,
                    'winning_trades': 0,
                    'total_pnl': 0.0,
                    'avg_confidence': 0.0
                }
            
            hourly_stats[hour]['trades'] += 1
            if trade.pnl > 0:
                hourly_stats[hour]['winning_trades'] += 1
            hourly_stats[hour]['total_pnl'] += trade.pnl
            hourly_stats[hour]['avg_confidence'] += trade.confidence
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for hour_data in hourly_stats.values():
            if hour_data['trades'] > 0:
                hour_data['avg_confidence'] /= hour_data['trades']
                hour_data['winrate'] = (hour_data['winning_trades'] / hour_data['trades']) * 100
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        sorted_hours = sorted(hourly_stats.items(), key=lambda x: x[1]['total_pnl'], reverse=True)
        
        report.append("")
        report.append("üïê " + "=" * 50 + " üïê")
        report.append("‚è∞ –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–õ–ò –ü–û –ß–ê–°–ê–ú (UTC)")
        report.append("üïê " + "=" * 50 + " üïê")
        
        if self.config.trading_hours:
            active_hours = ', '.join(map(str, sorted(self.config.trading_hours)))
            report.append(f"üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã: {active_hours}")
            report.append("")
        
        report.append("üìä –¢–û–ü-10 –°–ê–ú–´–• –ü–†–ò–ë–´–õ–¨–ù–´–• –ß–ê–°–û–í:")
        report.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
        report.append("‚îÇ –ß–ê–° ‚îÇ –°–î–ï–õ–ö–ò  ‚îÇ –í–ò–ù–†–ï–ô–¢ ‚îÇ  P&L    ‚îÇ –£–í–ï–†–ï–ù–ù–û–°–¢–¨ ‚îÇ")
        report.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
        
        for i, (hour, stats) in enumerate(sorted_hours[:10]):
            if i >= 10:
                break
            
            status = "‚úÖ" if self.config.trading_hours and hour in self.config.trading_hours else "‚ùå"
            if not self.config.trading_hours:
                status = "üîÑ"  # –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑
            
            report.append(f"‚îÇ {hour:2d}  ‚îÇ {stats['trades']:7d} ‚îÇ {stats['winrate']:6.1f}% ‚îÇ ${stats['total_pnl']:6.2f} ‚îÇ {stats['avg_confidence']:10.1f}% ‚îÇ {status}")
        
        report.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º —á–∞—Å–∞–º
        if self.config.trading_hours:
            active_trades = sum(stats['trades'] for hour, stats in hourly_stats.items() if hour in self.config.trading_hours)
            active_pnl = sum(stats['total_pnl'] for hour, stats in hourly_stats.items() if hour in self.config.trading_hours)
            inactive_trades = sum(stats['trades'] for hour, stats in hourly_stats.items() if hour not in self.config.trading_hours)
            inactive_pnl = sum(stats['total_pnl'] for hour, stats in hourly_stats.items() if hour not in self.config.trading_hours)
            
            total_trades = active_trades + inactive_trades
            if total_trades > 0:
                report.append("")
                report.append("üìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –§–ò–õ–¨–¢–†–ê –ü–û –í–†–ï–ú–ï–ù–ò:")
                report.append(f"   ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã: {active_trades} —Å–¥–µ–ª–æ–∫ (${active_pnl:.2f})")
                report.append(f"   ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —á–∞—Å—ã: {inactive_trades} —Å–¥–µ–ª–æ–∫ (${inactive_pnl:.2f})")
                if inactive_trades > 0:
                    efficiency = (active_pnl / (active_pnl + inactive_pnl)) * 100 if (active_pnl + inactive_pnl) != 0 else 0
                    report.append(f"   üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞: {efficiency:.1f}% –ø—Ä–∏–±—ã–ª–∏ –æ—Ç {(active_trades/total_trades)*100:.1f}% —Å–¥–µ–ª–æ–∫")
    
    def _save_detailed_csv_reports(self, results: Dict[str, WinrateTestResult]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –≤ CSV —Ñ–∞–π–ª—ã"""
        import csv
        
        profitable_trades, losing_trades = self._get_profitable_and_losing_trades(results)
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è CSV —Ñ–∞–π–ª–æ–≤
        csv_dir = Path("reports/csv_reports")
        csv_dir.mkdir(parents=True, exist_ok=True)
        
        timestamp = get_utc_now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        if profitable_trades:
            profitable_csv_path = csv_dir / f"profitable_trades_{timestamp}.csv"
            with open(profitable_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    '–°–∏–º–≤–æ–ª', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞', '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞', 
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞', '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞', 'P&L ($)', 'P&L (%)', 
                    'AI –º–æ–¥–µ–ª—å', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)', '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞', 
                    '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)', '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', '–ö–æ–º–∏—Å—Å–∏—è'
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for trade in profitable_trades:
                    hold_time = (trade.exit_time - trade.entry_time).total_seconds() / 3600
                    writer.writerow({
                        '–°–∏–º–≤–æ–ª': trade.symbol,
                        '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': trade.direction,
                        '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞': trade.entry_time.strftime('%Y-%m-%d %H:%M:%S'),
                        '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞': trade.exit_time.strftime('%Y-%m-%d %H:%M:%S'),
                        '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{trade.entry_price:.6f}",
                        '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': f"{trade.exit_price:.6f}",
                        'P&L ($)': f"{trade.pnl:.2f}",
                        'P&L (%)': f"{trade.pnl_percent:.2f}",
                        'AI –º–æ–¥–µ–ª—å': trade.ai_model,
                        '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)': f"{trade.confidence:.1f}",
                        '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞': trade.consensus_strength,
                        '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)': f"{hold_time:.2f}",
                        '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': f"{trade.position_size:.2f}",
                        '–ö–æ–º–∏—Å—Å–∏—è': f"{trade.commission:.2f}"
                    })
            
            logger.info(f"üíæ –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {profitable_csv_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        if losing_trades:
            losing_csv_path = csv_dir / f"losing_trades_{timestamp}.csv"
            with open(losing_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    '–°–∏–º–≤–æ–ª', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞', '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞', 
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞', '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞', 'P&L ($)', 'P&L (%)', 
                    'AI –º–æ–¥–µ–ª—å', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)', '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞', 
                    '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)', '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', '–ö–æ–º–∏—Å—Å–∏—è'
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for trade in losing_trades:
                    hold_time = (trade.exit_time - trade.entry_time).total_seconds() / 3600
                    writer.writerow({
                        '–°–∏–º–≤–æ–ª': trade.symbol,
                        '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': trade.direction,
                        '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞': trade.entry_time.strftime('%Y-%m-%d %H:%M:%S'),
                        '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞': trade.exit_time.strftime('%Y-%m-%d %H:%M:%S'),
                        '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{trade.entry_price:.6f}",
                        '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': f"{trade.exit_price:.6f}",
                        'P&L ($)': f"{trade.pnl:.2f}",
                        'P&L (%)': f"{trade.pnl_percent:.2f}",
                        'AI –º–æ–¥–µ–ª—å': trade.ai_model,
                        '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)': f"{trade.confidence:.1f}",
                        '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞': trade.consensus_strength,
                        '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)': f"{hold_time:.2f}",
                        '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': f"{trade.position_size:.2f}",
                        '–ö–æ–º–∏—Å—Å–∏—è': f"{trade.commission:.2f}"
                    })
            
            logger.info(f"üíæ –£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {losing_csv_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        all_trades = profitable_trades + losing_trades
        if all_trades:
            all_trades_csv_path = csv_dir / f"all_trades_{timestamp}.csv"
            with open(all_trades_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    '–°–∏–º–≤–æ–ª', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞', '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞', 
                    '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞', '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞', 'P&L ($)', 'P&L (%)', 
                    'AI –º–æ–¥–µ–ª—å', '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)', '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞', 
                    '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)', '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏', '–ö–æ–º–∏—Å—Å–∏—è', '–†–µ–∑—É–ª—å—Ç–∞—Ç'
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for trade in all_trades:
                    hold_time = (trade.exit_time - trade.entry_time).total_seconds() / 3600
                    result = "–ü—Ä–∏–±—ã–ª—å" if trade.pnl > 0 else "–£–±—ã—Ç–æ–∫"
                    writer.writerow({
                        '–°–∏–º–≤–æ–ª': trade.symbol,
                        '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': trade.direction,
                        '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞': trade.entry_time.strftime('%Y-%m-%d %H:%M:%S'),
                        '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞': trade.exit_time.strftime('%Y-%m-%d %H:%M:%S'),
                        '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': f"{trade.entry_price:.6f}",
                        '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': f"{trade.exit_price:.6f}",
                        'P&L ($)': f"{trade.pnl:.2f}",
                        'P&L (%)': f"{trade.pnl_percent:.2f}",
                        'AI –º–æ–¥–µ–ª—å': trade.ai_model,
                        '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)': f"{trade.confidence:.1f}",
                        '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞': trade.consensus_strength,
                        '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)': f"{hold_time:.2f}",
                        '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': f"{trade.position_size:.2f}",
                        '–ö–æ–º–∏—Å—Å–∏—è': f"{trade.commission:.2f}",
                        '–†–µ–∑—É–ª—å—Ç–∞—Ç': result
                    })
            
            logger.info(f"üíæ –í—Å–µ —Å–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {all_trades_csv_path}")
    
    def _add_ai_models_analytics(self, report: List[str], results: Dict[str, WinrateTestResult]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ AI –º–æ–¥–µ–ª—è–º –≤ –æ—Ç—á–µ—Ç"""
        report.append("")
        report.append("ü§ñ " + "=" * 58 + " ü§ñ")
        report.append("üß† –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AI –ú–û–î–ï–õ–ï–ô")
        report.append("ü§ñ " + "=" * 58 + " ü§ñ")
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º
        all_models_stats = {}
        
        for symbol, result in results.items():
            if result.ai_models_performance:
                for model_name, performance in result.ai_models_performance.items():
                    if model_name not in all_models_stats:
                        all_models_stats[model_name] = {
                            'total_signals': 0,
                            'signals_used_in_trades': 0,
                            'winning_signals': 0,
                            'losing_signals': 0,
                            'total_contribution_to_pnl': 0.0,
                            'total_confidence': 0.0,
                            'confidence_count': 0,
                            'consensus_participations': 0,
                            'total_consensus_opportunities': 0
                        }
                    
                    stats = all_models_stats[model_name]
                    stats['total_signals'] += performance.total_signals
                    stats['signals_used_in_trades'] += performance.signals_used_in_trades
                    stats['winning_signals'] += performance.winning_signals
                    stats['losing_signals'] += performance.losing_signals
                    stats['total_contribution_to_pnl'] += performance.contribution_to_pnl
                    
                    if performance.avg_confidence > 0:
                        stats['total_confidence'] += performance.avg_confidence * performance.total_signals
                        stats['confidence_count'] += performance.total_signals
                    
                    stats['consensus_participations'] += int(performance.consensus_participation_rate * performance.total_signals)
                    stats['total_consensus_opportunities'] += performance.total_signals
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        for model_name, stats in all_models_stats.items():
            if stats['total_signals'] > 0:
                accuracy = (stats['winning_signals'] / (stats['winning_signals'] + stats['losing_signals']) * 100) if (stats['winning_signals'] + stats['losing_signals']) > 0 else 0
                avg_confidence = (stats['total_confidence'] / stats['confidence_count']) if stats['confidence_count'] > 0 else 0
                participation_rate = (stats['consensus_participations'] / stats['total_consensus_opportunities'] * 100) if stats['total_consensus_opportunities'] > 0 else 0
                usage_rate = (stats['signals_used_in_trades'] / stats['total_signals'] * 100) if stats['total_signals'] > 0 else 0
                
                report.append(f"üîπ {model_name}:")
                report.append(f"   üìä –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}")
                report.append(f"   üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —Å–¥–µ–ª–∫–∞—Ö: {stats['signals_used_in_trades']} ({usage_rate:.1f}%)")
                report.append(f"   ‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['winning_signals']}")
                report.append(f"   ‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['losing_signals']}")
                report.append(f"   üèÜ –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤: {accuracy:.1f}%")
                report.append(f"   üé≤ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.1f}%")
                report.append(f"   üí∞ –í–∫–ª–∞–¥ –≤ P&L: ${stats['total_contribution_to_pnl']:.2f}")
                report.append(f"   ü§ù –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ: {participation_rate:.1f}%")
                report.append("")
        
        # –†–µ–π—Ç–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if all_models_stats:
            report.append("üèÖ –†–ï–ô–¢–ò–ù–ì –ú–û–î–ï–õ–ï–ô –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∫–ª–∞–¥—É –≤ P&L
            sorted_by_pnl = sorted(all_models_stats.items(), key=lambda x: x[1]['total_contribution_to_pnl'], reverse=True)
            report.append("üí∞ –ü–æ –≤–∫–ª–∞–¥—É –≤ –ø—Ä–∏–±—ã–ª—å:")
            for i, (model_name, stats) in enumerate(sorted_by_pnl, 1):
                report.append(f"   {i}. {model_name}: ${stats['total_contribution_to_pnl']:.2f}")
            
            report.append("")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏
            sorted_by_accuracy = sorted(all_models_stats.items(), 
                                      key=lambda x: (x[1]['winning_signals'] / (x[1]['winning_signals'] + x[1]['losing_signals'])) if (x[1]['winning_signals'] + x[1]['losing_signals']) > 0 else 0, 
                                      reverse=True)
            report.append("üéØ –ü–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for i, (model_name, stats) in enumerate(sorted_by_accuracy, 1):
                accuracy = (stats['winning_signals'] / (stats['winning_signals'] + stats['losing_signals']) * 100) if (stats['winning_signals'] + stats['losing_signals']) > 0 else 0
                report.append(f"   {i}. {model_name}: {accuracy:.1f}%")
            
            report.append("")
    
    def _add_consensus_analytics(self, report: List[str], results: Dict[str, WinrateTestResult]) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –≤ –æ—Ç—á–µ—Ç"""
        report.append("ü§ù " + "=" * 58 + " ü§ù")
        report.append("üîÑ –ê–ù–ê–õ–ò–ó –ö–û–ù–°–ï–ù–°–£–°–ê AI –ú–û–î–ï–õ–ï–ô")
        report.append("ü§ù " + "=" * 58 + " ü§ù")
        
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        total_consensus_signals = 0
        total_consensus_strength = 0
        consensus_distribution = {2: 0, 3: 0, 4: 0}
        
        for symbol, result in results.items():
            if result.consensus_stats:
                total_consensus_signals += result.consensus_stats.get('total_consensus_signals', 0)
                total_consensus_strength += result.consensus_stats.get('avg_consensus_strength', 0) * result.consensus_stats.get('total_consensus_signals', 0)
                
                consensus_distribution[2] += result.consensus_stats.get('trades_with_2_models', 0)
                consensus_distribution[3] += result.consensus_stats.get('trades_with_3_models', 0)
                consensus_distribution[4] += result.consensus_stats.get('trades_with_4_models', 0)
        
        if total_consensus_signals > 0:
            avg_consensus_strength = total_consensus_strength / total_consensus_signals
            
            report.append(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞:")
            report.append(f"   üéØ –í—Å–µ–≥–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {total_consensus_signals}")
            report.append(f"   üí™ –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {avg_consensus_strength:.1f} –º–æ–¥–µ–ª–µ–π")
            report.append(f"   üìà –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å–¥–µ–ª–∫–∏: {self.config.min_consensus_models} –º–æ–¥–µ–ª–∏")
            report.append("")
            
            report.append("üî¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏–ª–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞:")
            total_trades = sum(consensus_distribution.values())
            if total_trades > 0:
                for models_count, trades_count in consensus_distribution.items():
                    percentage = (trades_count / total_trades) * 100
                    report.append(f"   {models_count} –º–æ–¥–µ–ª–∏: {trades_count} —Å–¥–µ–ª–æ–∫ ({percentage:.1f}%)")
            
            report.append("")
            
            # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            report.append("üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞:")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            consensus_performance = {2: {'trades': 0, 'winning': 0, 'pnl': 0.0}, 
                                   3: {'trades': 0, 'winning': 0, 'pnl': 0.0}, 
                                   4: {'trades': 0, 'winning': 0, 'pnl': 0.0}}
            
            for symbol, result in results.items():
                for trade in result.trades:
                    if hasattr(trade, 'consensus_strength') and trade.consensus_strength in consensus_performance:
                        consensus_performance[trade.consensus_strength]['trades'] += 1
                        consensus_performance[trade.consensus_strength]['pnl'] += trade.pnl
                        if trade.pnl > 0:
                            consensus_performance[trade.consensus_strength]['winning'] += 1
            
            for models_count, perf in consensus_performance.items():
                if perf['trades'] > 0:
                    winrate = (perf['winning'] / perf['trades']) * 100
                    avg_pnl = perf['pnl'] / perf['trades']
                    report.append(f"   {models_count} –º–æ–¥–µ–ª–∏: {winrate:.1f}% –≤–∏–Ω—Ä–µ–π—Ç, ${avg_pnl:.2f} —Å—Ä–µ–¥–Ω–∏–π P&L")
            
            report.append("")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            best_consensus = max(consensus_performance.items(), 
                               key=lambda x: (x[1]['winning'] / x[1]['trades']) if x[1]['trades'] > 0 else 0)
            
            if best_consensus[1]['trades'] > 0:
                best_winrate = (best_consensus[1]['winning'] / best_consensus[1]['trades']) * 100
                report.append("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                report.append(f"   üéØ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {best_consensus[0]} –º–æ–¥–µ–ª–∏")
                report.append(f"   üìä –í–∏–Ω—Ä–µ–π—Ç –ø—Ä–∏ —Ç–∞–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ: {best_winrate:.1f}%")
                
                if best_consensus[0] != self.config.min_consensus_models:
                    report.append(f"   ‚öôÔ∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å min_consensus_models —Å {self.config.min_consensus_models} –Ω–∞ {best_consensus[0]}")
        
        else:
            report.append("‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        report.append("")
        report.append("ü§ù " + "=" * 58 + " ü§ù")

    def _generate_detailed_visualizations(self, results: Dict[str, WinrateTestResult]) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–¥–µ–ª–æ–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ —Å –¥–∞—Ç–æ–π, –ø–µ—Ä–∏–æ–¥–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—â–∏–º –≤–∏–Ω—Ä–µ–π—Ç–æ–º
            timestamp = get_utc_now().strftime("%Y%m%d_%H%M%S")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç
            total_trades = sum(result.total_trades for result in results.values())
            total_winning = sum(result.winning_trades for result in results.values())
            overall_winrate = (total_winning / total_trades * 100) if total_trades > 0 else 0
            
            # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏
            folder_name = f"{timestamp}_period_{self.config.test_period_days}d_winrate_{overall_winrate:.1f}pct"
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä
            output_dir = f"reports/detailed_charts/{folder_name}"
            visualizer = DetailedTradeVisualizer(output_dir)
            
            logger.info(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã –≤ –ø–∞–ø–∫—É: {folder_name}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
            for symbol, result in results.items():
                if result.trades:
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                    visualizer.create_individual_trade_charts(symbol, result.trades)
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä–µ
                    visualizer.create_pair_summary_chart(symbol, result.trades)
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
            visualizer.create_portfolio_overview(results)
            
            logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"""
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ó–û–õ–û–¢–û–ô –ü–Ø–¢–ï–†–ö–û–ô - —Ç–æ–ø –ø—Ä–∏–±—ã–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
        config = TestConfig(
            symbols=['TAOUSDT', 'CRVUSDT', 'ZRXUSDT', 'APTUSDT', 'SANDUSDT']  # üèÜ –¢–æ–ø-5 –ø–∞—Ä –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º 30-–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 50 –ø–∞—Ä
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
        tester = RealWinrateTester(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = await tester.run_full_test()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = tester.generate_report(results)
        print(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        timestamp = get_utc_now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs("reports/winrate_tests", exist_ok=True)
        os.makedirs("reports/winrate_data", exist_ok=True)
        
        # –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        report_file = f"reports/winrate_tests/real_winrate_test_{timestamp}.txt"
        data_file = f"reports/winrate_data/real_winrate_data_{timestamp}.json"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        detailed_data = {}
        for symbol, result in results.items():
            detailed_data[symbol] = {
                'total_trades': result.total_trades,
                'winning_trades': result.winning_trades,
                'losing_trades': result.losing_trades,
                'win_rate': result.win_rate,
                'total_pnl': result.total_pnl,
                'avg_trade_pnl': result.avg_trade_pnl,
                'max_drawdown': result.max_drawdown,
                'sharpe_ratio': result.sharpe_ratio,
                'trades': [
                    {
                        'symbol': trade.symbol,
                        'entry_time': trade.entry_time.isoformat(),
                        'entry_price': trade.entry_price,
                        'exit_time': trade.exit_time.isoformat(),
                        'exit_price': trade.exit_price,
                        'direction': trade.direction,
                        'pnl': trade.pnl,
                        'pnl_percent': trade.pnl_percent,
                        'confidence': trade.confidence,
                        'ai_model': trade.ai_model
                    }
                    for trade in result.trades
                ]
            }
        
        with open(data_file, "w", encoding="utf-8") as f:
            json.dump(detailed_data, f, indent=2, ensure_ascii=False)
        
        logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {report_file}")
        logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {data_file}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())