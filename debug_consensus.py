#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Å–∏–≥–Ω–∞–ª—ã –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è
"""

import asyncio
import pandas as pd
import logging
from datetime import datetime, timedelta
from winrate_test_with_results2 import RealWinrateTester, TestConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def debug_consensus_signals():
    """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º—è–≥–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = TestConfig(
        test_period_days=3,
        symbols=['BTCUSDT'],
        min_confidence=0.001,  # 0.1%
        min_consensus_models=1,
        use_strict_filters=False,
        debug_mode=True,
        min_volatility=0.001,  # 0.1%
        min_volume_ratio=0.01,  # 1%
        min_trend_strength=0.001,  # 0.1%
        min_volume_spike=0.01,  # 1%
        min_rsi_divergence=0.01,  # 1%
        consensus_weight_threshold=0.001  # 0.1%
    )
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: use_strict_filters={config.use_strict_filters}")
    logger.info(f"üìä min_confidence={config.min_confidence}")
    logger.info(f"üìä min_consensus_models={config.min_consensus_models}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = RealWinrateTester(config)
    await tester.initialize()
    
    symbol = 'BTCUSDT'
    logger.info(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await tester.load_historical_data(symbol)
    
    if data is None or len(data) < 50:
        logger.error(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {len(data) if data is not None else 0}")
        return
    
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
    logger.info(f"üìä –ü–µ—Ä–∏–æ–¥: {data.index[0]} - {data.index[-1]}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã AI
    logger.info(f"ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ AI —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol}")
    signals = await tester.get_ai_signals(symbol, data)
    
    logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω–æ {len(signals)} –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    if len(signals) == 0:
        logger.error("‚ùå –ù–ï –ü–û–õ–£–ß–ï–ù–û –ù–ò –û–î–ù–û–ì–û –ö–û–ù–°–ï–ù–°–£–°–ù–û–ì–û –°–ò–ì–ù–ê–õ–ê!")
        logger.error("üîç –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –æ—Ç–¥–µ–ª—å–Ω–æ
        test_data = data.tail(50)  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
        
        individual_signals = []
        for model_name in ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai']:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name}")
            try:
                decision = await tester.get_individual_ai_signal(model_name, symbol, test_data)
                if decision:
                    logger.info(f"‚úÖ {model_name}: {decision.action} (confidence: {decision.confidence:.3f})")
                    individual_signals.append((model_name, decision))
                else:
                    logger.warning(f"‚ö†Ô∏è {model_name}: –ù–µ—Ç —Ä–µ—à–µ–Ω–∏—è")
            except Exception as e:
                logger.error(f"‚ùå {model_name}: –û—à–∏–±–∫–∞ - {e}")
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å –≤—Ä—É—á–Ω—É—é
        if len(individual_signals) > 0:
            logger.info("üîß –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –≤—Ä—É—á–Ω—É—é...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            decisions = [signal[1] for signal in individual_signals]
            
            # –í—ã–∑—ã–≤–∞–µ–º create_consensus_signal –Ω–∞–ø—Ä—è–º—É—é
            try:
                current_price = test_data['close'].iloc[-1]
                current_time = test_data.index[-1]
                
                logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: —Ü–µ–Ω–∞={current_price:.4f}, –≤—Ä–µ–º—è={current_time}")
                logger.info(f"üìä –†–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {[(d.action, d.confidence) for d in decisions]}")
                
                consensus = await tester.create_consensus_signal(
                    symbol, test_data, decisions
                )
                
                if consensus:
                    logger.info(f"‚úÖ –ö–û–ù–°–ï–ù–°–£–° –°–û–ó–î–ê–ù: {consensus.final_action} (confidence: {consensus.confidence_avg:.3f})")
                else:
                    logger.error("‚ùå –ö–û–ù–°–ï–ù–°–£–° –ù–ï –°–û–ó–î–ê–ù - —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ None")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {e}")
                import traceback
                logger.error(traceback.format_exc())
    else:
        logger.info("‚úÖ –ö–û–ù–°–ï–ù–°–£–°–ù–´–ï –°–ò–ì–ù–ê–õ–´ –ü–û–õ–£–ß–ï–ù–´!")
        for i, signal in enumerate(signals, 1):
            logger.info(f"üìà –°–∏–≥–Ω–∞–ª {i}: {signal.final_action} –Ω–∞ {signal.price:.4f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence_avg:.3f})")

if __name__ == "__main__":
    asyncio.run(debug_consensus_signals())