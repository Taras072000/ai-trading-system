"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –û–¢–°–£–¢–°–¢–í–ò–Ø –°–î–ï–õ–û–ö
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω, –ø–æ—á–µ–º—É —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏

–ê–≤—Ç–æ—Ä: AI Trading System
–î–∞—Ç–∞: 2024
"""

import asyncio
import pandas as pd
import numpy as np
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from winrate_test_with_results2 import RealWinrateTester, TestConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class ZeroTradesAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–¥–µ–ª–æ–∫"""
    timestamp: str
    
    # –ê–Ω–∞–ª–∏–∑ AI —Å–∏–≥–Ω–∞–ª–æ–≤
    ai_signals_generated: Dict[str, int]
    ai_signals_quality: Dict[str, float]
    ai_models_active: List[str]
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filters_blocking: Dict[str, int]
    consensus_failures: int
    confidence_failures: int
    
    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    data_availability: Dict[str, bool]
    market_conditions: Dict[str, Any]
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    immediate_fixes: List[str]
    parameter_adjustments: List[str]
    
    # –î–∏–∞–≥–Ω–æ–∑
    root_cause: str
    severity: str

class ZeroTradesDiagnostics:
    """
    üîç –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–°–£–¢–°–¢–í–ò–Ø –°–î–ï–õ–û–ö
    
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π —ç—Ç–∞–ø –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Å–∏–≥–Ω–∞–ª–æ–≤
    3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
    5. –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
    """
    
    def __init__(self):
        self.tester = None
        self.analysis_results = {}
        
        logger.info("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–¥–µ–ª–æ–∫")
    
    async def run_zero_trades_analysis(self, symbols: List[str] = None) -> ZeroTradesAnalysis:
        """
        üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –û–¢–°–£–¢–°–¢–í–ò–Ø –°–î–ï–õ–û–ö
        
        –≠—Ç–∞–ø—ã:
        1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        2. –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–∏–≥–Ω–∞–ª–æ–≤
        3. –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
        4. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        5. –í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–¥–µ–ª–æ–∫...")
        
        if symbols is None:
            symbols = ['BTCUSDT', 'ETHUSDT']
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            config = TestConfig(
                symbols=symbols,
                test_period_days=1,  # –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                position_size_percent=0.02,
                min_confidence=0.01,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥
                min_consensus_models=1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å
                enabled_ai_models=['trading_ai', 'lava_ai'],
                use_strict_filters=False,  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
                min_volatility=0.0,  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                min_volume_ratio=0.0,  # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞
                use_time_filter=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
                require_volume_confirmation=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–º
            )
            
            self.tester = RealWinrateTester(config)
            await self.tester.initialize()
            
            # –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä –≠—Ç–∞–ø 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
            data_analysis = await self._analyze_data_availability(symbols)
            
            # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–∏–≥–Ω–∞–ª–æ–≤
            logger.info("ü§ñ –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–∏–≥–Ω–∞–ª–æ–≤...")
            ai_analysis = await self._analyze_ai_signal_generation(symbols)
            
            # –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤
            logger.info("üîç –≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
            filter_analysis = await self._analyze_filter_blocking(symbols)
            
            # –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            logger.info("ü§ù –≠—Ç–∞–ø 4: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞...")
            consensus_analysis = await self._analyze_consensus_failures(symbols)
            
            # –≠—Ç–∞–ø 5: –í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã
            logger.info("üéØ –≠—Ç–∞–ø 5: –í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã...")
            root_cause_analysis = await self._identify_root_cause(
                data_analysis, ai_analysis, filter_analysis, consensus_analysis
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            analysis = ZeroTradesAnalysis(
                timestamp=datetime.now().isoformat(),
                ai_signals_generated=ai_analysis['signals_generated'],
                ai_signals_quality=ai_analysis['signals_quality'],
                ai_models_active=ai_analysis['models_active'],
                filters_blocking=filter_analysis['blocking_filters'],
                consensus_failures=consensus_analysis['failures'],
                confidence_failures=filter_analysis['confidence_failures'],
                data_availability=data_analysis['availability'],
                market_conditions=data_analysis['market_conditions'],
                immediate_fixes=root_cause_analysis['immediate_fixes'],
                parameter_adjustments=root_cause_analysis['parameter_adjustments'],
                root_cause=root_cause_analysis['root_cause'],
                severity=root_cause_analysis['severity']
            )
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            await self._create_zero_trades_report(analysis)
            
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            raise
    
    async def _analyze_data_availability(self, symbols: List[str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üìä –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö...")
        
        data_availability = {}
        market_conditions = {}
        
        for symbol in symbols:
            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                data = await self.tester.load_historical_data(symbol)
                
                if data is not None and len(data) > 0:
                    data_availability[symbol] = True
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                    latest_price = data['close'].iloc[-1]
                    price_change_24h = ((latest_price - data['close'].iloc[-24]) / data['close'].iloc[-24]) * 100 if len(data) >= 24 else 0
                    volume_avg = data['volume'].tail(24).mean() if len(data) >= 24 else 0
                    volatility = data['close'].pct_change().std() * 100
                    
                    market_conditions[symbol] = {
                        'latest_price': latest_price,
                        'price_change_24h': price_change_24h,
                        'volume_avg': volume_avg,
                        'volatility': volatility,
                        'data_points': len(data)
                    }
                    
                    logger.info(f"üìä {symbol}: {len(data)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {volatility:.2f}%")
                else:
                    data_availability[symbol] = False
                    market_conditions[symbol] = {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                    logger.warning(f"‚ö†Ô∏è {symbol}: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                    
            except Exception as e:
                data_availability[symbol] = False
                market_conditions[symbol] = {'error': str(e)}
                logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö - {e}")
        
        return {
            'availability': data_availability,
            'market_conditions': market_conditions
        }
    
    async def _analyze_ai_signal_generation(self, symbols: List[str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("ü§ñ –ê–Ω–∞–ª–∏–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        signals_generated = {}
        signals_quality = {}
        models_active = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é AI –º–æ–¥–µ–ª—å
        ai_models = ['trading_ai', 'lava_ai', 'gemini_ai', 'claude_ai']
        
        for model_name in ai_models:
            signals_generated[model_name] = 0
            signals_quality[model_name] = 0.0
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                if hasattr(self.tester, 'ai_orchestrator') and self.tester.ai_orchestrator:
                    model_available = await self._check_model_availability(model_name)
                    if model_available:
                        models_active.append(model_name)
                        
                        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–≥–Ω–∞–ª–æ–≤
                        for symbol in symbols:
                            data = await self.tester.load_historical_data(symbol)
                            if data is not None and len(data) > 0:
                                try:
                                    signal = await self.tester.get_individual_ai_signal(model_name, symbol, data)
                                    if signal:
                                        signals_generated[model_name] += 1
                                        signals_quality[model_name] = max(signals_quality[model_name], signal.confidence)
                                        logger.info(f"ü§ñ {model_name} -> {symbol}: {signal.action} (confidence: {signal.confidence:.2f})")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è {model_name} -> {symbol}: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞")
                                except Exception as e:
                                    logger.error(f"‚ùå {model_name} -> {symbol}: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ - {e}")
                    else:
                        logger.warning(f"‚ö†Ô∏è {model_name}: –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        
            except Exception as e:
                logger.error(f"‚ùå {model_name}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ - {e}")
        
        logger.info(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(models_active)}, –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {sum(signals_generated.values())}")
        
        return {
            'signals_generated': signals_generated,
            'signals_quality': signals_quality,
            'models_active': models_active
        }
    
    async def _check_model_availability(self, model_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
            if model_name == 'trading_ai':
                return hasattr(self.tester, 'trading_ai') and self.tester.trading_ai is not None
            elif model_name == 'lava_ai':
                return hasattr(self.tester, 'lava_ai') and self.tester.lava_ai is not None
            elif model_name == 'gemini_ai':
                return hasattr(self.tester, 'gemini_ai') and self.tester.gemini_ai is not None
            elif model_name == 'claude_ai':
                return hasattr(self.tester, 'claude_ai') and self.tester.claude_ai is not None
            else:
                return False
        except:
            return False
    
    async def _analyze_filter_blocking(self, symbols: List[str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç—ã —Ñ–∏–ª—å—Ç—Ä–æ–≤...")
        
        blocking_filters = {
            'confidence_filter': 0,
            'volatility_filter': 0,
            'volume_filter': 0,
            'time_filter': 0,
            'technical_filter': 0
        }
        
        confidence_failures = 0
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        for symbol in symbols:
            data = await self.tester.load_historical_data(symbol)
            if data is not None and len(data) > 0:
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                test_confidence = 0.15  # –¢–µ—Å—Ç–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                if test_confidence < self.tester.config.min_confidence:
                    blocking_filters['confidence_filter'] += 1
                    confidence_failures += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                volatility = data['close'].pct_change().std()
                if volatility < self.tester.config.min_volatility:
                    blocking_filters['volatility_filter'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–∞
                volume_ratio = self.tester._calculate_volume_ratio(data)
                if volume_ratio < self.tester.config.min_volume_ratio:
                    blocking_filters['volume_filter'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä
                if self.tester.config.use_time_filter:
                    current_hour = datetime.now().hour
                    if not self.tester.is_trading_hour_allowed(datetime.now()):
                        blocking_filters['time_filter'] += 1
        
        logger.info(f"üîç –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {sum(blocking_filters.values())}")
        
        return {
            'blocking_filters': blocking_filters,
            'confidence_failures': confidence_failures
        }
    
    async def _analyze_consensus_failures(self, symbols: List[str]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"""
        logger.info("ü§ù –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞...")
        
        consensus_failures = 0
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        for symbol in symbols:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
            test_decisions = [
                {'model': 'trading_ai', 'action': 'BUY', 'confidence': 0.3},
                {'model': 'lava_ai', 'action': 'HOLD', 'confidence': 0.2}
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
            buy_votes = sum(1 for d in test_decisions if d['action'] == 'BUY')
            sell_votes = sum(1 for d in test_decisions if d['action'] == 'SELL')
            
            if max(buy_votes, sell_votes) < self.tester.config.min_consensus_models:
                consensus_failures += 1
        
        logger.info(f"ü§ù –ù–µ—É–¥–∞—á –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {consensus_failures}")
        
        return {
            'failures': consensus_failures
        }
    
    async def _identify_root_cause(self, data_analysis: Dict, ai_analysis: Dict, 
                                 filter_analysis: Dict, consensus_analysis: Dict) -> Dict[str, Any]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã"""
        logger.info("üéØ –í—ã—è–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–∏—á–∏–Ω—ã...")
        
        immediate_fixes = []
        parameter_adjustments = []
        root_cause = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
        severity = "MEDIUM"
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if not all(data_analysis['availability'].values()):
            root_cause = "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
            severity = "CRITICAL"
            immediate_fixes.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É –¥–∞–Ω–Ω—ã—Ö")
            immediate_fixes.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º AI –º–æ–¥–µ–ª–∏
        elif len(ai_analysis['models_active']) == 0:
            root_cause = "–ù–∏ –æ–¥–Ω–∞ AI –º–æ–¥–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
            severity = "CRITICAL"
            immediate_fixes.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AI –º–æ–¥–µ–ª–µ–π")
            immediate_fixes.append("–£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π –¥–ª—è AI")
        
        elif sum(ai_analysis['signals_generated'].values()) == 0:
            root_cause = "AI –º–æ–¥–µ–ª–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Å–∏–≥–Ω–∞–ª—ã"
            severity = "HIGH"
            immediate_fixes.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ AI –º–æ–¥–µ–ª—è—Ö")
            parameter_adjustments.append("–°–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–µ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        elif filter_analysis['confidence_failures'] > 0:
            root_cause = "–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
            severity = "MEDIUM"
            parameter_adjustments.append(f"–°–Ω–∏–∑–∏—Ç—å min_confidence —Å {self.tester.config.min_confidence} –¥–æ 0.15")
        
        elif sum(filter_analysis['blocking_filters'].values()) > 0:
            root_cause = "–§–∏–ª—å—Ç—Ä—ã –±–ª–æ–∫–∏—Ä—É—é—Ç –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã"
            severity = "MEDIUM"
            parameter_adjustments.append("–û—Å–ª–∞–±–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä–µ–º–∞")
            parameter_adjustments.append("–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
        elif consensus_analysis['failures'] > 0:
            root_cause = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"
            severity = "MEDIUM"
            parameter_adjustments.append(f"–°–Ω–∏–∑–∏—Ç—å min_consensus_models —Å {self.tester.config.min_consensus_models} –¥–æ 1")
        
        logger.info(f"üéØ –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: {root_cause} (—Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {severity})")
        
        return {
            'root_cause': root_cause,
            'severity': severity,
            'immediate_fixes': immediate_fixes,
            'parameter_adjustments': parameter_adjustments
        }
    
    async def _create_zero_trades_report(self, analysis: ZeroTradesAnalysis):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é —Å–¥–µ–ª–æ–∫"""
        report_lines = [
            "=" * 80,
            "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢: –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–°–£–¢–°–¢–í–ò–Ø –°–î–ï–õ–û–ö",
            "=" * 80,
            f"üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "üéØ –ö–û–†–ù–ï–í–ê–Ø –ü–†–ò–ß–ò–ù–ê:",
            "-" * 50,
            f"   {analysis.root_cause}",
            f"   –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {analysis.severity}",
            "",
            "ü§ñ –ê–ù–ê–õ–ò–ó AI –ú–û–î–ï–õ–ï–ô:",
            "-" * 50,
            f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(analysis.ai_models_active)}",
            f"   –ú–æ–¥–µ–ª–∏: {', '.join(analysis.ai_models_active)}",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º
        report_lines.append("   –°–∏–≥–Ω–∞–ª—ã –ø–æ –º–æ–¥–µ–ª—è–º:")
        for model, count in analysis.ai_signals_generated.items():
            quality = analysis.ai_signals_quality.get(model, 0)
            report_lines.append(f"     ‚Ä¢ {model}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤ (–∫–∞—á–µ—Å—Ç–≤–æ: {quality:.2f})")
        
        report_lines.extend([
            "",
            "üîç –ê–ù–ê–õ–ò–ó –§–ò–õ–¨–¢–†–û–í:",
            "-" * 50,
            f"   –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {analysis.confidence_failures}",
            f"   –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {sum(analysis.filters_blocking.values())}",
            ""
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        report_lines.append("   –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ —Ç–∏–ø–∞–º:")
        for filter_name, count in analysis.filters_blocking.items():
            if count > 0:
                report_lines.append(f"     ‚Ä¢ {filter_name}: {count}")
        
        report_lines.extend([
            "",
            "ü§ù –ê–ù–ê–õ–ò–ó –ö–û–ù–°–ï–ù–°–£–°–ê:",
            "-" * 50,
            f"   –ù–µ—É–¥–∞—á –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {analysis.consensus_failures}",
            "",
            "üìä –†–´–ù–û–ß–ù–´–ï –£–°–õ–û–í–ò–Ø:",
            "-" * 50
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        for symbol, conditions in analysis.market_conditions.items():
            if 'error' not in conditions:
                report_lines.append(f"   {symbol}:")
                report_lines.append(f"     ‚Ä¢ –¶–µ–Ω–∞: {conditions.get('latest_price', 0):.2f}")
                report_lines.append(f"     ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {conditions.get('price_change_24h', 0):.2f}%")
                report_lines.append(f"     ‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {conditions.get('volatility', 0):.2f}%")
                report_lines.append(f"     ‚Ä¢ –¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: {conditions.get('data_points', 0)}")
            else:
                report_lines.append(f"   {symbol}: –û–®–ò–ë–ö–ê - {conditions['error']}")
        
        report_lines.extend([
            "",
            "üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:",
            "-" * 50
        ])
        
        for fix in analysis.immediate_fixes:
            report_lines.append(f"   ‚Ä¢ {fix}")
        
        if not analysis.immediate_fixes:
            report_lines.append("   –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        report_lines.extend([
            "",
            "üéõÔ∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:",
            "-" * 50
        ])
        
        for adjustment in analysis.parameter_adjustments:
            report_lines.append(f"   ‚Ä¢ {adjustment}")
        
        if not analysis.parameter_adjustments:
            report_lines.append("   –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è")
        
        report_lines.extend([
            "",
            "=" * 80,
            "‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê",
            "=" * 80
        ])
        
        report_content = "\n".join(report_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_filename = f"zero_trades_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {report_filename}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–¥–µ–ª–æ–∫"""
    print("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–¥–µ–ª–æ–∫...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    diagnostics = ZeroTradesDiagnostics()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
    try:
        analysis = await diagnostics.run_zero_trades_analysis(['BTCUSDT', 'ETHUSDT'])
        
        print("\n" + "="*60)
        print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–¢–°–£–¢–°–¢–í–ò–Ø –°–î–ï–õ–û–ö –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*60)
        print(f"üéØ –ö–æ—Ä–Ω–µ–≤–∞—è –ø—Ä–∏—á–∏–Ω–∞: {analysis.root_cause}")
        print(f"‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {analysis.severity}")
        print(f"ü§ñ –ê–∫—Ç–∏–≤–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π: {len(analysis.ai_models_active)}")
        print(f"üìä –°–∏–≥–Ω–∞–ª–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {sum(analysis.ai_signals_generated.values())}")
        print(f"üîç –ë–ª–æ–∫–∏—Ä–æ–≤–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {sum(analysis.filters_blocking.values())}")
        print(f"ü§ù –ù–µ—É–¥–∞—á –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞: {analysis.consensus_failures}")
        print("="*60)
        
        if analysis.immediate_fixes:
            print("\nüö® –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
            for fix in analysis.immediate_fixes:
                print(f"   ‚Ä¢ {fix}")
        
        if analysis.parameter_adjustments:
            print("\nüéõÔ∏è –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
            for adjustment in analysis.parameter_adjustments:
                print(f"   ‚Ä¢ {adjustment}")
        
        print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: zero_trades_analysis_*.txt")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())