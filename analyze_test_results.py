#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
"""

import json
import os
from datetime import datetime

def analyze_test_results(filename):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    with open(filename, 'r', encoding='utf-8') as f:
        data = json.load(f)

    print('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ï–ô')
    print('='*60)

    summary = {}
    
    for model_name, model_data in data.items():
        print(f'\nüìä –ú–û–î–ï–õ–¨: {model_name.upper()}')
        print('-' * 40)
        
        total_signals = 0
        working_pairs = 0
        total_methods = 0
        successful_methods = 0
        
        for symbol, result in model_data.items():
            if 'performance_analysis' in result:
                analysis = result['performance_analysis']
                status = analysis['status']
                signals = analysis['signals_generated']
                success_rate = analysis['success_rate']
                
                print(f'  {symbol}: {status} | –°–∏–≥–Ω–∞–ª—ã: {signals} | –£—Å–ø–µ—Ö: {success_rate:.1f}%')
                
                if status == 'working':
                    working_pairs += 1
                total_signals += signals
                total_methods += analysis['total_methods_tested']
                successful_methods += analysis['successful_methods']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if 'recommendations' in result:
                    for rec in result['recommendations']:
                        print(f'    {rec}')
        
        total_pairs = len(model_data)
        overall_success = (working_pairs / total_pairs * 100) if total_pairs > 0 else 0
        method_success = (successful_methods / total_methods * 100) if total_methods > 0 else 0
        
        print(f'  üìà –ò–¢–û–ì–û: {working_pairs}/{total_pairs} –ø–∞—Ä —Ä–∞–±–æ—Ç–∞—é—Ç ({overall_success:.1f}%)')
        print(f'  üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}')
        print(f'  üîß –ú–µ—Ç–æ–¥—ã: {successful_methods}/{total_methods} —Ä–∞–±–æ—Ç–∞—é—Ç ({method_success:.1f}%)')
        
        if overall_success == 0:
            status_text = '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'
        elif overall_success < 50:
            status_text = '‚ö†Ô∏è –†–ê–ë–û–¢–ê–ï–¢ –ü–õ–û–•–û'
        else:
            status_text = '‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û'
            
        print(f'  üìä –°–¢–ê–¢–£–°: {status_text}')
        
        summary[model_name] = {
            'working_pairs': working_pairs,
            'total_pairs': total_pairs,
            'success_rate': overall_success,
            'total_signals': total_signals,
            'method_success': method_success,
            'status': status_text
        }
    
    # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    print(f'\nüéØ –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó')
    print('='*60)
    
    working_models = 0
    total_models = len(summary)
    
    for model_name, stats in summary.items():
        if stats['success_rate'] > 0:
            working_models += 1
    
    print(f'üìä –†–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏: {working_models}/{total_models}')
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    print(f'\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ')
    print('='*60)
    
    for model_name, stats in summary.items():
        if stats['success_rate'] == 0:
            print(f'‚ùå {model_name.upper()}: –ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–æ–¥—ã –∏ API')
        elif stats['success_rate'] < 100:
            print(f'‚ö†Ô∏è {model_name.upper()}: –†–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')
        else:
            print(f'‚úÖ {model_name.upper()}: –†–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ')

if __name__ == "__main__":
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = "individual_test_results"
    if os.path.exists(results_dir):
        files = [f for f in os.listdir(results_dir) if f.endswith('.json')]
        if files:
            latest_file = max(files, key=lambda x: os.path.getctime(os.path.join(results_dir, x)))
            analyze_test_results(os.path.join(results_dir, latest_file))
        else:
            print("–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("–ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
"""
–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
"""

import json
import os
from datetime import datetime

def analyze_test_results(filename):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    with open(filename, 'r', encoding='utf-8') as f:
        data = json.load(f)

    print('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ï–ô')
    print('='*60)

    summary = {}
    
    for model_name, model_data in data.items():
        print(f'\nüìä –ú–û–î–ï–õ–¨: {model_name.upper()}')
        print('-' * 40)
        
        total_signals = 0
        working_pairs = 0
        total_methods = 0
        successful_methods = 0
        
        for symbol, result in model_data.items():
            if 'performance_analysis' in result:
                analysis = result['performance_analysis']
                status = analysis['status']
                signals = analysis['signals_generated']
                success_rate = analysis['success_rate']
                
                print(f'  {symbol}: {status} | –°–∏–≥–Ω–∞–ª—ã: {signals} | –£—Å–ø–µ—Ö: {success_rate:.1f}%')
                
                if status == 'working':
                    working_pairs += 1
                total_signals += signals
                total_methods += analysis['total_methods_tested']
                successful_methods += analysis['successful_methods']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if 'recommendations' in result:
                    for rec in result['recommendations']:
                        print(f'    {rec}')
        
        total_pairs = len(model_data)
        overall_success = (working_pairs / total_pairs * 100) if total_pairs > 0 else 0
        method_success = (successful_methods / total_methods * 100) if total_methods > 0 else 0
        
        print(f'  üìà –ò–¢–û–ì–û: {working_pairs}/{total_pairs} –ø–∞—Ä —Ä–∞–±–æ—Ç–∞—é—Ç ({overall_success:.1f}%)')
        print(f'  üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}')
        print(f'  üîß –ú–µ—Ç–æ–¥—ã: {successful_methods}/{total_methods} —Ä–∞–±–æ—Ç–∞—é—Ç ({method_success:.1f}%)')
        
        if overall_success == 0:
            status_text = '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢'
        elif overall_success < 50:
            status_text = '‚ö†Ô∏è –†–ê–ë–û–¢–ê–ï–¢ –ü–õ–û–•–û'
        else:
            status_text = '‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û'
            
        print(f'  üìä –°–¢–ê–¢–£–°: {status_text}')
        
        summary[model_name] = {
            'working_pairs': working_pairs,
            'total_pairs': total_pairs,
            'success_rate': overall_success,
            'total_signals': total_signals,
            'method_success': method_success,
            'status': status_text
        }
    
    # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑
    print(f'\nüéØ –û–ë–©–ò–ô –ê–ù–ê–õ–ò–ó')
    print('='*60)
    
    working_models = 0
    total_models = len(summary)
    
    for model_name, stats in summary.items():
        if stats['success_rate'] > 0:
            working_models += 1
    
    print(f'üìä –†–∞–±–æ—Ç–∞—é—â–∏–µ –º–æ–¥–µ–ª–∏: {working_models}/{total_models}')
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    print(f'\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ')
    print('='*60)
    
    for model_name, stats in summary.items():
        if stats['success_rate'] == 0:
            print(f'‚ùå {model_name.upper()}: –ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–æ–¥—ã –∏ API')
        elif stats['success_rate'] < 100:
            print(f'‚ö†Ô∏è {model_name.upper()}: –†–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ - –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')
        else:
            print(f'‚úÖ {model_name.upper()}: –†–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ')

if __name__ == "__main__":
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = "individual_test_results"
    if os.path.exists(results_dir):
        files = [f for f in os.listdir(results_dir) if f.endswith('.json')]
        if files:
            latest_file = max(files, key=lambda x: os.path.getctime(os.path.join(results_dir, x)))
            analyze_test_results(os.path.join(results_dir, latest_file))
        else:
            print("–§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("–ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")