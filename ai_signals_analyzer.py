#!/usr/bin/env python3
"""
AI Signals Quality Analyzer
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ AI —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-01-22
"""

import pandas as pd
import numpy as np
from datetime import datetime
from typing import Dict, List, Tuple, Any
import os
from collections import defaultdict

class AISignalsAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ AI —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self, csv_file_path: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        
        Args:
            csv_file_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤
        """
        self.csv_file_path = csv_file_path
        self.df = None
        self.ai_models = []
        self.symbols = []
        self.analysis_results = {}
        
    def load_data(self) -> bool:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        """
        try:
            if not os.path.exists(self.csv_file_path):
                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.csv_file_path}")
                return False
                
            self.df = pd.read_csv(self.csv_file_path)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.df)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
            column_mapping = {
                '–°–∏–º–≤–æ–ª': 'symbol',
                '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': 'direction', 
                '–í—Ä–µ–º—è –≤—Ö–æ–¥–∞': 'entry_time',
                '–í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞': 'exit_time',
                '–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞': 'entry_price',
                '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞': 'exit_price',
                'P&L ($)': 'pnl',
                'P&L (%)': 'pnl_percent',
                'AI –º–æ–¥–µ–ª—å': 'ai_model',
                '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)': 'confidence',
                '–°–∏–ª–∞ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞': 'consensus_strength',
                '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è (—á)': 'holding_time',
                '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏': 'position_size',
                '–ö–æ–º–∏—Å—Å–∏—è': 'commission',
                '–†–µ–∑—É–ª—å—Ç–∞—Ç': 'result'
            }
            
            self.df = self.df.rename(columns=column_mapping)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
            self.df['result'] = self.df['result'].map({'–ü—Ä–∏–±—ã–ª—å': 'profit', '–£–±—ã—Ç–æ–∫': 'loss'})
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –∏ —Å–∏–º–≤–æ–ª—ã
            self.ai_models = sorted(self.df['ai_model'].unique())
            self.symbols = sorted(self.df['symbol'].unique())
            
            print(f"üìä AI –º–æ–¥–µ–ª–∏: {self.ai_models}")
            print(f"üí± –°–∏–º–≤–æ–ª—ã: {self.symbols}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def analyze_model_performance(self, model_name: str) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π AI –º–æ–¥–µ–ª–∏
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ AI –º–æ–¥–µ–ª–∏
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
        """
        model_data = self.df[self.df['ai_model'] == model_name].copy()
        
        if len(model_data) == 0:
            return {"error": f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏ {model_name}"}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(model_data)
        profitable_trades = len(model_data[model_data['result'] == 'profit'])
        losing_trades = len(model_data[model_data['result'] == 'loss'])
        
        win_rate = (profitable_trades / total_trades) * 100 if total_trades > 0 else 0
        
        # P&L –∞–Ω–∞–ª–∏–∑
        total_pnl = model_data['pnl'].sum()
        avg_pnl = model_data['pnl'].mean()
        avg_profit = model_data[model_data['result'] == 'profit']['pnl'].mean() if profitable_trades > 0 else 0
        avg_loss = model_data[model_data['result'] == 'loss']['pnl'].mean() if losing_trades > 0 else 0
        
        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏
        best_trade = model_data.loc[model_data['pnl'].idxmax()] if len(model_data) > 0 else None
        worst_trade = model_data.loc[model_data['pnl'].idxmin()] if len(model_data) > 0 else None
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        symbol_analysis = {}
        for symbol in self.symbols:
            symbol_data = model_data[model_data['symbol'] == symbol]
            if len(symbol_data) > 0:
                symbol_analysis[symbol] = {
                    'trades': len(symbol_data),
                    'win_rate': (len(symbol_data[symbol_data['result'] == 'profit']) / len(symbol_data)) * 100,
                    'total_pnl': symbol_data['pnl'].sum(),
                    'avg_pnl': symbol_data['pnl'].mean()
                }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        direction_analysis = {}
        for direction in ['LONG', 'SHORT']:
            dir_data = model_data[model_data['direction'] == direction]
            if len(dir_data) > 0:
                direction_analysis[direction] = {
                    'trades': len(dir_data),
                    'win_rate': (len(dir_data[dir_data['result'] == 'profit']) / len(dir_data)) * 100,
                    'total_pnl': dir_data['pnl'].sum(),
                    'avg_pnl': dir_data['pnl'].mean()
                }
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (confidence)
        avg_confidence = model_data['confidence'].mean()
        confidence_profitable = model_data[model_data['result'] == 'profit']['confidence'].mean() if profitable_trades > 0 else 0
        confidence_losing = model_data[model_data['result'] == 'loss']['confidence'].mean() if losing_trades > 0 else 0
        
        return {
            'model_name': model_name,
            'total_trades': total_trades,
            'profitable_trades': profitable_trades,
            'losing_trades': losing_trades,
            'win_rate': win_rate,
            'total_pnl': total_pnl,
            'avg_pnl': avg_pnl,
            'avg_profit': avg_profit,
            'avg_loss': avg_loss,
            'best_trade': {
                'symbol': best_trade['symbol'] if best_trade is not None else None,
                'pnl': best_trade['pnl'] if best_trade is not None else 0,
                'direction': best_trade['direction'] if best_trade is not None else None
            },
            'worst_trade': {
                'symbol': worst_trade['symbol'] if worst_trade is not None else None,
                'pnl': worst_trade['pnl'] if worst_trade is not None else 0,
                'direction': worst_trade['direction'] if worst_trade is not None else None
            },
            'symbol_analysis': symbol_analysis,
            'direction_analysis': direction_analysis,
            'avg_confidence': avg_confidence,
            'confidence_profitable': confidence_profitable,
            'confidence_losing': confidence_losing
        }
    
    def analyze_all_models(self) -> Dict[str, Dict[str, Any]]:
        """
        –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö AI –º–æ–¥–µ–ª–µ–π
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        """
        results = {}
        
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò AI –ú–û–î–ï–õ–ï–ô")
        print("=" * 60)
        
        for model in self.ai_models:
            print(f"\nüìà –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–∏: {model}")
            results[model] = self.analyze_model_performance(model)
            
        self.analysis_results = results
        return results
    
    def print_model_report(self, model_name: str, analysis: Dict[str, Any]):
        """
        –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–æ–¥–µ–ª–∏
        
        Args:
            model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥–µ–ª–∏
        """
        print(f"\n{'='*20} {model_name.upper()} {'='*20}")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {analysis['total_trades']}")
        print(f"   ‚Ä¢ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {analysis['profitable_trades']} ({analysis['win_rate']:.1f}%)")
        print(f"   ‚Ä¢ –£–±—ã—Ç–æ—á–Ω—ã—Ö: {analysis['losing_trades']} ({100-analysis['win_rate']:.1f}%)")
        print(f"   ‚Ä¢ –û–±—â–∏–π P&L: ${analysis['total_pnl']:.2f}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π P&L: ${analysis['avg_pnl']:.2f}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: ${analysis['avg_profit']:.2f}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: ${analysis['avg_loss']:.2f}")
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['avg_confidence']:.1f}%")
        print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {analysis['confidence_profitable']:.1f}%")
        print(f"   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É–±—ã—Ç–æ—á–Ω—ã—Ö: {analysis['confidence_losing']:.1f}%")
        
        # –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏
        print(f"\nüèÜ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏:")
        print(f"   ‚Ä¢ –õ—É—á—à–∞—è: {analysis['best_trade']['symbol']} {analysis['best_trade']['direction']} = ${analysis['best_trade']['pnl']:.2f}")
        print(f"   ‚Ä¢ –•—É–¥—à–∞—è: {analysis['worst_trade']['symbol']} {analysis['worst_trade']['direction']} = ${analysis['worst_trade']['pnl']:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        print(f"\nüí± –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–∏–º–≤–æ–ª–∞–º:")
        for symbol, data in analysis['symbol_analysis'].items():
            print(f"   ‚Ä¢ {symbol}: {data['trades']} —Å–¥–µ–ª–æ–∫, WR: {data['win_rate']:.1f}%, P&L: ${data['total_pnl']:.2f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        print(f"\nüìàüìâ –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:")
        for direction, data in analysis['direction_analysis'].items():
            print(f"   ‚Ä¢ {direction}: {data['trades']} —Å–¥–µ–ª–æ–∫, WR: {data['win_rate']:.1f}%, P&L: ${data['total_pnl']:.2f}")
    
    def create_comparison_table(self) -> pd.DataFrame:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        
        Returns:
            DataFrame —Å —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
        """
        comparison_data = []
        
        for model_name, analysis in self.analysis_results.items():
            comparison_data.append({
                '–ú–æ–¥–µ–ª—å': model_name,
                '–°–¥–µ–ª–æ–∫': analysis['total_trades'],
                'Win Rate (%)': f"{analysis['win_rate']:.1f}%",
                '–û–±—â–∏–π P&L ($)': f"{analysis['total_pnl']:.2f}",
                '–°—Ä–µ–¥–Ω–∏–π P&L ($)': f"{analysis['avg_pnl']:.2f}",
                '–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (%)': f"{analysis['avg_confidence']:.1f}%",
                '–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞ ($)': f"{analysis['best_trade']['pnl']:.2f}",
                '–•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞ ($)': f"{analysis['worst_trade']['pnl']:.2f}"
            })
        
        df_comparison = pd.DataFrame(comparison_data)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–±—â–µ–º—É P&L (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        df_comparison = df_comparison.sort_values('–û–±—â–∏–π P&L ($)', key=lambda x: x.str.replace('$', '').astype(float), ascending=False)
        
        return df_comparison
    
    def print_comparison_table(self):
        """–í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        print(f"\n{'='*80}")
        print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê AI –ú–û–î–ï–õ–ï–ô")
        print(f"{'='*80}")
        
        df_comparison = self.create_comparison_table()
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã
        print(df_comparison.to_string(index=False))
    
    def generate_recommendations(self) -> List[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        Returns:
            List —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö –º–æ–¥–µ–ª–µ–π
        models_by_pnl = sorted(self.analysis_results.items(), key=lambda x: x[1]['total_pnl'], reverse=True)
        models_by_winrate = sorted(self.analysis_results.items(), key=lambda x: x[1]['win_rate'], reverse=True)
        
        best_pnl_model = models_by_pnl[0]
        worst_pnl_model = models_by_pnl[-1]
        best_wr_model = models_by_winrate[0]
        worst_wr_model = models_by_winrate[-1]
        
        recommendations.append(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ P&L: {best_pnl_model[0]} (${best_pnl_model[1]['total_pnl']:.2f})")
        recommendations.append(f"üéØ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å –ø–æ Win Rate: {best_wr_model[0]} ({best_wr_model[1]['win_rate']:.1f}%)")
        recommendations.append(f"‚ö†Ô∏è –•—É–¥—à–∞—è –º–æ–¥–µ–ª—å –ø–æ P&L: {worst_pnl_model[0]} (${worst_pnl_model[1]['total_pnl']:.2f})")
        recommendations.append(f"‚ö†Ô∏è –•—É–¥—à–∞—è –º–æ–¥–µ–ª—å –ø–æ Win Rate: {worst_wr_model[0]} ({worst_wr_model[1]['win_rate']:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        high_confidence_models = [name for name, data in self.analysis_results.items() if data['avg_confidence'] > 70]
        if high_confidence_models:
            recommendations.append(f"üí™ –ú–æ–¥–µ–ª–∏ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é (>70%): {', '.join(high_confidence_models)}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        recommendations.append("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        
        for model_name, analysis in self.analysis_results.items():
            if analysis['win_rate'] < 50:
                recommendations.append(f"   ‚Ä¢ {model_name}: –ù–∏–∑–∫–∏–π Win Rate ({analysis['win_rate']:.1f}%) - —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–∏–∫–∏")
            
            if analysis['total_pnl'] < 0:
                recommendations.append(f"   ‚Ä¢ {model_name}: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π P&L (${analysis['total_pnl']:.2f}) - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ")
            
            if analysis['avg_confidence'] < 50:
                recommendations.append(f"   ‚Ä¢ {model_name}: –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({analysis['avg_confidence']:.1f}%) - —É–ª—É—á—à–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É")
        
        return recommendations
    
    def run_full_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ö–ê–ß–ï–°–¢–í–ê AI –°–ò–ì–ù–ê–õ–û–í")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        if not self.load_data():
            return
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        self.analyze_all_models()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        print(f"\n{'='*60}")
        print("üìã –î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–ß–ï–¢–´ –ü–û –ú–û–î–ï–õ–Ø–ú")
        print(f"{'='*60}")
        
        for model_name, analysis in self.analysis_results.items():
            self.print_model_report(model_name, analysis)
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        self.print_comparison_table()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n{'='*60}")
        print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        print(f"{'='*60}")
        
        recommendations = self.generate_recommendations()
        for rec in recommendations:
            print(rec)
        
        print(f"\n{'='*60}")
        print("‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print(f"{'='*60}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–æ—Ä–≥–æ–≤
    csv_file_path = "/Users/mac/Documents/Peper Binance v4/reports/csv_reports/all_trades_20251022_104150.csv"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = AISignalsAnalyzer(csv_file_path)
    analyzer.run_full_analysis()


if __name__ == "__main__":
    main()