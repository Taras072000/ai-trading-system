#!/usr/bin/env python3
"""
üèÜ –ü–†–ï–ú–ò–£–ú –£–õ–¨–¢–†–ê-–°–ò–°–¢–ï–ú–ê –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø 60%+ –í–ò–ù–†–ï–ô–¢–ê
–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π v2 —Å–∏—Å—Ç–µ–º—ã
–¶–µ–ª—å: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∏–Ω—Ä–µ–π—Ç 60%, –∂–µ–ª–∞–µ–º—ã–π 75%
"""

import pandas as pd
import numpy as np
import json
import logging
from datetime import datetime
import asyncio
from data_collector import BinanceDataCollector
from utils.timezone_utils import get_utc_now
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class PremiumUltraSystem:
    def __init__(self):
        # üéØ –ü–†–ï–ú–ò–£–ú –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –í–´–°–û–ö–û–ì–û –í–ò–ù–†–ï–ô–¢–ê
        self.min_volume_ratio = 1.20  # –ü–æ–≤—ã—à–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        self.min_confidence = 0.70    # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        self.min_signal_strength = 6  # –¢–æ–ª—å–∫–æ —Å–∏–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        self.min_trend_alignment = 0.75  # –°—Ç—Ä–æ–≥–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        
        # üìä –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –†–ò–°–ö-–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢–ê
        self.stop_loss_pct = 0.25     # –£–º–µ–Ω—å—à–µ–Ω SL
        self.take_profit_pct = 0.55   # –£–≤–µ–ª–∏—á–µ–Ω TP –¥–ª—è –ª—É—á—à–µ–≥–æ R:R
        self.max_trades_per_day = 8   # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ
        
        # üîç –ü–†–ï–ú–ò–£–ú –§–ò–õ–¨–¢–†–´
        self.min_rsi_divergence = 15  # –°–∏–ª—å–Ω–∞—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è
        self.min_macd_strength = 0.0008  # –°–∏–ª—å–Ω—ã–π MACD —Å–∏–≥–Ω–∞–ª
        self.min_bb_squeeze = 0.015   # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ BB
        self.min_volume_spike = 1.8   # –°–∏–ª—å–Ω—ã–π –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞
        
        self.results = []
        self.balance = 10000
        self.trades_today = 0
        self.last_trade_date = None
        
    def calculate_premium_indicators(self, df):
        """–†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é"""
        
        # üìà –ë–ê–ó–û–í–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
        df['sma_20'] = df['close'].rolling(20).mean()
        df['sma_50'] = df['close'].rolling(50).mean()
        df['ema_12'] = df['close'].ewm(span=12).mean()
        df['ema_26'] = df['close'].ewm(span=26).mean()
        
        # üéØ RSI —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        delta = df['close'].diff()
        gain = (delta.where(delta > 0, 0)).rolling(14).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(14).mean()
        rs = gain / loss
        df['rsi'] = 100 - (100 / (1 + rs))
        
        # üìä MACD —Å —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–µ–π
        df['macd'] = df['ema_12'] - df['ema_26']
        df['macd_signal'] = df['macd'].ewm(span=9).mean()
        df['macd_histogram'] = df['macd'] - df['macd_signal']
        
        # üîî Bollinger Bands
        bb_period = 20
        df['bb_middle'] = df['close'].rolling(bb_period).mean()
        bb_std = df['close'].rolling(bb_period).std()
        df['bb_upper'] = df['bb_middle'] + (bb_std * 2)
        df['bb_lower'] = df['bb_middle'] - (bb_std * 2)
        df['bb_width'] = (df['bb_upper'] - df['bb_lower']) / df['bb_middle']
        
        # üìà Stochastic
        low_14 = df['low'].rolling(14).min()
        high_14 = df['high'].rolling(14).max()
        df['stoch_k'] = 100 * ((df['close'] - low_14) / (high_14 - low_14))
        df['stoch_d'] = df['stoch_k'].rolling(3).mean()
        
        # üíπ Volume indicators
        df['volume_sma'] = df['volume'].rolling(20).mean()
        df['volume_ratio'] = df['volume'] / df['volume_sma']
        
        # üéØ –ü–†–ï–ú–ò–£–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
        
        # Williams %R
        df['williams_r'] = -100 * ((high_14 - df['close']) / (high_14 - low_14))
        
        # CCI (Commodity Channel Index)
        tp = (df['high'] + df['low'] + df['close']) / 3
        df['cci'] = (tp - tp.rolling(20).mean()) / (0.015 * tp.rolling(20).std())
        
        # ATR –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        tr1 = df['high'] - df['low']
        tr2 = abs(df['high'] - df['close'].shift())
        tr3 = abs(df['low'] - df['close'].shift())
        tr = pd.concat([tr1, tr2, tr3], axis=1).max(axis=1)
        df['atr'] = tr.rolling(14).mean()
        
        # Momentum
        df['momentum'] = df['close'] / df['close'].shift(10) - 1
        
        return df
    
    def generate_premium_signal(self, df, i):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–ª—å—Ç—Ä–∞-—Å—Ç—Ä–æ–≥–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""
        
        if i < 60:  # –ù—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            return None, 0, 0
            
        current = df.iloc[i]
        prev = df.iloc[i-1]
        prev2 = df.iloc[i-2]
        
        # üéØ –ü–†–ï–ú–ò–£–ú –£–°–õ–û–í–ò–Ø –î–õ–Ø LONG
        long_conditions = []
        long_strength = 0
        
        # 1. RSI —É—Å–ª–æ–≤–∏—è (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
        if 25 <= current['rsi'] <= 45 and current['rsi'] > prev['rsi']:
            long_conditions.append("rsi_oversold_recovery")
            long_strength += 2
            
        # 2. MACD –±—ã—á–∏–π —Å–∏–≥–Ω–∞–ª
        if (current['macd'] > current['macd_signal'] and 
            prev['macd'] <= prev['macd_signal'] and
            current['macd_histogram'] > 0.0005):
            long_conditions.append("macd_bullish_cross")
            long_strength += 2
            
        # 3. Bollinger Bands –æ—Ç—Å–∫–æ–∫
        if (current['close'] <= current['bb_lower'] * 1.02 and 
            current['close'] > prev['close'] and
            current['bb_width'] > self.min_bb_squeeze):
            long_conditions.append("bb_bounce")
            long_strength += 2
            
        # 4. Stochastic —É—Å–ª–æ–≤–∏—è
        if (current['stoch_k'] < 25 and current['stoch_k'] > prev['stoch_k'] and
            current['stoch_d'] < 25):
            long_conditions.append("stoch_oversold")
            long_strength += 1
            
        # 5. Volume –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if current['volume_ratio'] >= self.min_volume_spike:
            long_conditions.append("volume_spike")
            long_strength += 2
            
        # 6. Williams %R
        if current['williams_r'] > -85 and prev['williams_r'] <= -85:
            long_conditions.append("williams_recovery")
            long_strength += 1
            
        # 7. CCI —É—Å–ª–æ–≤–∏–µ
        if current['cci'] < -150 and current['cci'] > prev['cci']:
            long_conditions.append("cci_oversold_recovery")
            long_strength += 1
            
        # 8. Momentum –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if current['momentum'] > -0.02 and current['momentum'] > prev['momentum']:
            long_conditions.append("momentum_positive")
            long_strength += 1
            
        # 9. –¢—Ä–µ–Ω–¥ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ)
        trend_score = 0
        if current['close'] > current['sma_20']:
            trend_score += 0.3
        if current['sma_20'] > current['sma_50']:
            trend_score += 0.3
        if current['ema_12'] > current['ema_26']:
            trend_score += 0.4
            
        if trend_score >= self.min_trend_alignment:
            long_conditions.append("trend_alignment")
            long_strength += 2
        
        # üéØ –ü–†–ï–ú–ò–£–ú –£–°–õ–û–í–ò–Ø –î–õ–Ø SHORT
        short_conditions = []
        short_strength = 0
        
        # 1. RSI —É—Å–ª–æ–≤–∏—è
        if 55 <= current['rsi'] <= 75 and current['rsi'] < prev['rsi']:
            short_conditions.append("rsi_overbought_decline")
            short_strength += 2
            
        # 2. MACD –º–µ–¥–≤–µ–∂–∏–π —Å–∏–≥–Ω–∞–ª
        if (current['macd'] < current['macd_signal'] and 
            prev['macd'] >= prev['macd_signal'] and
            current['macd_histogram'] < -0.0005):
            short_conditions.append("macd_bearish_cross")
            short_strength += 2
            
        # 3. Bollinger Bands –æ—Ç—Å–∫–æ–∫ –≤–Ω–∏–∑
        if (current['close'] >= current['bb_upper'] * 0.98 and 
            current['close'] < prev['close'] and
            current['bb_width'] > self.min_bb_squeeze):
            short_conditions.append("bb_rejection")
            short_strength += 2
            
        # 4. Stochastic —É—Å–ª–æ–≤–∏—è
        if (current['stoch_k'] > 75 and current['stoch_k'] < prev['stoch_k'] and
            current['stoch_d'] > 75):
            short_conditions.append("stoch_overbought")
            short_strength += 1
            
        # 5. Volume –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if current['volume_ratio'] >= self.min_volume_spike:
            short_conditions.append("volume_spike")
            short_strength += 2
            
        # 6. Williams %R
        if current['williams_r'] < -15 and prev['williams_r'] >= -15:
            short_conditions.append("williams_decline")
            short_strength += 1
            
        # 7. CCI —É—Å–ª–æ–≤–∏–µ
        if current['cci'] > 150 and current['cci'] < prev['cci']:
            short_conditions.append("cci_overbought_decline")
            short_strength += 1
            
        # 8. Momentum –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if current['momentum'] < 0.02 and current['momentum'] < prev['momentum']:
            short_conditions.append("momentum_negative")
            short_strength += 1
            
        # 9. –¢—Ä–µ–Ω–¥ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–ª—è SHORT
        bear_trend_score = 0
        if current['close'] < current['sma_20']:
            bear_trend_score += 0.3
        if current['sma_20'] < current['sma_50']:
            bear_trend_score += 0.3
        if current['ema_12'] < current['ema_26']:
            bear_trend_score += 0.4
            
        if bear_trend_score >= self.min_trend_alignment:
            short_conditions.append("bear_trend_alignment")
            short_strength += 2
        
        # üèÜ –ü–†–ï–ú–ò–£–ú –ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê
        # –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 –∏–∑ 9 —É—Å–ª–æ–≤–∏–π –ò —Å–∏–ª–∞ >= 8
        if len(long_conditions) >= 5 and long_strength >= 8:
            confidence = min(0.95, 0.5 + (long_strength * 0.05) + (len(long_conditions) * 0.03))
            if confidence >= self.min_confidence:
                return 'long', confidence, long_strength
                
        if len(short_conditions) >= 5 and short_strength >= 8:
            confidence = min(0.95, 0.5 + (short_strength * 0.05) + (len(short_conditions) * 0.03))
            if confidence >= self.min_confidence:
                return 'short', confidence, short_strength
        
        return None, 0, 0
    
    def premium_backtest(self, df):
        """–ü—Ä–µ–º–∏—É–º –±—ç–∫—Ç–µ—Å—Ç —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º"""
        
        df = self.calculate_premium_indicators(df)
        trades = []
        current_position = None
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–º–∏—É–º –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–∞ {len(df)} —Å–≤–µ—á–∞—Ö...")
        
        for i in range(len(df)):
            current_date = pd.to_datetime(df.iloc[i]['timestamp']).date()
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–¥–µ–ª–æ–∫ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            if self.last_trade_date != current_date:
                self.trades_today = 0
                self.last_trade_date = current_date
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
            if self.trades_today >= self.max_trades_per_day:
                continue
                
            current_price = df.iloc[i]['close']
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            if current_position:
                pnl_pct = 0
                close_reason = ""
                
                if current_position['side'] == 'long':
                    pnl_pct = (current_price - current_position['entry_price']) / current_position['entry_price'] * 100
                    
                    if pnl_pct >= self.take_profit_pct:
                        close_reason = "TP"
                    elif pnl_pct <= -self.stop_loss_pct:
                        close_reason = "SL"
                        
                else:  # short
                    pnl_pct = (current_position['entry_price'] - current_price) / current_position['entry_price'] * 100
                    
                    if pnl_pct >= self.take_profit_pct:
                        close_reason = "TP"
                    elif pnl_pct <= -self.stop_loss_pct:
                        close_reason = "SL"
                
                if close_reason:
                    self.balance *= (1 + pnl_pct / 100)
                    
                    trade_result = {
                        'entry_time': current_position['entry_time'],
                        'exit_time': df.iloc[i]['timestamp'],
                        'side': current_position['side'],
                        'entry_price': current_position['entry_price'],
                        'exit_price': current_price,
                        'pnl_pct': pnl_pct,
                        'close_reason': close_reason,
                        'confidence': current_position['confidence'],
                        'strength': current_position['strength']
                    }
                    
                    trades.append(trade_result)
                    current_position = None
                    continue
            
            # –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
            if not current_position:
                signal, confidence, strength = self.generate_premium_signal(df, i)
                
                if signal and confidence >= self.min_confidence and strength >= self.min_signal_strength:
                    current_position = {
                        'side': signal,
                        'entry_price': current_price,
                        'entry_time': df.iloc[i]['timestamp'],
                        'confidence': confidence,
                        'strength': strength
                    }
                    self.trades_today += 1
        
        return trades
    
    def run_premium_test(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–µ–º–∏—É–º —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        logger.info("üèÜ –ó–ê–ü–£–°–ö –ü–†–ï–ú–ò–£–ú –£–õ–¨–¢–†–ê-–°–ò–°–¢–ï–ú–´")
        logger.info("=" * 60)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ data_collector
        collector = BinanceDataCollector()
        
        async def get_data():
            async with collector:
                return await collector.get_historical_data('BTCUSDT', '1m', days=7)
        
        try:
            df = asyncio.run(get_data())
            if df is None or len(df) == 0:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return
        
        # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
        trades = self.premium_backtest(df)
        
        if not trades:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫ —Å –ø—Ä–µ–º–∏—É–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏!")
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –°–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–æ–≥–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            return
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_trades = len(trades)
        profitable_trades = len([t for t in trades if t['pnl_pct'] > 0])
        winrate = (profitable_trades / total_trades) * 100 if total_trades > 0 else 0
        
        total_pnl = sum([t['pnl_pct'] for t in trades])
        avg_profit = np.mean([t['pnl_pct'] for t in trades if t['pnl_pct'] > 0]) if profitable_trades > 0 else 0
        avg_loss = np.mean([t['pnl_pct'] for t in trades if t['pnl_pct'] < 0]) if (total_trades - profitable_trades) > 0 else 0
        
        tp_trades = len([t for t in trades if t['close_reason'] == 'TP'])
        sl_trades = len([t for t in trades if t['close_reason'] == 'SL'])
        
        avg_confidence = np.mean([t['confidence'] for t in trades])
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–ï–ú–ò–£–ú –£–õ–¨–¢–†–ê-–°–ò–°–¢–ï–ú–´")
        logger.info("=" * 60)
        logger.info(f"üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        logger.info(f"üèÜ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {profitable_trades}")
        logger.info(f"üìà –í–∏–Ω—Ä–µ–π—Ç: {winrate:.1f}%")
        logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2f}%")
        logger.info(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.2f}%")
        logger.info(f"üíµ –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_pnl:.2f}%")
        logger.info(f"üè¶ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")
        logger.info(f"üéØ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
        logger.info("")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
        min_target = 60
        desired_target = 75
        min_progress = (winrate / min_target) * 100
        desired_progress = (winrate / desired_target) * 100
        
        logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–ª–∏: {winrate:.1f}% –∏–∑ {min_target}% ({min_progress:.1f}%)")
        logger.info(f"üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –∂–µ–ª–∞–µ–º–æ–π —Ü–µ–ª–∏: {winrate:.1f}% –∏–∑ {desired_target}% ({desired_progress:.1f}%)")
        logger.info("")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"‚úÖ Take Profit —Å–¥–µ–ª–æ–∫: {tp_trades} ({tp_trades/total_trades*100:.1f}%)")
        logger.info(f"‚ùå Stop Loss —Å–¥–µ–ª–æ–∫: {sl_trades} ({sl_trades/total_trades*100:.1f}%)")
        logger.info(f"üí∞ –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å TP: {avg_profit:.2f}%")
        logger.info(f"üìâ –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ SL: {avg_loss:.2f}%")
        
        if avg_loss != 0:
            rr_ratio = abs(avg_profit / avg_loss)
            logger.info(f"‚öñÔ∏è Risk-Reward —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: 1:{rr_ratio:.2f}")
        
        high_conf_trades = [t for t in trades if t['confidence'] > 0.75]
        if high_conf_trades:
            high_conf_profitable = len([t for t in high_conf_trades if t['pnl_pct'] > 0])
            high_conf_winrate = (high_conf_profitable / len(high_conf_trades)) * 100
            logger.info(f"üéØ –í–∏–Ω—Ä–µ–π—Ç –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (>0.75): {high_conf_winrate:.1f}% ({high_conf_profitable}/{len(high_conf_trades)})")
        
        logger.info("=" * 60)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = get_utc_now().strftime("%Y%m%d_%H%M%S")
        filename = f"premium_ultra_results_{timestamp}.json"
        
        results = {
            'timestamp': timestamp,
            'total_trades': total_trades,
            'profitable_trades': profitable_trades,
            'winrate': winrate,
            'total_pnl': total_pnl,
            'avg_profit': avg_profit,
            'avg_loss': avg_loss,
            'final_balance': self.balance,
            'avg_confidence': avg_confidence,
            'tp_trades': tp_trades,
            'sl_trades': sl_trades,
            'min_target_progress': min_progress,
            'desired_target_progress': desired_progress,
            'trades': trades
        }
        
        with open(filename, 'w') as f:
            json.dump(results, f, indent=2, default=str)
        
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

if __name__ == "__main__":
    system = PremiumUltraSystem()
    system.run_premium_test()