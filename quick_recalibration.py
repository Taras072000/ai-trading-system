#!/usr/bin/env python3
"""
üöÄ –ë–´–°–¢–†–ê–Ø –ü–û–í–¢–û–†–ù–ê–Ø –ö–ê–õ–ò–ë–†–û–í–ö–ê AI –ú–û–î–ï–õ–ï–ô
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import asyncio
import logging
import json
import os
from datetime import datetime
from ai_model_calibrator import AIModelCalibrator
from data_collector import DataManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('quick_recalibration.log'),
        logging.StreamHandler()
    ]
)

class QuickRecalibrator:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.calibrator = None
        self.data_manager = None
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.improved_params = {
            'trading_ai': {
                'confidence_range': [0.1, 0.2, 0.3, 0.4],
                'tp_range': [2.0, 2.5, 3.0, 3.5],
                'sl_range': [1.0, 1.2, 1.5, 1.8],
                'test_days': 14
            },
            'lava_ai': {
                'confidence_range': [0.2, 0.3, 0.4, 0.5],
                'tp_range': [1.5, 2.0, 2.5, 3.0],
                'sl_range': [1.0, 1.2, 1.5, 2.0],
                'test_days': 14
            },
            'lgbm_ai': {
                'confidence_range': [0.2, 0.3, 0.4, 0.5],
                'tp_range': [2.0, 2.5, 3.0, 3.5],
                'sl_range': [1.0, 1.2, 1.5, 1.8],
                'test_days': 14
            },
            'mistral_ai': {
                'confidence_range': [0.2, 0.3, 0.4, 0.5],
                'tp_range': [2.5, 3.0, 3.5, 4.0],
                'sl_range': [1.2, 1.5, 1.8, 2.0],
                'test_days': 14
            }
        }
    
    async def run_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ DataManager
            self.logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ DataManager...")
            self.data_manager = DataManager()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
            test_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT', 'SOLUSDT', 'ADAUSDT']
            available_data = {}
            
            for pair in test_pairs:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
                    data = await self.data_manager.get_historical_data(pair, '1h', 7)
                    if data is not None and len(data) > 0:
                        available_data[pair] = len(data)
                        self.logger.info(f"‚úÖ {pair}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        self.logger.warning(f"‚ö†Ô∏è {pair}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                        available_data[pair] = 0
                except Exception as e:
                    self.logger.error(f"‚ùå {pair}: –û—à–∏–±–∫–∞ - {e}")
                    available_data[pair] = 0
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostic_report = {
                'timestamp': datetime.now().isoformat(),
                'data_availability': available_data,
                'total_pairs_with_data': sum(1 for count in available_data.values() if count > 0),
                'recommendations': self._generate_recommendations(available_data)
            }
            
            with open('diagnostic_report.json', 'w', encoding='utf-8') as f:
                json.dump(diagnostic_report, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–∞—Ä —Å –¥–∞–Ω–Ω—ã–º–∏: {diagnostic_report['total_pairs_with_data']}/5")
            return diagnostic_report
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
            return None
    
    def _generate_recommendations(self, data_availability):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        recommendations = []
        
        pairs_with_data = [pair for pair, count in data_availability.items() if count > 0]
        pairs_without_data = [pair for pair, count in data_availability.items() if count == 0]
        
        if len(pairs_with_data) == 0:
            recommendations.append("–ö–†–ò–¢–ò–ß–ù–û: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
            recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API")
            recommendations.append("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: python data_collector.py")
        elif len(pairs_with_data) < 3:
            recommendations.append("–í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append(f"–î–æ—Å—Ç—É–ø–Ω—ã –ø–∞—Ä—ã: {', '.join(pairs_with_data)}")
            recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            recommendations.append("–•–û–†–û–®–û: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
            recommendations.append(f"–î–æ—Å—Ç—É–ø–Ω—ã –ø–∞—Ä—ã: {', '.join(pairs_with_data)}")
        
        if pairs_without_data:
            recommendations.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {', '.join(pairs_without_data)}")
        
        return recommendations
    
    async def run_improved_calibration(self, models_to_calibrate=None):
        """–ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
        
        try:
            self.calibrator = AIModelCalibrator()
            
            if models_to_calibrate is None:
                models_to_calibrate = ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai']
            
            results = {}
            
            for model_name in models_to_calibrate:
                self.logger.info(f"üîß –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ {model_name} —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
                
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
                    params = self.improved_params.get(model_name, {})
                    
                    # –ó–∞–ø—É—Å–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    result = await self.calibrator.calibrate_individual_model(
                        model_name, 
                        **params
                    )
                    
                    results[model_name] = result
                    self.logger.info(f"‚úÖ {model_name} –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω")
                    
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ {model_name}: {e}")
                    results[model_name] = {'error': str(e)}
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            calibration_report = {
                'timestamp': datetime.now().isoformat(),
                'improved_calibration': True,
                'models_calibrated': len([r for r in results.values() if 'error' not in r]),
                'total_models': len(models_to_calibrate),
                'results': results
            }
            
            filename = f"improved_calibration_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(calibration_report, f, indent=2, ensure_ascii=False)
            
            self.logger.info(f"üìä –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            return calibration_report
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            return None
    
    async def run_single_model_test(self, model_name, test_days=7):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        self.logger.info(f"üß™ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ {model_name}...")
        
        try:
            if self.calibrator is None:
                self.calibrator = AIModelCalibrator()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–∏
            ai_model = await self.calibrator.get_ai_model(model_name)
            if ai_model is None:
                self.logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return None
            
            # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            test_pairs = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
            signals_generated = 0
            
            for pair in test_pairs:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª –æ—Ç –º–æ–¥–µ–ª–∏
                    signal = await ai_model.get_trading_signal(pair)
                    if signal and signal.get('action') != 'HOLD':
                        signals_generated += 1
                        self.logger.info(f"‚úÖ {model_name} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair}: {signal.get('action')}")
                    else:
                        self.logger.info(f"‚ö™ {model_name} –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —Å–∏–≥–Ω–∞–ª –¥–ª—è {pair}")
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ {model_name} –¥–ª—è {pair}: {e}")
            
            test_result = {
                'model_name': model_name,
                'signals_generated': signals_generated,
                'pairs_tested': len(test_pairs),
                'signal_rate': signals_generated / len(test_pairs) if test_pairs else 0,
                'status': 'WORKING' if signals_generated > 0 else 'NOT_GENERATING_SIGNALS'
            }
            
            self.logger.info(f"üìä –¢–µ—Å—Ç {model_name}: {signals_generated}/{len(test_pairs)} —Å–∏–≥–Ω–∞–ª–æ–≤")
            return test_result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
            return {'model_name': model_name, 'error': str(e)}
    
    async def full_diagnostic_and_recalibration(self):
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞"""
        self.logger.info("üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
        
        # –≠—Ç–∞–ø 1: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        diagnostic_result = await self.run_diagnostics()
        if diagnostic_result is None:
            self.logger.error("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
            return
        
        # –≠—Ç–∞–ø 2: –¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π
        self.logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        model_tests = {}
        for model in ['trading_ai', 'lava_ai', 'lgbm_ai', 'mistral_ai']:
            test_result = await self.run_single_model_test(model)
            model_tests[model] = test_result
        
        # –≠—Ç–∞–ø 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        models_to_recalibrate = [
            model for model, test in model_tests.items() 
            if test and test.get('status') == 'NOT_GENERATING_SIGNALS'
        ]
        
        if models_to_recalibrate:
            self.logger.info(f"üîß –ú–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {', '.join(models_to_recalibrate)}")
            calibration_result = await self.run_improved_calibration(models_to_recalibrate)
        else:
            self.logger.info("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            calibration_result = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        final_report = {
            'timestamp': datetime.now().isoformat(),
            'diagnostic_result': diagnostic_result,
            'model_tests': model_tests,
            'calibration_result': calibration_result,
            'summary': {
                'data_pairs_available': diagnostic_result.get('total_pairs_with_data', 0) if diagnostic_result else 0,
                'models_working': len([t for t in model_tests.values() if t and t.get('status') == 'WORKING']),
                'models_recalibrated': len(models_to_recalibrate) if models_to_recalibrate else 0
            }
        }
        
        filename = f"full_diagnostic_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(final_report, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìã –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        self.logger.info("üéâ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ü–û–í–¢–û–†–ù–ê–Ø –ö–ê–õ–ò–ë–†–û–í–ö–ê AI –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    
    recalibrator = QuickRecalibrator()
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
    await recalibrator.full_diagnostic_and_recalibration()

if __name__ == "__main__":
    asyncio.run(main())