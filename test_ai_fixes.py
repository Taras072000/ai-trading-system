#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π AI –º–æ–¥—É–ª–µ–π
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/Users/mac/Documents/Peper Binance v4')

from ai_modules.lava_ai import LavaAI
from ai_modules.reinforcement_learning_engine import ReinforcementLearningEngine

async def test_ai_modules():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –º–æ–¥—É–ª–µ–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π AI –º–æ–¥—É–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    dates = pd.date_range(start='2024-01-01', periods=100, freq='1H')
    np.random.seed(42)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    base_price = 100.0
    prices = []
    for i in range(100):
        if i == 0:
            prices.append(base_price)
        else:
            change = np.random.normal(0, 0.02)  # 2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            prices.append(prices[-1] * (1 + change))
    
    data = pd.DataFrame({
        'open': prices,
        'high': [p * (1 + abs(np.random.normal(0, 0.01))) for p in prices],
        'low': [p * (1 - abs(np.random.normal(0, 0.01))) for p in prices],
        'close': prices,
        'volume': [np.random.randint(1000, 10000) for _ in range(100)]
    }, index=dates)
    
    print(f"üìä –°–æ–∑–¥–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(data)} —Å–≤–µ—á–µ–π")
    print(f"üí∞ –¶–µ–Ω–∞: {data['close'].iloc[0]:.2f} ‚Üí {data['close'].iloc[-1]:.2f}")
    
    # –¢–µ—Å—Ç LavaAI
    print("\nüåã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LavaAI...")
    try:
        lava_ai = LavaAI()
        await lava_ai.initialize()
        
        # –¢–µ—Å—Ç generate_trading_signals (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        signals = await lava_ai.generate_trading_signals(data)
        print(f"‚úÖ LavaAI.generate_trading_signals: {signals}")
        
        # –¢–µ—Å—Ç analyze_patterns (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
        patterns = await lava_ai.analyze_patterns(data)
        print(f"‚úÖ LavaAI.analyze_patterns: {patterns}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LavaAI: {e}")
        import traceback
        traceback.print_exc()
    
    # –¢–µ—Å—Ç ReinforcementLearningEngine
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ReinforcementLearningEngine...")
    try:
        rl_engine = ReinforcementLearningEngine()
        
        # –¢–µ—Å—Ç get_model_weights
        weights = rl_engine.get_model_weights()
        print(f"‚úÖ ReinforcementLearningEngine.get_model_weights: {weights}")
        
        # –¢–µ—Å—Ç get_current_weights
        current_weights = rl_engine.get_current_weights()
        print(f"‚úÖ ReinforcementLearningEngine.get_current_weights: {current_weights}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ReinforcementLearningEngine: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(test_ai_modules())