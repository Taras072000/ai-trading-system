#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞ Lava AI –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
"""

import asyncio
import logging
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import json
from pathlib import Path
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_modules.lava_ai import LavaAI
from historical_data_manager import HistoricalDataManager
from data_collector import BinanceDataCollector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class LavaWinrateTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞ Lava AI"""
    
    def __init__(self):
        self.lava_ai = LavaAI()
        self.data_manager = HistoricalDataManager()
        self.data_collector = BinanceDataCollector()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT", "SOLUSDT"]
        self.test_interval = "1h"  # –ß–∞—Å–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_days = 7  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_results = {}
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Lava AI —Ç–µ—Å—Ç–µ—Ä–∞...")
        await self.lava_ai.initialize()
        logger.info("‚úÖ Lava AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def load_test_data(self, symbol: str) -> Optional[pd.DataFrame]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
        logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=self.test_days)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ HistoricalDataManager
        data = await self.data_manager.load_data(
            symbol=symbol,
            interval=self.test_interval,
            start_date=start_date,
            end_date=end_date
        )
        
        if data is not None and not data.empty:
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –∏–∑ HistoricalDataManager")
            return data
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º DataCollector
        logger.info(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ HistoricalDataManager, –∏—Å–ø–æ–ª—å–∑—É–µ–º DataCollector...")
        
        try:
            async with self.data_collector as collector:
                data = await collector.get_historical_data(
                    symbol=symbol,
                    interval=self.test_interval,
                    days=self.test_days
                )
                
                if data is not None and not data.empty:
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Å–≤–µ—á–µ–π –∏–∑ DataCollector")
                    return data
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DataCollector: {e}")
        
        # –ï—Å–ª–∏ –≤—Å–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        logger.warning(f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
        return self._generate_demo_data(symbol, start_date, end_date)
    
    def _generate_demo_data(self, symbol: str, start_date: datetime, end_date: datetime) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å —á–∞—Å–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        date_range = pd.date_range(start=start_date, end=end_date, freq='1H')
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–º–≤–æ–ª–∞
        base_prices = {
            "BTCUSDT": 45000,
            "ETHUSDT": 3000,
            "BNBUSDT": 400,
            "ADAUSDT": 0.5,
            "SOLUSDT": 100
        }
        
        base_price = base_prices.get(symbol, 1000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º
        np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        
        prices = []
        current_price = base_price
        
        for i in range(len(date_range)):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            change = np.random.normal(0, 0.02)  # 2% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            current_price *= (1 + change)
            prices.append(current_price)
        
        # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
        data = []
        for i, (timestamp, price) in enumerate(zip(date_range, prices)):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OHLC –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            volatility = np.random.uniform(0.005, 0.02)  # 0.5-2% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            high = price * (1 + volatility)
            low = price * (1 - volatility)
            open_price = prices[i-1] if i > 0 else price
            close = price
            volume = np.random.uniform(1000, 10000)
            
            data.append({
                'timestamp': timestamp,
                'open': open_price,
                'high': high,
                'low': low,
                'close': close,
                'volume': volume
            })
        
        df = pd.DataFrame(data)
        df.set_index('timestamp', inplace=True)
        
        logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –¥–µ–º–æ —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")
        return df
    
    async def test_symbol_winrate(self, symbol: str) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–Ω—Ä–µ–π—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        logger.info(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–Ω—Ä–µ–π—Ç–∞ –¥–ª—è {symbol}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = await self.load_test_data(symbol)
        if data is None or data.empty:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            return {
                'symbol': symbol,
                'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
                'total_signals': 0,
                'winning_signals': 0,
                'winrate': 0.0
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = []
        total_signals = 0
        winning_signals = 0
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        window_size = 20  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
        for i in range(window_size, len(data) - 1):  # -1 —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å–≤–µ—á—É
            try:
                # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
                current_data = data.iloc[:i+1]
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
                signal_result = await self.lava_ai.generate_trading_signals(current_data)
                
                if signal_result and signal_result.get('signal') != 'HOLD':
                    signal = signal_result['signal']
                    confidence = signal_result.get('confidence', 0.5)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å–≤–µ—á–µ
                    current_price = data.iloc[i]['close']
                    next_price = data.iloc[i+1]['close']
                    price_change = (next_price - current_price) / current_price
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
                    is_winning = False
                    if signal == 'BUY' and price_change > 0.001:  # –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 0.1%
                        is_winning = True
                    elif signal == 'SELL' and price_change < -0.001:  # –¶–µ–Ω–∞ —É–ø–∞–ª–∞ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 0.1%
                        is_winning = True
                    
                    signals.append({
                        'timestamp': data.index[i],
                        'signal': signal,
                        'confidence': confidence,
                        'current_price': current_price,
                        'next_price': next_price,
                        'price_change': price_change,
                        'is_winning': is_winning
                    })
                    
                    total_signals += 1
                    if is_winning:
                        winning_signals += 1
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤–µ—á–∏ {i} –¥–ª—è {symbol}: {e}")
                continue
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∏–Ω—Ä–µ–π—Ç
        winrate = (winning_signals / total_signals * 100) if total_signals > 0 else 0
        
        result = {
            'symbol': symbol,
            'total_signals': total_signals,
            'winning_signals': winning_signals,
            'losing_signals': total_signals - winning_signals,
            'winrate': round(winrate, 2),
            'data_points': len(data),
            'test_period_days': self.test_days,
            'signals': signals[-10:] if signals else []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        }
        
        logger.info(f"üìä {symbol}: {total_signals} —Å–∏–≥–Ω–∞–ª–æ–≤, –≤–∏–Ω—Ä–µ–π—Ç {winrate:.2f}%")
        return result
    
    async def run_full_test(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–Ω—Ä–µ–π—Ç–∞ Lava AI")
        logger.info(f"üìä –°–∏–º–≤–æ–ª—ã: {', '.join(self.test_symbols)}")
        logger.info(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.test_interval}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {self.test_days} –¥–Ω–µ–π")
        
        await self.initialize()
        
        results = {}
        total_signals = 0
        total_winning = 0
        
        for symbol in self.test_symbols:
            try:
                result = await self.test_symbol_winrate(symbol)
                results[symbol] = result
                
                total_signals += result['total_signals']
                total_winning += result['winning_signals']
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}")
                results[symbol] = {
                    'symbol': symbol,
                    'error': str(e),
                    'total_signals': 0,
                    'winning_signals': 0,
                    'winrate': 0.0
                }
        
        # –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç
        overall_winrate = (total_winning / total_signals * 100) if total_signals > 0 else 0
        
        summary = {
            'test_date': datetime.now().isoformat(),
            'test_period_days': self.test_days,
            'test_interval': self.test_interval,
            'symbols_tested': len(self.test_symbols),
            'total_signals': total_signals,
            'total_winning': total_winning,
            'overall_winrate': round(overall_winrate, 2),
            'symbol_results': results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await self.save_results(summary)
        
        return summary
    
    async def save_results(self, results: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"lava_winrate_test_{timestamp}.json"
        filepath = Path(filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
    
    def print_results(self, results: Dict):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "="*80)
        print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–ò–ù–†–ï–ô–¢–ê LAVA AI")
        print("="*80)
        
        print(f"üìÖ –î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {results['test_date']}")
        print(f"‚è±Ô∏è –ü–µ—Ä–∏–æ–¥: {results['test_period_days']} –¥–Ω–µ–π")
        print(f"üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª: {results['test_interval']}")
        print(f"üí∞ –°–∏–º–≤–æ–ª–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {results['symbols_tested']}")
        
        print(f"\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {results['total_signals']}")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {results['total_winning']}")
        print(f"   –û–ë–©–ò–ô –í–ò–ù–†–ï–ô–¢: {results['overall_winrate']}%")
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û –°–ò–ú–í–û–õ–ê–ú:")
        for symbol, result in results['symbol_results'].items():
            if 'error' in result:
                print(f"   ‚ùå {symbol}: –û–®–ò–ë–ö–ê - {result['error']}")
            else:
                print(f"   üí∞ {symbol}: {result['total_signals']} —Å–∏–≥–Ω–∞–ª–æ–≤, "
                      f"–≤–∏–Ω—Ä–µ–π—Ç {result['winrate']}% "
                      f"({result['winning_signals']}/{result['total_signals']})")
        
        print("\n" + "="*80)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.lava_ai.cleanup()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = LavaWinrateTest()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        results = await tester.run_full_test()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tester.print_results(results)
        
    except KeyboardInterrupt:
        logger.info("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await tester.cleanup()

if __name__ == "__main__":
    asyncio.run(main())