#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
"""

from ai_modules.multi_ai_orchestrator import MultiAIOrchestrator
import pandas as pd
import numpy as np

def test_risk_management():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'close': 50000,
        'atr_percent': 2.5,
        'volume': 1000000
    }

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
    orchestrator = MultiAIOrchestrator()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–∞
    symbols = ['BTCUSDT']

    print('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞')
    print('=' * 60)

    results = {}
    
    for symbol in symbols:
        print(f'\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:')
        
        try:
            # –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞
            dynamic_risk = orchestrator._calculate_dynamic_risk_parameters(symbol, test_data)
            print(f'  üéØ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å: {dynamic_risk["stop_loss_percent"]:.2f}%')
            print(f'  üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–æ–≤: {len(dynamic_risk["take_profit_levels"])}')
            print(f'  ‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: 1:{dynamic_risk["risk_reward_ratio"]:.1f}')
            print(f'  üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {dynamic_risk["volatility_ratio"]:.2f}x')
            
            # –¢–µ—Å—Ç –≤–ª–∏—è–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–π
            commission_impact = orchestrator._calculate_commission_impact(
                symbol, 0.1, test_data['close'], test_data['close'] * 1.02, 'market'
            )
            print(f'  üí∏ –û–±—â–∞—è –∫–æ–º–∏—Å—Å–∏—è: ${commission_impact["total_commission"]:.2f}')
            print(f'  üí∞ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (2% —Ä–æ—Å—Ç): ${commission_impact["net_pnl"]:.2f}')
            
            # –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —É—Ä–æ–≤–Ω–µ–π
            adjusted = orchestrator._adjust_levels_for_commission(
                symbol, test_data['close'], 
                dynamic_risk['stop_loss_percent'], 
                dynamic_risk['take_profit_levels'], 
                0.1
            )
            print(f'  üõ°Ô∏è –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SL: {adjusted["adjusted_stop_loss_percent"]:.2f}%')
            print(f'  üìà –ü–µ—Ä–≤—ã–π —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TP: {adjusted["adjusted_take_profit_levels"][0]:.2f}%')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å
            risk_reward = adjusted['adjusted_take_profit_levels'][0] / adjusted['adjusted_stop_loss_percent']
            print(f'  ‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ R/R: 1:{risk_reward:.2f}')
            
            if risk_reward >= 2.0:
                print(f'  ‚úÖ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:2 —Å–æ–±–ª—é–¥–µ–Ω–æ!')
                status = "PASSED"
            else:
                print(f'  ‚ùå –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:2 –ù–ï —Å–æ–±–ª—é–¥–µ–Ω–æ!')
                status = "FAILED"
            
            results[symbol] = {
                'status': status,
                'risk_reward': risk_reward,
                'stop_loss': adjusted["adjusted_stop_loss_percent"],
                'first_tp': adjusted["adjusted_take_profit_levels"][0],
                'commission_impact': commission_impact["total_commission"]
            }
            
        except Exception as e:
            print(f'  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {symbol}: {e}')
            results[symbol] = {'status': 'ERROR', 'error': str(e)}

    print('\n' + '=' * 60)
    print('üìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:')
    print('=' * 60)
    
    passed = 0
    failed = 0
    errors = 0
    
    for symbol, result in results.items():
        if result['status'] == 'PASSED':
            print(f'‚úÖ {symbol}: R/R = 1:{result["risk_reward"]:.2f}, SL = {result["stop_loss"]:.2f}%, TP1 = {result["first_tp"]:.2f}%')
            passed += 1
        elif result['status'] == 'FAILED':
            print(f'‚ùå {symbol}: R/R = 1:{result["risk_reward"]:.2f} (< 2.0)')
            failed += 1
        else:
            print(f'üî• {symbol}: –û–®–ò–ë–ö–ê - {result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}')
            errors += 1
    
    print(f'\nüìä –ò—Ç–æ–≥–æ: ‚úÖ {passed} –ø—Ä–æ—à–ª–∏ | ‚ùå {failed} –Ω–µ –ø—Ä–æ—à–ª–∏ | üî• {errors} –æ—à–∏–±–æ–∫')
    
    if failed == 0 and errors == 0:
        print('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!')
        print('‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º 1:2 —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ')
        print('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç')
        print('‚úÖ –£—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω')
    else:
        print('‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞')
    
    return results

if __name__ == "__main__":
    test_risk_management()