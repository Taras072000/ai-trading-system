#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –º–æ–¥—É–ª–µ–π –≤ MultiAIOrchestrator
"""

import asyncio
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'ai_modules'))

from ai_modules.multi_ai_orchestrator import MultiAIOrchestrator

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    dates = pd.date_range(start='2024-01-01', end='2024-01-31', freq='1H')
    np.random.seed(42)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
    base_price = 50000
    price_changes = np.random.normal(0, 0.02, len(dates))
    prices = [base_price]
    
    for change in price_changes[1:]:
        new_price = prices[-1] * (1 + change)
        prices.append(new_price)
    
    # –°–æ–∑–¥–∞–µ–º OHLCV –¥–∞–Ω–Ω—ã–µ
    data = []
    for i, (date, price) in enumerate(zip(dates, prices)):
        high = price * (1 + abs(np.random.normal(0, 0.01)))
        low = price * (1 - abs(np.random.normal(0, 0.01)))
        open_price = prices[i-1] if i > 0 else price
        close_price = price
        volume = np.random.uniform(100, 1000)
        
        data.append({
            'timestamp': date,
            'open': open_price,
            'high': high,
            'low': low,
            'close': close_price,
            'volume': volume
        })
    
    df = pd.DataFrame(data)
    df.set_index('timestamp', inplace=True)
    return df

async def test_orchestrator_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MultiAIOrchestrator...")
    
    try:
        orchestrator = MultiAIOrchestrator()
        print("‚úÖ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        status = orchestrator.get_system_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
        
        return orchestrator
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return None

async def test_ai_modules_initialization(orchestrator):
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥—É–ª–µ–π"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥—É–ª–µ–π...")
    
    try:
        await orchestrator.initialize()
        print("‚úÖ –í—Å–µ AI –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
        status = orchestrator.get_system_status()
        for module, info in status['modules'].items():
            print(f"  - {module}: {info['status']}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥—É–ª–µ–π: {e}")
        return False

async def test_signal_collection(orchestrator, test_data):
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç AI –º–æ–¥—É–ª–µ–π"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç AI –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
        signals = await orchestrator._collect_ai_signals('BTCUSDT', test_data, None)
        
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for signal in signals:
            print(f"  - {signal.module_name}: {signal.signal_type} "
                  f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.confidence:.2f})")
            print(f"    –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {signal.reasoning}")
        
        return signals
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return []

async def test_signal_aggregation(orchestrator, signals):
    """–¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    try:
        aggregated = orchestrator._aggregate_signals(signals)
        
        print("‚úÖ –°–∏–≥–Ω–∞–ª—ã –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:")
        print(f"  - –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª: {aggregated['final_signal']}")
        print(f"  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {aggregated['confidence']:.2f}")
        print(f"  - –ì–æ–ª–æ—Å–∞: {aggregated['signal_votes']}")
        print(f"  - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {aggregated['reasoning']}")
        
        return aggregated
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return None

async def test_final_decision(orchestrator, aggregated_signals):
    """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è...")
    
    try:
        final_decision = await orchestrator._make_final_decision(aggregated_signals)
        
        print("‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ:")
        print(f"  - –î–µ–π—Å—Ç–≤–∏–µ: {final_decision['action']}")
        print(f"  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_decision['confidence']:.2f}")
        print(f"  - –ê–Ω–∞–ª–∏–∑ Mistral: {final_decision.get('mistral_analysis', '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}")
        print(f"  - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {final_decision['reasoning']}")
        
        return final_decision
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
        return None

async def test_full_analysis(orchestrator, test_data):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è"""
    print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è...")
    
    try:
        decision = await orchestrator.analyze_and_decide('BTCUSDT', test_data)
        
        print("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ:")
        print(f"  - –î–µ–π—Å—Ç–≤–∏–µ: {decision.action}")
        print(f"  - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.confidence:.2f}")
        print(f"  - –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {decision.entry_price}")
        print(f"  - –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {decision.position_size}")
        print(f"  - –°—Ç–æ–ø-–ª–æ—Å—Å: {decision.stop_loss}")
        print(f"  - –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—ã: {len(decision.take_profits)} —É—Ä–æ–≤–Ω–µ–π")
        print(f"  - –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {decision.reasoning}")
        print(f"  - –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {decision.risk_score}")
        
        return decision
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –º–æ–¥—É–ª–µ–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_test_data()
    print(f"üìà –°–æ–∑–¥–∞–Ω–æ {len(test_data)} –∑–∞–ø–∏—Å–µ–π —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    orchestrator = await test_orchestrator_initialization()
    if not orchestrator:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
        return
    
    # –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥—É–ª–µ–π
    modules_ok = await test_ai_modules_initialization(orchestrator)
    if not modules_ok:
        print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    # –¢–µ—Å—Ç 3: –°–±–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    signals = await test_signal_collection(orchestrator, test_data)
    if not signals:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return
    
    # –¢–µ—Å—Ç 4: –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
    aggregated = await test_signal_aggregation(orchestrator, signals)
    if not aggregated:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã")
        return
    
    # –¢–µ—Å—Ç 5: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    final_decision = await test_final_decision(orchestrator, aggregated)
    if not final_decision:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
        return
    
    # –¢–µ—Å—Ç 6: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    full_decision = await test_full_analysis(orchestrator, test_data)
    if not full_decision:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        return
    
    # –û—á–∏—Å—Ç–∫–∞
    await orchestrator.cleanup()
    
    print("\n" + "=" * 60)
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ –í—Å–µ AI –º–æ–¥—É–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())