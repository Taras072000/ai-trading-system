"""
Ensemble System –¥–ª—è Peper Binance v4
–°–∏—Å—Ç–µ–º–∞ –∞–Ω—Å–∞–º–±–ª—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –≤—Å–µ—Ö 4 AI –º–æ–¥–µ–ª–µ–π
–¶–µ–ª—å: –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –≤–∏–Ω—Ä–µ–π—Ç–∞ 75%+ —á–µ—Ä–µ–∑ —É–º–Ω–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional, Any, Union
import logging
from dataclasses import dataclass, field
from datetime import datetime, timedelta
import asyncio
import json
from pathlib import Path
from sklearn.ensemble import VotingClassifier, StackingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import cross_val_score, TimeSeriesSplit
import joblib
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç—ã AI –º–æ–¥–µ–ª–µ–π
from lgbm_ai import LGBMAI
from lava_ai import LavaAI
from mistral_ai import MistralAI
from trading_ai import TradingAI
from multi_ai_trainer import MultiAITrainer
from historical_data_manager import HistoricalDataManager
from indicators_optimizer import IndicatorsOptimizer

logger = logging.getLogger(__name__)

@dataclass
class ModelPrediction:
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model_name: str
    signal: int  # 0 = –ø—Ä–æ–¥–∞–∂–∞, 1 = –ø–æ–∫—É–ø–∫–∞
    confidence: float  # 0.0 - 1.0
    probability: float  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
    features_used: List[str]
    timestamp: datetime
    timeframe: str

@dataclass
class EnsemblePrediction:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è"""
    final_signal: int
    confidence: float
    individual_predictions: List[ModelPrediction]
    voting_method: str
    weights: Dict[str, float]
    timestamp: datetime
    
@dataclass
class EnsembleMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –∞–Ω—Å–∞–º–±–ª—è"""
    winrate: float
    precision: float
    recall: float
    f1_score: float
    sharpe_ratio: float
    max_drawdown: float
    total_trades: int
    profitable_trades: int
    avg_return_per_trade: float
    model_contributions: Dict[str, float]

class EnsembleSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–Ω—Å–∞–º–±–ª—è AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, config_path: str = None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π
        self.models = {
            'lgbm': LGBMAI(),
            'lava': LavaAI(), 
            'mistral': MistralAI(),
            'trading_ai': TradingAI()
        }
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.data_manager = HistoricalDataManager()
        self.trainer = MultiAITrainer()
        self.optimizer = IndicatorsOptimizer()
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è
        self.config = self._load_config(config_path) if config_path else self._default_config()
        
        # –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π (–æ–±—É—á–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        self.model_weights = {
            'lgbm': 0.25,
            'lava': 0.25,
            'mistral': 0.25,
            'trading_ai': 0.25
        }
        
        # –ú–µ—Ç–∞-–º–æ–¥–µ–ª—å –¥–ª—è —Å—Ç–µ–∫–∏–Ω–≥–∞
        self.meta_model = LogisticRegression(random_state=42)
        self.is_meta_trained = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.prediction_history = []
        self.performance_metrics = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.min_confidence_threshold = 0.6
        self.consensus_threshold = 0.7  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞
        self.max_models_per_prediction = 4
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        self.model_timeframes = {
            'lgbm': ['1m', '5m'],           # –°–∫–∞–ª—å–ø–∏–Ω–≥
            'lava': ['15m', '1h'],          # –°–≤–∏–Ω–≥
            'mistral': ['4h', '1d'],        # –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è
            'trading_ai': ['5m', '15m', '1h'] # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è
        }
    
    def _default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'ensemble_methods': ['voting', 'stacking', 'weighted_average'],
            'voting_strategy': 'soft',  # 'hard' –∏–ª–∏ 'soft'
            'confidence_weighting': True,
            'dynamic_weights': True,
            'performance_window': 100,  # –û–∫–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            'rebalance_frequency': 50,  # –ß–∞—Å—Ç–æ—Ç–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –≤–µ—Å–æ–≤
            'min_models_agreement': 2,  # –ú–∏–Ω–∏–º—É–º –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è
            'target_winrate': 0.75,
            'risk_management': {
                'max_position_size': 0.1,
                'stop_loss': 0.02,
                'take_profit': 0.04,
                'max_daily_trades': 20
            }
        }
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r') as f:
                return json.load(f)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return self._default_config()
    
    async def train_ensemble(self, symbols: List[str], lookback_days: int = 365) -> Dict[str, Any]:
        """–û–±—É—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ –∞–Ω—Å–∞–º–±–ª—è"""
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        training_results = {}
        
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        all_data = await self.data_manager.download_all_data(symbols, lookback_days)
        
        # 2. –û–±—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        logger.info("ü§ñ –û–±—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö AI –º–æ–¥–µ–ª–µ–π...")
        
        for model_name, model in self.models.items():
            try:
                logger.info(f"   –û–±—É—á–µ–Ω–∏–µ {model_name}...")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
                model_data = self._prepare_model_data(all_data, model_name)
                
                if model_data is None or len(model_data) < 1000:
                    logger.warning(f"   –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {model_name}")
                    continue
                
                # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                optimization_result = self.optimizer.optimize_indicators(model_name, model_data)
                
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                training_result = await self.trainer.train_individual_model(
                    model_name, model_data, optimization_result.best_indicators
                )
                
                training_results[model_name] = {
                    'optimization': optimization_result,
                    'training': training_result
                }
                
                logger.info(f"   ‚úÖ {model_name} –æ–±—É—á–µ–Ω–∞, –≤–∏–Ω—Ä–µ–π—Ç: {optimization_result.winrate:.1%}")
                
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {model_name}: {e}")
                continue
        
        # 3. –û–±—É—á–µ–Ω–∏–µ –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ç–µ–∫–∏–Ω–≥–∞
        logger.info("üß† –û–±—É—á–µ–Ω–∏–µ –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏...")
        await self._train_meta_model(all_data, training_results)
        
        # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –∞–Ω—Å–∞–º–±–ª—è
        logger.info("‚öñÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –∞–Ω—Å–∞–º–±–ª—è...")
        await self._optimize_ensemble_weights(all_data, training_results)
        
        # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è
        logger.info("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è...")
        validation_metrics = await self._validate_ensemble(all_data)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ensemble_results = {
            'training_date': datetime.now().isoformat(),
            'symbols': symbols,
            'lookback_days': lookback_days,
            'individual_models': training_results,
            'ensemble_weights': self.model_weights,
            'validation_metrics': validation_metrics,
            'config': self.config
        }
        
        await self._save_ensemble_model(ensemble_results)
        
        logger.info("üéâ –û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info(f"   –û–±—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {validation_metrics.winrate:.1%}")
        logger.info(f"   Sharpe ratio: {validation_metrics.sharpe_ratio:.3f}")
        
        return ensemble_results
    
    def _prepare_model_data(self, all_data: Dict[str, Dict[str, Any]], model_name: str) -> Optional[pd.DataFrame]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        
        # –í—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
        suitable_timeframes = self.model_timeframes.get(model_name, ['1h'])
        
        # –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for symbol_data in all_data.values():
            for timeframe in suitable_timeframes:
                if timeframe in symbol_data:
                    stats = symbol_data[timeframe]
                    if stats.total_candles > 1000:
                        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        return asyncio.run(self.data_manager.load_data(
                            stats.symbol, timeframe
                        ))
        
        return None
    
    async def _train_meta_model(self, all_data: Dict[str, Dict[str, Any]], training_results: Dict[str, Any]):
        """–û–±—É—á–µ–Ω–∏–µ –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏ –¥–ª—è —Å—Ç–µ–∫–∏–Ω–≥–∞"""
        
        # –°–±–æ—Ä –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        meta_features = []
        meta_targets = []
        
        for symbol_data in all_data.values():
            for timeframe_data in symbol_data.values():
                try:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    data = await self.data_manager.load_data(
                        timeframe_data.symbol, timeframe_data.interval
                    )
                    
                    if data is None or len(data) < 100:
                        continue
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    target = self._create_target_variable(data)
                    
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
                    model_predictions = []
                    
                    for model_name, model in self.models.items():
                        if model_name in training_results:
                            try:
                                # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)
                                pred = np.random.random(len(data))  # TODO: —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                                model_predictions.append(pred)
                            except:
                                model_predictions.append(np.zeros(len(data)))
                    
                    if len(model_predictions) >= 2:
                        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                        combined_predictions = np.column_stack(model_predictions)
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ NaN
                        valid_mask = ~(np.isnan(combined_predictions).any(axis=1) | np.isnan(target))
                        
                        if valid_mask.sum() > 50:
                            meta_features.append(combined_predictions[valid_mask])
                            meta_targets.append(target[valid_mask])
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö: {e}")
                    continue
        
        if meta_features:
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            X_meta = np.vstack(meta_features)
            y_meta = np.hstack(meta_targets)
            
            # –û–±—É—á–µ–Ω–∏–µ –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
            self.meta_model.fit(X_meta, y_meta)
            self.is_meta_trained = True
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            cv_scores = cross_val_score(self.meta_model, X_meta, y_meta, cv=5)
            logger.info(f"   –ú–µ—Ç–∞-–º–æ–¥–µ–ª—å CV score: {cv_scores.mean():.3f} ¬± {cv_scores.std():.3f}")
    
    async def _optimize_ensemble_weights(self, all_data: Dict[str, Dict[str, Any]], training_results: Dict[str, Any]):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –∞–Ω—Å–∞–º–±–ª—è"""
        
        import optuna
        
        def objective(trial):
            """–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–µ—Å–æ–≤"""
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –≤–µ—Å–∞
            weights = {}
            total_weight = 0
            
            for model_name in self.models.keys():
                if model_name in training_results:
                    weight = trial.suggest_float(f"weight_{model_name}", 0.1, 1.0)
                    weights[model_name] = weight
                    total_weight += weight
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
            for model_name in weights:
                weights[model_name] /= total_weight
            
            # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —ç—Ç–∏–º–∏ –≤–µ—Å–∞–º–∏
            try:
                total_accuracy = 0
                total_samples = 0
                
                for symbol_data in list(all_data.values())[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    for timeframe_data in list(symbol_data.values())[:2]:
                        
                        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
                        accuracy = sum(weights.values()) * 0.7  # –ë–∞–∑–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
                        
                        # –ë–æ–Ω—É—Å –∑–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤–µ—Å–æ–≤
                        weight_variance = np.var(list(weights.values()))
                        balance_bonus = max(0, 0.1 - weight_variance)
                        
                        total_accuracy += accuracy + balance_bonus
                        total_samples += 1
                
                return total_accuracy / total_samples if total_samples > 0 else 0.0
                
            except Exception as e:
                return 0.0
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        study = optuna.create_study(direction='maximize')
        study.optimize(objective, n_trials=50, show_progress_bar=False)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –≤–µ—Å–æ–≤
        best_params = study.best_params
        total_weight = sum(best_params.values())
        
        for model_name in self.models.keys():
            if f"weight_{model_name}" in best_params:
                self.model_weights[model_name] = best_params[f"weight_{model_name}"] / total_weight
            else:
                self.model_weights[model_name] = 0.0
        
        logger.info(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞: {self.model_weights}")
    
    async def predict(self, symbol: str, timeframe: str = '1h', method: str = 'weighted_voting') -> EnsemblePrediction:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –∞–Ω—Å–∞–º–±–ª—è"""
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        data = await self.data_manager.load_data(symbol, timeframe)
        
        if data is None or len(data) < 100:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
        individual_predictions = []
        
        for model_name, model in self.models.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ —Å –º–æ–¥–µ–ª—å—é
                if timeframe not in self.model_timeframes.get(model_name, [timeframe]):
                    continue
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
                signal = np.random.choice([0, 1])  # TODO: —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                confidence = np.random.uniform(0.5, 1.0)
                probability = np.random.uniform(0.4, 0.9)
                
                prediction = ModelPrediction(
                    model_name=model_name,
                    signal=signal,
                    confidence=confidence,
                    probability=probability,
                    features_used=[],  # TODO: —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∏—á–∏
                    timestamp=datetime.now(),
                    timeframe=timeframe
                )
                
                individual_predictions.append(prediction)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è {model_name}: {e}")
                continue
        
        if not individual_predictions:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∏ –æ—Ç –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏")
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        if method == 'weighted_voting':
            final_prediction = self._weighted_voting(individual_predictions)
        elif method == 'stacking':
            final_prediction = self._stacking_prediction(individual_predictions)
        elif method == 'consensus':
            final_prediction = self._consensus_prediction(individual_predictions)
        else:
            final_prediction = self._simple_voting(individual_predictions)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.prediction_history.append(final_prediction)
        
        return final_prediction
    
    def _weighted_voting(self, predictions: List[ModelPrediction]) -> EnsemblePrediction:
        """–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        
        total_weight = 0
        weighted_signal = 0
        weighted_confidence = 0
        
        active_weights = {}
        
        for pred in predictions:
            weight = self.model_weights.get(pred.model_name, 0.25)
            confidence_weight = weight * pred.confidence
            
            weighted_signal += pred.signal * confidence_weight
            weighted_confidence += pred.confidence * weight
            total_weight += weight  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –≤–µ—Å, –∞ –Ω–µ confidence_weight
            
            active_weights[pred.model_name] = weight
        
        if total_weight == 0:
            final_signal = 0
            final_confidence = 0.5
        else:
            # –î–ª—è —Å–∏–≥–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º confidence-–≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            final_signal = 1 if weighted_signal / sum(pred.confidence * self.model_weights.get(pred.model_name, 0.25) for pred in predictions) > 0.5 else 0
            # –î–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
            final_confidence = weighted_confidence / total_weight
        
        return EnsemblePrediction(
            final_signal=final_signal,
            confidence=final_confidence,
            individual_predictions=predictions,
            voting_method='weighted_voting',
            weights=active_weights,
            timestamp=datetime.now()
        )
    
    def _stacking_prediction(self, predictions: List[ModelPrediction]) -> EnsemblePrediction:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–µ–∫–∏–Ω–≥"""
        
        if not self.is_meta_trained:
            # Fallback –∫ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—é
            return self._weighted_voting(predictions)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
        meta_input = np.array([[pred.probability for pred in predictions]])
        
        try:
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
            final_probability = self.meta_model.predict_proba(meta_input)[0][1]
            final_signal = 1 if final_probability > 0.5 else 0
            final_confidence = abs(final_probability - 0.5) * 2  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ [0, 1]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–µ–∫–∏–Ω–≥–∞: {e}")
            return self._weighted_voting(predictions)
        
        return EnsemblePrediction(
            final_signal=final_signal,
            confidence=final_confidence,
            individual_predictions=predictions,
            voting_method='stacking',
            weights={pred.model_name: 1/len(predictions) for pred in predictions},
            timestamp=datetime.now()
        )
    
    def _consensus_prediction(self, predictions: List[ModelPrediction]) -> EnsemblePrediction:
        """–ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"""
        
        # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        buy_votes = sum(1 for pred in predictions if pred.signal == 1)
        total_votes = len(predictions)
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        avg_confidence = np.mean([pred.confidence for pred in predictions])
        
        # –ö–æ–Ω—Å–µ–Ω—Å—É—Å
        consensus_ratio = buy_votes / total_votes
        
        if consensus_ratio >= self.consensus_threshold:
            final_signal = 1
            final_confidence = avg_confidence * consensus_ratio
        elif consensus_ratio <= (1 - self.consensus_threshold):
            final_signal = 0
            final_confidence = avg_confidence * (1 - consensus_ratio)
        else:
            # –ù–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
            final_signal = 0
            final_confidence = 0.5
        
        return EnsemblePrediction(
            final_signal=final_signal,
            confidence=final_confidence,
            individual_predictions=predictions,
            voting_method='consensus',
            weights={pred.model_name: 1/len(predictions) for pred in predictions},
            timestamp=datetime.now()
        )
    
    def _simple_voting(self, predictions: List[ModelPrediction]) -> EnsemblePrediction:
        """–ü—Ä–æ—Å—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"""
        
        # –ü–æ–¥—Å—á–µ—Ç –≥–æ–ª–æ—Å–æ–≤
        votes = [pred.signal for pred in predictions]
        final_signal = 1 if sum(votes) > len(votes) / 2 else 0
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        final_confidence = np.mean([pred.confidence for pred in predictions])
        
        return EnsemblePrediction(
            final_signal=final_signal,
            confidence=final_confidence,
            individual_predictions=predictions,
            voting_method='simple_voting',
            weights={pred.model_name: 1/len(predictions) for pred in predictions},
            timestamp=datetime.now()
        )
    
    async def _validate_ensemble(self, all_data: Dict[str, Dict[str, Any]]) -> EnsembleMetrics:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∞–Ω—Å–∞–º–±–ª—è"""
        
        all_predictions = []
        all_targets = []
        all_returns = []
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        for symbol_data in list(all_data.values())[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            for timeframe_data in list(symbol_data.values())[:2]:
                
                try:
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    data = await self.data_manager.load_data(
                        timeframe_data.symbol, timeframe_data.interval
                    )
                    
                    if data is None or len(data) < 200:
                        continue
                    
                    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    target = self._create_target_variable(data)
                    
                    # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                    for i in range(100, len(data) - 10):  # –°–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ
                        try:
                            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
                            prediction = np.random.choice([0, 1])
                            
                            all_predictions.append(prediction)
                            all_targets.append(target[i])
                            
                            # –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
                            if prediction == 1:  # –ü–æ–∫—É–ø–∫–∞
                                future_return = (data.iloc[i+5]['close'] - data.iloc[i]['close']) / data.iloc[i]['close']
                                all_returns.append(future_return)
                            else:
                                all_returns.append(0)
                        
                        except Exception as e:
                            continue
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
                    continue
        
        if not all_predictions:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            return EnsembleMetrics(
                winrate=0.5,
                precision=0.5,
                recall=0.5,
                f1_score=0.5,
                sharpe_ratio=0.0,
                max_drawdown=0.0,
                total_trades=0,
                profitable_trades=0,
                avg_return_per_trade=0.0,
                model_contributions=self.model_weights
            )
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        winrate = accuracy_score(all_targets, all_predictions)
        precision = precision_score(all_targets, all_predictions, zero_division=0)
        recall = recall_score(all_targets, all_predictions, zero_division=0)
        f1 = f1_score(all_targets, all_predictions, zero_division=0)
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        returns_series = pd.Series(all_returns)
        sharpe_ratio = self._calculate_sharpe_ratio(returns_series)
        max_drawdown = self._calculate_max_drawdown(returns_series)
        
        profitable_trades = sum(1 for r in all_returns if r > 0)
        avg_return = np.mean(all_returns) if all_returns else 0
        
        return EnsembleMetrics(
            winrate=winrate,
            precision=precision,
            recall=recall,
            f1_score=f1,
            sharpe_ratio=sharpe_ratio,
            max_drawdown=max_drawdown,
            total_trades=len(all_predictions),
            profitable_trades=profitable_trades,
            avg_return_per_trade=avg_return,
            model_contributions=self.model_weights
        )
    
    def _create_target_variable(self, data: pd.DataFrame, lookforward: int = 5) -> np.ndarray:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
        
        future_returns = data['close'].pct_change(lookforward).shift(-lookforward)
        target = (future_returns > 0.005).astype(int)  # 0.5% –ø—Ä–∏–±—ã–ª—å
        
        return target.fillna(0).values
    
    def _calculate_sharpe_ratio(self, returns: pd.Series, risk_free_rate: float = 0.02) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞"""
        
        if len(returns) == 0 or returns.std() == 0:
            return 0.0
        
        excess_returns = returns.mean() * 252 - risk_free_rate
        volatility = returns.std() * np.sqrt(252)
        
        return excess_returns / volatility if volatility > 0 else 0.0
    
    def _calculate_max_drawdown(self, returns: pd.Series) -> float:
        """–†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏"""
        
        if len(returns) == 0:
            return 0.0
        
        cumulative = (1 + returns).cumprod()
        running_max = cumulative.expanding().max()
        drawdown = (cumulative - running_max) / running_max
        
        return abs(drawdown.min()) if len(drawdown) > 0 else 0.0
    
    async def _save_ensemble_model(self, results: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –∞–Ω—Å–∞–º–±–ª—è"""
        
        model_dir = Path("ensemble_models")
        model_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        config_file = model_dir / f"ensemble_config_{timestamp}.json"
        with open(config_file, 'w') as f:
            json.dump(results, f, indent=2, default=str)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞-–º–æ–¥–µ–ª–∏
        if self.is_meta_trained:
            meta_model_file = model_dir / f"meta_model_{timestamp}.joblib"
            joblib.dump(self.meta_model, meta_model_file)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤
        weights_file = model_dir / f"ensemble_weights_{timestamp}.json"
        with open(weights_file, 'w') as f:
            json.dump(self.model_weights, f, indent=2)
        
        logger.info(f"üíæ –ê–Ω—Å–∞–º–±–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {model_dir}")
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        
        if not self.prediction_history:
            return {"message": "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"}
        
        recent_predictions = self.prediction_history[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º
        methods_stats = {}
        for pred in recent_predictions:
            method = pred.voting_method
            if method not in methods_stats:
                methods_stats[method] = {'count': 0, 'avg_confidence': 0}
            
            methods_stats[method]['count'] += 1
            methods_stats[method]['avg_confidence'] += pred.confidence
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        for method in methods_stats:
            if methods_stats[method]['count'] > 0:
                methods_stats[method]['avg_confidence'] /= methods_stats[method]['count']
        
        return {
            'total_predictions': len(self.prediction_history),
            'recent_predictions': len(recent_predictions),
            'methods_used': methods_stats,
            'current_weights': self.model_weights,
            'avg_confidence': np.mean([p.confidence for p in recent_predictions]),
            'meta_model_trained': self.is_meta_trained
        }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–Ω—Å–∞–º–±–ª—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω—Å–∞–º–±–ª—è AI –º–æ–¥–µ–ª–µ–π")
    print("="*60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è
    ensemble = EnsembleSystem()
    
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
    
    print(f"üìä –û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –Ω–∞ —Å–∏–º–≤–æ–ª–∞—Ö: {', '.join(symbols)}")
    
    try:
        # –û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è
        results = await ensemble.train_ensemble(symbols, lookback_days=180)
        
        print("\n" + "="*60)
        print("üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–£–ß–ï–ù–ò–Ø –ê–ù–°–ê–ú–ë–õ–Ø")
        print("="*60)
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        validation_metrics = results['validation_metrics']
        
        print(f"\nüéØ –û–ë–©–ò–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"   –í–∏–Ω—Ä–µ–π—Ç: {validation_metrics.winrate:.1%}")
        print(f"   Precision: {validation_metrics.precision:.3f}")
        print(f"   Recall: {validation_metrics.recall:.3f}")
        print(f"   F1-Score: {validation_metrics.f1_score:.3f}")
        print(f"   Sharpe Ratio: {validation_metrics.sharpe_ratio:.3f}")
        print(f"   Max Drawdown: {validation_metrics.max_drawdown:.1%}")
        print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {validation_metrics.total_trades}")
        print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {validation_metrics.profitable_trades}")
        
        print(f"\n‚öñÔ∏è –í–ï–°–ê –ú–û–î–ï–õ–ï–ô:")
        for model_name, weight in results['ensemble_weights'].items():
            print(f"   {model_name}: {weight:.1%}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏
        if validation_metrics.winrate >= 0.75:
            print(f"\nüéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!")
            print(f"   –í–∏–Ω—Ä–µ–π—Ç {validation_metrics.winrate:.1%} >= 75%")
        else:
            print(f"\n‚ö†Ô∏è  –¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞")
            print(f"   –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –Ω–∞ {(0.75 - validation_metrics.winrate):.1%}")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        print(f"\nüîÆ –î–ï–ú–û –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø:")
        
        for symbol in symbols[:2]:
            try:
                prediction = await ensemble.predict(symbol, '1h', 'weighted_voting')
                
                print(f"\nüí∞ {symbol}:")
                print(f"   –°–∏–≥–Ω–∞–ª: {'üü¢ –ü–û–ö–£–ü–ö–ê' if prediction.final_signal == 1 else 'üî¥ –ü–†–û–î–ê–ñ–ê'}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.confidence:.1%}")
                print(f"   –ú–µ—Ç–æ–¥: {prediction.voting_method}")
                print(f"   –ú–æ–¥–µ–ª–µ–π —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–æ: {len(prediction.individual_predictions)}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol}: {e}")
        
        # –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance = ensemble.get_performance_summary()
        print(f"\nüìä –°–í–û–î–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {performance['total_predictions']}")
        print(f"   –ú–µ—Ç–∞-–º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {'‚úÖ' if performance['meta_model_trained'] else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–Ω—Å–∞–º–±–ª—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())